<!-- Copyright (c)  Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information. -->
<Project>
  <Import Project="..\Directory.Build.targets" />
  <Import Project="$(RepoToolsetDir)Imports.targets" Condition="'$(RepoToolsetDir)' != ''" />
  <Import Project="..\build\VisualStudio.XamlRules.targets"/>

  <ItemGroup>
    <AdditionalFiles Include="$(MSBuildThisFileDirectory)\BannedSymbols.txt" Condition="'$(BannedSymbolsOptOut)' != 'true'" />
  </ItemGroup> 
  
  <!-- 
    Defining this target will disable the new SDK behavior of implicit transitive project
    references. This is a fine feature in general but the current implementation breaks VSIX 
    construction by including a number of projects that should not be included. 
    https://github.com/dotnet/sdk/issues/1366
  -->
  <Target Name="IncludeTransitiveProjectReferences" >
  </Target>
  
  <!-- 
    With UseCommonOutputDirectory turned on, any copy-local projects/references break
    csproj's up-to-date check because they aren't copied to the output directory. 
    Turn it off. 
  -->
  <ItemDefinitionGroup Condition="'$(UseCommonOutputDirectory)' == 'true'">
    <Reference>
      <Private>false</Private>
    </Reference>

    <ProjectReference>
      <Private>false</Private>
    </ProjectReference>
  </ItemDefinitionGroup>

  <!-- Using Inputs/Outputs just to loop over test architectures -->
  <Target Name="InnerTest" Inputs="*%(_TestArchitectureItems.Identity)" Outputs="*%(_TestArchitectureItems.Identity)" Returns="@(_FailedTestRuns)">

    <PropertyGroup>
      <_TestArchitecture>%(_TestArchitectureItems.Identity)</_TestArchitecture>
      <_TestEnvironment>$(TargetFramework)|$(_TestArchitecture)</_TestEnvironment>
      <_TestOutPathNoExt>$(ArtifactsTestResultsDir)$(MSBuildProjectName)_$(TargetFramework)_$(_TestArchitecture)</_TestOutPathNoExt>
      <_TestStdOutPath>$(_TestOutPathNoExt).log</_TestStdOutPath>
      <_TestResultsXmlPath>$(_TestOutPathNoExt).xml</_TestResultsXmlPath>
      <_TestResultsHtmlPath>$(_TestOutPathNoExt).html</_TestResultsHtmlPath>
      <_TestResultsOpenCoverPath>$(_TestOutPathNoExt).coverage</_TestResultsOpenCoverPath>
      <_RunOnCore>false</_RunOnCore>
      <_RunOnCore Condition="$(TargetFramework.StartsWith('netcoreapp'))">true</_RunOnCore>
      <_UseOpenCover>$(UseOpenCover)</_UseOpenCover>
      <_UseOpenCover Condition="'$(_RunOnCore)' == 'true'">false</_UseOpenCover>
    </PropertyGroup>

    <Error Text="Architecture specified in TestArchitectures is not supported: '$(_TestArchitecture)'" File="XUnit"
           Condition="'$(_TestArchitecture)' != 'x64' and ('$(_TestArchitecture)' != 'x86' or $(_RunOnCore))"/>

    <PropertyGroup Condition="'$(_RunOnCore)' == 'true'">
      <_TargetFileNameNoExt>$([System.IO.Path]::GetFileNameWithoutExtension('$(TargetFileName)'))</_TargetFileNameNoExt>
      <_CoreRuntimeConfigPath>$(TargetDir)$(_TargetFileNameNoExt).runtimeconfig.json</_CoreRuntimeConfigPath>
      <_CoreDepsPath>$(TargetDir)$(_TargetFileNameNoExt).deps.json</_CoreDepsPath>

      <!-- TODO: xUnit doesn't support -html on CoreCLR currently (see https://github.com/xunit/xunit/issues/977) -->
      <_TestRunnerCommand>"$(DotNetTool)" exec --depsfile "$(_CoreDepsPath)" --runtimeconfig "$(_CoreRuntimeConfigPath)" "$(NuGetPackageRoot)xunit.runner.console/$(XUnitVersion)/tools/netcoreapp1.0/xunit.console.dll" "$(TargetPath)" -noautoreporters -xml "$(_TestResultsXmlPath)" $(XUnitRunnerAdditionalArguments)</_TestRunnerCommand>
      <_TestResultsDisplayPath>$(_TestStdOutPath)</_TestResultsDisplayPath>
    </PropertyGroup>

    <PropertyGroup Condition="'$(_RunOnCore)' != 'true'">
      <_XUnitConsoleExe>xunit.console.exe</_XUnitConsoleExe>
      <_XUnitConsoleExe Condition="'$(_TestArchitecture)' == 'x86'">xunit.console.x86.exe</_XUnitConsoleExe>
      <_XUnitRunnerCommand>$(NuGetPackageRoot)xunit.runner.console\$(XUnitVersion)\tools\net472\$(_XUnitConsoleExe)</_XUnitRunnerCommand>
      <_XUnitRunnerCommandArgs>"$(TargetPath)" -noshadow -xml "$(_TestResultsXmlPath)" -html "$(_TestResultsHtmlPath)" $(XUnitRunnerAdditionalArguments)</_XUnitRunnerCommandArgs>
      <_TestRunnerCommand>"$(_XUnitRunnerCommand)" $(_XUnitRunnerCommandArgs)</_TestRunnerCommand>
      <_TestResultsDisplayPath>$(_TestResultsHtmlPath)</_TestResultsDisplayPath>
    </PropertyGroup>

    <PropertyGroup Condition="'$(_UseOpenCover)' == 'true'">
      <_OpenCoverConsoleExe>OpenCover.Console.exe</_OpenCoverConsoleExe>
      <_OpenCoverCommand>$(NuGetPackageRoot)opencover\$(OpenCoverVersion)\tools\$(_OpenCoverConsoleExe)</_OpenCoverCommand>
      <_OpenCoverRegister>user</_OpenCoverRegister>
      <_OpenCoverRegister Condition="'$(_TestArchitecture)' == 'x86'">path32</_OpenCoverRegister>
      <_OpenCoverCommandArgs>-register:$(_OpenCoverRegister) -returntargetcode -hideskipped:All -filter:"+[*]*" -excludebyattribute:*.ExcludeFromCodeCoverage* -excludebyfile:*\*Designer.cs -output:"$(_TestResultsOpenCoverPath)"</_OpenCoverCommandArgs>
      <_TestRunnerCommand>"$(_OpenCoverCommand)" $(_OpenCoverCommandArgs) -target:"$(_XUnitRunnerCommand)" -targetargs:"$(_XUnitRunnerCommandArgs.Replace(`"`, `\"`))"</_TestRunnerCommand>
    </PropertyGroup>

    <MakeDir Directories="$(ArtifactsTestResultsDir)"/>
    <Delete Files="$(_TestOutPathNoExt).*" />

    <Message Text="Running tests: $(TargetPath) [$(_TestEnvironment)]" Importance="high"/>

    <!-- Note that xUnit outputs failure info to both STDOUT (stack trace, message) and STDERR (failed test name) -->
    <Exec Command='$(_TestRunnerCommand) > "$(_TestStdOutPath)" 2>&amp;1'
          LogStandardErrorAsError="false"
          WorkingDirectory="$(OutDir)"
          IgnoreExitCode="true">

      <Output TaskParameter="ExitCode" PropertyName="_TestErrorCode" />
    </Exec>

    <WriteLinesToFile File="$(_TestStdOutPath)" Overwrite="false" Lines=";=== COMMAND LINE ===;$(_TestRunnerCommand)" />

    <ItemGroup>
      <_FailedTestRuns Include="$(_TestEnvironment)" Condition="'$(_TestErrorCode)' != '0'" />
    </ItemGroup>

    <Message Text="Tests succeeded: $(TargetPath) [$(_TestEnvironment)]" Condition="'$(_TestErrorCode)' == '0'" Importance="high" />
    <Warning Text="$(_TestResultsDisplayPath) [$(_TestEnvironment)]" Condition="'$(_TestErrorCode)' != '0' and '$(TargetFrameworks)' != ''" File="XUnit" />
    <Error Text="$(_TestResultsDisplayPath) [$(_TestEnvironment)]" Condition="'$(_TestErrorCode)' != '0' and '$(TargetFrameworks)' == ''" File="XUnit" />
  </Target>

  <Target Name="ExtractWindowsPdb" BeforeTargets="InnerTest">

    <PropertyGroup>
      <_RunOnCore>false</_RunOnCore>
      <_RunOnCore Condition="$(TargetFramework.StartsWith('netcoreapp'))">true</_RunOnCore>
      <_UseOpenCover>$(UseOpenCover)</_UseOpenCover>
      <_UseOpenCover Condition="'$(_RunOnCore)' == 'true'">false</_UseOpenCover>

      <_TargetFileNameNoExt>$([System.IO.Path]::GetFileNameWithoutExtension('$(TargetFileName)'))</_TargetFileNameNoExt>
      <_TargetExtractedPdb>$(TargetDir)$(_TargetFileNameNoExt).ppdb</_TargetExtractedPdb>
      <_SkipPdbConversion>false</_SkipPdbConversion>
      <_SkipPdbConversion Condition="'$(_UseOpenCover)' != 'true'">true</_SkipPdbConversion>
      <_SkipPdbConversion Condition="Exists($(_TargetExtractedPdb))">true</_SkipPdbConversion>
    </PropertyGroup>

    <!-- Extract PDBs from binaries -->
    <ItemGroup Condition="'$(_SkipPdbConversion)' != 'true'">
      <_BinariesInTestDirectory Include="$(TargetDir)*.dll" />
      <_BinariesInTestDirectory Update="@(_BinariesInTestDirectory)" IntermediatePdb="%(RootDir)%(Directory)%(Filename).ppdb" />
    </ItemGroup>

    <PropertyGroup Condition="'$(_SkipPdbConversion)' != 'true'">
      <_PdbConverterPath>$(NuGetPackageRoot)microsoft.diasymreader.pdb2pdb\$(MicrosoftDiaSymReaderPdb2PdbVersion)\tools\Pdb2Pdb.exe</_PdbConverterPath>
    </PropertyGroup>

    <Exec Command="&quot;$(_PdbConverterPath)&quot; &quot;@(_BinariesInTestDirectory)&quot; /out &quot;%(IntermediatePdb)&quot; /extract"
          Condition="'$(_SkipPdbConversion)' != 'true' AND !Exists(%(IntermediatePdb))"
          ContinueOnError="true"
          IgnoreExitCode="true" />

    <!-- Convert portable PDBs to Windows PDBs for OpenCover -->
    <ItemGroup Condition="'$(_SkipPdbConversion)' != 'true'">
      <_PortablePdb Include="$(TargetDir)*.ppdb" />
      <_PortablePdb Update="@(_PortablePdb)" Binary="%(RootDir)%(Directory)%(Filename).dll" OutputPdb="%(RootDir)%(Directory)%(Filename).pdb" />
    </ItemGroup>

    <Exec Command="&quot;$(_PdbConverterPath)&quot; &quot;%(Binary)&quot; /pdb &quot;@(_PortablePdb)&quot; /out &quot;%(OutputPdb)&quot;"
          Condition="'$(_SkipPdbConversion)' != 'true' AND !Exists(%(OutputPdb))"
          ContinueOnError="true"
          IgnoreExitCode="true" />

   <!--
    Import NuGet targets to WPF temp projects (workaround for https://github.com/dotnet/sourcelink/issues/91) 
  -->
  <Import Project="$(_WpfTempProjectNuGetFileNameNoExt).targets" Condition="'$(_WpfTempProjectNuGetFileNameNoExt)' != '' and Exists('$(_WpfTempProjectNuGetFileNameNoExt).targets')"/> </Target>

</Project>
