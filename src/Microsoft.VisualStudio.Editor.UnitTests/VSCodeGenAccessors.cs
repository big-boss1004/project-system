// ------------------------------------------------------------------------------
//<autogenerated>
//        This code was generated by Microsoft Visual Studio Team System 2005.
//
//        Changes to this file may cause incorrect behavior and will be lost if
//        the code is regenerated.
//</autogenerated>
//------------------------------------------------------------------------------
using Microsoft.VisualStudio.TestTools.UnitTesting;
using System.Web.Compilation;
using System.Collections.Generic;

namespace Microsoft.VisualStudio.Editors.UnitTests
{

    [System.Diagnostics.DebuggerStepThrough()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TestTools.UnitTestGeneration", "1.0.0.0")]
    internal class BaseAccessor
    {

        protected Microsoft.VisualStudio.TestTools.UnitTesting.PrivateObject m_privateObject;
        protected static readonly string EDITORS_ASSEMBLY = "Microsoft.VisualStudio.Editors, Version=11.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a";
        internal static readonly string WEB_EXTENSIONS_ASSEMBLY = "System.Web.Extensions, Version=3.5.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35";
        internal static readonly string WEB_ASSEMBLY = "System.Web, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a";

        protected BaseAccessor(object target, Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType type)
        {
            m_privateObject = new Microsoft.VisualStudio.TestTools.UnitTesting.PrivateObject(target, type);
        }

        protected BaseAccessor(Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType type)
            :
                this(null, type)
        {
        }

        internal virtual object Target
        {
            get
            {
                return m_privateObject.Target;
            }
        }

        public override string ToString()
        {
            return this.Target.ToString();
        }

        public override bool Equals(object obj)
        {
            if (typeof(BaseAccessor).IsInstanceOfType(obj))
            {
                obj = ((BaseAccessor)(obj)).Target;
            }
            return this.Target.Equals(obj);
        }

        public override int GetHashCode()
        {
            return this.Target.GetHashCode();
        }
    }

    [System.Diagnostics.DebuggerStepThrough()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TestTools.UnitTestGeneration", "1.0.0.0")]
    internal class Microsoft_VisualStudio_Editors_DesignerFramework_AccessModifierComboboxAccessor : BaseAccessor
    {

        protected static Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType m_privateType = new Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType(EDITORS_ASSEMBLY, "Microsoft.VisualStudio.Editors.DesignerFramework.AccessModifierCombobox");

        internal Microsoft_VisualStudio_Editors_DesignerFramework_AccessModifierComboboxAccessor(object target)
            :
                base(target, m_privateType)
        {
        }

        internal string GetCustomToolPropertyValue()
        {
            object[] args = new object[0];
            string ret = ((string)(m_privateObject.Invoke("GetCustomToolPropertyValue", new System.Type[0], args)));
            return ret;
        }

        internal string GetCurrentValue()
        {
            object[] args = new object[0];
            string ret = ((string)(m_privateObject.Invoke("GetCurrentValue", new System.Type[0], args)));
            return ret;
        }

        internal void SetCurrentValue(string value)
        {
            object[] args = new object[] {
                value};
            m_privateObject.Invoke("SetCurrentValue", new System.Type[] {
                    typeof(string)}, args);
        }

        internal string[] GetDropdownValues()
        {
            object[] args = new object[0];
            string[] ret = ((string[])(m_privateObject.Invoke("GetDropdownValues", new System.Type[0], args)));
            return ret;
        }

        internal bool IsDesignerEditable()
        {
            object[] args = new object[0];
            bool ret = ((bool)(m_privateObject.Invoke("IsDesignerEditable", new System.Type[0], args)));
            return ret;
        }

        internal bool ShouldBeEnabled()
        {
            object[] args = new object[0];
            bool ret = ((bool)(m_privateObject.Invoke("ShouldBeEnabled", new System.Type[0], args)));
            return ret;
        }

    }

    [System.Diagnostics.DebuggerStepThrough()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TestTools.UnitTestGeneration", "1.0.0.0")]
    internal class Microsoft_VisualStudio_Editors_PropertyPages_ApplicationWithMyPropPageComClassAccessor : BaseAccessor
    {

        protected static Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType m_privateType = new Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType(typeof(global::Microsoft.VisualStudio.Editors.PropertyPages.ApplicationWithMyPropPageComClass));

        internal Microsoft_VisualStudio_Editors_PropertyPages_ApplicationWithMyPropPageComClassAccessor(global::Microsoft.VisualStudio.Editors.PropertyPages.ApplicationWithMyPropPageComClass target)
            :
                base(target, m_privateType)
        {
        }

        internal string Title
        {
            get
            {
                string ret = ((string)(m_privateObject.GetProperty("Title")));
                return ret;
            }
        }

        internal global::System.Type ControlType
        {
            get
            {
                global::System.Type ret = ((global::System.Type)(m_privateObject.GetProperty("ControlType")));
                return ret;
            }
        }

        internal global::System.Windows.Forms.Control CreateControl()
        {
            object[] args = new object[0];
            global::System.Windows.Forms.Control ret = ((global::System.Windows.Forms.Control)(m_privateObject.Invoke("CreateControl", new System.Type[0], args)));
            return ret;
        }
    }


    [System.Diagnostics.DebuggerStepThrough()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TestTools.UnitTestGeneration", "1.0.0.0")]
    internal class Microsoft_VisualStudio_Editors_PropertyPages_PropPageUserControlBaseAccessor : BaseAccessor
    {

        protected static Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType m_privateType = new Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType(typeof(global::Microsoft.VisualStudio.Editors.PropertyPages.PropPageUserControlBase));

        internal Microsoft_VisualStudio_Editors_PropertyPages_PropPageUserControlBaseAccessor(global::Microsoft.VisualStudio.Editors.PropertyPages.PropPageUserControlBase target)
            :
                base(target, m_privateType)
        {
        }

        internal global::System.ComponentModel.IContainer components
        {
            get
            {
                global::System.ComponentModel.IContainer ret = ((global::System.ComponentModel.IContainer)(m_privateObject.GetFieldOrProperty("components")));
                return ret;
            }
            set
            {
                m_privateObject.SetFieldOrProperty("components", value);
            }
        }

        internal bool m_fInsideInit
        {
            get
            {
                bool ret = ((bool)(m_privateObject.GetFieldOrProperty("m_fInsideInit")));
                return ret;
            }
            set
            {
                m_privateObject.SetFieldOrProperty("m_fInsideInit", value);
            }
        }

        internal bool m_IsDirty
        {
            get
            {
                bool ret = ((bool)(m_privateObject.GetFieldOrProperty("m_IsDirty")));
                return ret;
            }
            set
            {
                m_privateObject.SetFieldOrProperty("m_IsDirty", value);
            }
        }

        internal bool m_CanApplyNow
        {
            get
            {
                bool ret = ((bool)(m_privateObject.GetFieldOrProperty("m_CanApplyNow")));
                return ret;
            }
            set
            {
                m_privateObject.SetFieldOrProperty("m_CanApplyNow", value);
            }
        }

        internal global::Microsoft.VisualStudio.Editors.UnitTests.Microsoft_VisualStudio_Editors_PropertyPages_IPropertyPageSiteInternalAccessor m_Site
        {
            get
            {
                object _ret_val = m_privateObject.GetFieldOrProperty("m_Site");
                global::Microsoft.VisualStudio.Editors.UnitTests.Microsoft_VisualStudio_Editors_PropertyPages_IPropertyPageSiteInternalAccessor _ret = null;
                if ((_ret_val != null))
                {
                    _ret = new global::Microsoft.VisualStudio.Editors.UnitTests.Microsoft_VisualStudio_Editors_PropertyPages_IPropertyPageSiteInternalAccessor(_ret_val);
                }
                global::Microsoft.VisualStudio.Editors.UnitTests.Microsoft_VisualStudio_Editors_PropertyPages_IPropertyPageSiteInternalAccessor ret = _ret;
                return ret;
            }
            set
            {
                m_privateObject.SetFieldOrProperty("m_Site", value);
            }
        }

        internal global::Microsoft.VisualStudio.Editors.PropertyPages.PropertyControlData[] m_ControlData
        {
            get
            {
                global::Microsoft.VisualStudio.Editors.PropertyPages.PropertyControlData[] ret = ((global::Microsoft.VisualStudio.Editors.PropertyPages.PropertyControlData[])(m_privateObject.GetFieldOrProperty("m_ControlData")));
                return ret;
            }
            set
            {
                m_privateObject.SetFieldOrProperty("m_ControlData", value);
            }
        }

        internal object[] m_Objects
        {
            get
            {
                object[] ret = ((object[])(m_privateObject.GetFieldOrProperty("m_Objects")));
                return ret;
            }
            set
            {
                m_privateObject.SetFieldOrProperty("m_Objects", value);
            }
        }

        internal global::System.ComponentModel.PropertyDescriptorCollection[] m_ObjectsPropertyDescriptorsArray
        {
            get
            {
                global::System.ComponentModel.PropertyDescriptorCollection[] ret = ((global::System.ComponentModel.PropertyDescriptorCollection[])(m_privateObject.GetFieldOrProperty("m_ObjectsPropertyDescriptorsArray")));
                return ret;
            }
            set
            {
                m_privateObject.SetFieldOrProperty("m_ObjectsPropertyDescriptorsArray", value);
            }
        }

        internal object[] m_ExtendedObjects
        {
            get
            {
                object[] ret = ((object[])(m_privateObject.GetFieldOrProperty("m_ExtendedObjects")));
                return ret;
            }
            set
            {
                m_privateObject.SetFieldOrProperty("m_ExtendedObjects", value);
            }
        }

        internal global::EnvDTE.DTE m_DTE
        {
            get
            {
                global::EnvDTE.DTE ret = ((global::EnvDTE.DTE)(m_privateObject.GetFieldOrProperty("m_DTE")));
                return ret;
            }
            set
            {
                m_privateObject.SetFieldOrProperty("m_DTE", value);
            }
        }

        internal global::EnvDTE.Project m_DTEProject
        {
            get
            {
                global::EnvDTE.Project ret = ((global::EnvDTE.Project)(m_privateObject.GetFieldOrProperty("m_DTEProject")));
                return ret;
            }
            set
            {
                m_privateObject.SetFieldOrProperty("m_DTEProject", value);
            }
        }

        internal global::EnvDTE.BuildEvents m_buildEvents
        {
            get
            {
                global::EnvDTE.BuildEvents ret = ((global::EnvDTE.BuildEvents)(m_privateObject.GetFieldOrProperty("m_buildEvents")));
                return ret;
            }
            set
            {
                m_privateObject.SetFieldOrProperty("m_buildEvents", value);
            }
        }

        internal global::System.ComponentModel.PropertyDescriptorCollection m_CommonPropertyDescriptors
        {
            get
            {
                global::System.ComponentModel.PropertyDescriptorCollection ret = ((global::System.ComponentModel.PropertyDescriptorCollection)(m_privateObject.GetFieldOrProperty("m_CommonPropertyDescriptors")));
                return ret;
            }
            set
            {
                m_privateObject.SetFieldOrProperty("m_CommonPropertyDescriptors", value);
            }
        }

        internal global::VSLangProj.ProjectProperties m_ProjectPropertiesObject
        {
            get
            {
                global::VSLangProj.ProjectProperties ret = ((global::VSLangProj.ProjectProperties)(m_privateObject.GetFieldOrProperty("m_ProjectPropertiesObject")));
                return ret;
            }
            set
            {
                m_privateObject.SetFieldOrProperty("m_ProjectPropertiesObject", value);
            }
        }

        internal object[] m_CachedRawPropertiesSuperset
        {
            get
            {
                object[] ret = ((object[])(m_privateObject.GetFieldOrProperty("m_CachedRawPropertiesSuperset")));
                return ret;
            }
            set
            {
                m_privateObject.SetFieldOrProperty("m_CachedRawPropertiesSuperset", value);
            }
        }

        internal global::Microsoft.VisualStudio.Shell.ServiceProvider m_ServiceProvider
        {
            get
            {
                global::Microsoft.VisualStudio.Shell.ServiceProvider ret = ((global::Microsoft.VisualStudio.Shell.ServiceProvider)(m_privateObject.GetFieldOrProperty("m_ServiceProvider")));
                return ret;
            }
            set
            {
                m_privateObject.SetFieldOrProperty("m_ServiceProvider", value);
            }
        }

        internal global::Microsoft.VisualStudio.Shell.Interop.IVsHierarchy m_ProjectHierarchy
        {
            get
            {
                global::Microsoft.VisualStudio.Shell.Interop.IVsHierarchy ret = ((global::Microsoft.VisualStudio.Shell.Interop.IVsHierarchy)(m_privateObject.GetFieldOrProperty("m_ProjectHierarchy")));
                return ret;
            }
            set
            {
                m_privateObject.SetFieldOrProperty("m_ProjectHierarchy", value);
            }
        }

        internal global::Microsoft.VisualStudio.Shell.Interop.DBGMODE m_CurrentDebugMode
        {
            get
            {
                global::Microsoft.VisualStudio.Shell.Interop.DBGMODE ret = ((global::Microsoft.VisualStudio.Shell.Interop.DBGMODE)(m_privateObject.GetFieldOrProperty("m_CurrentDebugMode")));
                return ret;
            }
            set
            {
                m_privateObject.SetFieldOrProperty("m_CurrentDebugMode", value);
            }
        }

        internal global::Microsoft.VisualStudio.Shell.Interop.IVsDebugger m_VsDebugger
        {
            get
            {
                global::Microsoft.VisualStudio.Shell.Interop.IVsDebugger ret = ((global::Microsoft.VisualStudio.Shell.Interop.IVsDebugger)(m_privateObject.GetFieldOrProperty("m_VsDebugger")));
                return ret;
            }
            set
            {
                m_privateObject.SetFieldOrProperty("m_VsDebugger", value);
            }
        }

        internal uint m_VsDebuggerEventsCookie
        {
            get
            {
                uint ret = ((uint)(m_privateObject.GetFieldOrProperty("m_VsDebuggerEventsCookie")));
                return ret;
            }
            set
            {
                m_privateObject.SetFieldOrProperty("m_VsDebuggerEventsCookie", value);
            }
        }

        internal bool m_MultiProjectSelect
        {
            get
            {
                bool ret = ((bool)(m_privateObject.GetFieldOrProperty("m_MultiProjectSelect")));
                return ret;
            }
            set
            {
                m_privateObject.SetFieldOrProperty("m_MultiProjectSelect", value);
            }
        }

        internal global::Microsoft.VisualStudio.Shell.Interop.IVsUIShell m_UIShellService
        {
            get
            {
                global::Microsoft.VisualStudio.Shell.Interop.IVsUIShell ret = ((global::Microsoft.VisualStudio.Shell.Interop.IVsUIShell)(m_privateObject.GetFieldOrProperty("m_UIShellService")));
                return ret;
            }
            set
            {
                m_privateObject.SetFieldOrProperty("m_UIShellService", value);
            }
        }

        internal global::Microsoft.VisualStudio.Shell.Interop.IVsUIShell2 m_UIShell2Service
        {
            get
            {
                global::Microsoft.VisualStudio.Shell.Interop.IVsUIShell2 ret = ((global::Microsoft.VisualStudio.Shell.Interop.IVsUIShell2)(m_privateObject.GetFieldOrProperty("m_UIShell2Service")));
                return ret;
            }
            set
            {
                m_privateObject.SetFieldOrProperty("m_UIShell2Service", value);
            }
        }

        internal static global::System.Collections.ArrayList RunningPropertyPages
        {
            get
            {
                global::System.Collections.ArrayList ret = ((global::System.Collections.ArrayList)(m_privateType.GetStaticFieldOrProperty("RunningPropertyPages")));
                return ret;
            }
            set
            {
                m_privateType.SetStaticFieldOrProperty("RunningPropertyPages", value);
            }
        }

        internal System.Collections.Generic.Dictionary<System.Type, Microsoft.VisualStudio.Editors.PropertyPages.PropPageUserControlBase> m_ChildPages
        {
            get
            {
                System.Collections.Generic.Dictionary<System.Type, Microsoft.VisualStudio.Editors.PropertyPages.PropPageUserControlBase> ret = ((System.Collections.Generic.Dictionary<System.Type, Microsoft.VisualStudio.Editors.PropertyPages.PropPageUserControlBase>)(m_privateObject.GetFieldOrProperty("m_ChildPages")));
                return ret;
            }
            set
            {
                m_privateObject.SetFieldOrProperty("m_ChildPages", value);
            }
        }

        internal bool m_ScalingCompleted
        {
            get
            {
                bool ret = ((bool)(m_privateObject.GetFieldOrProperty("m_ScalingCompleted")));
                return ret;
            }
            set
            {
                m_privateObject.SetFieldOrProperty("m_ScalingCompleted", value);
            }
        }

        internal bool m_PageRequiresScaling
        {
            get
            {
                bool ret = ((bool)(m_privateObject.GetFieldOrProperty("m_PageRequiresScaling")));
                return ret;
            }
            set
            {
                m_privateObject.SetFieldOrProperty("m_PageRequiresScaling", value);
            }
        }

        internal bool m_ManualPageScaling
        {
            get
            {
                bool ret = ((bool)(m_privateObject.GetFieldOrProperty("m_ManualPageScaling")));
                return ret;
            }
            set
            {
                m_privateObject.SetFieldOrProperty("m_ManualPageScaling", value);
            }
        }

        internal static global::System.Drawing.Color PropPageBackColor
        {
            get
            {
                global::System.Drawing.Color ret = ((global::System.Drawing.Color)(m_privateType.GetStaticFieldOrProperty("PropPageBackColor")));
                return ret;
            }
            set
            {
                m_privateType.SetStaticFieldOrProperty("PropPageBackColor", value);
            }
        }

        internal bool m_activated
        {
            get
            {
                bool ret = ((bool)(m_privateObject.GetFieldOrProperty("m_activated")));
                return ret;
            }
            set
            {
                m_privateObject.SetFieldOrProperty("m_activated", value);
            }
        }

        internal bool m_inDelayValidation
        {
            get
            {
                bool ret = ((bool)(m_privateObject.GetFieldOrProperty("m_inDelayValidation")));
                return ret;
            }
            set
            {
                m_privateObject.SetFieldOrProperty("m_inDelayValidation", value);
            }
        }

        internal bool m_PageEnabledState
        {
            get
            {
                bool ret = ((bool)(m_privateObject.GetFieldOrProperty("m_PageEnabledState")));
                return ret;
            }
            set
            {
                m_privateObject.SetFieldOrProperty("m_PageEnabledState", value);
            }
        }

        internal global::System.Collections.ArrayList m_PropertyListeners
        {
            get
            {
                global::System.Collections.ArrayList ret = ((global::System.Collections.ArrayList)(m_privateObject.GetFieldOrProperty("m_PropertyListeners")));
                return ret;
            }
            set
            {
                m_privateObject.SetFieldOrProperty("m_PropertyListeners", value);
            }
        }

        internal bool m_PageEnabledPerDebugMode
        {
            get
            {
                bool ret = ((bool)(m_privateObject.GetFieldOrProperty("m_PageEnabledPerDebugMode")));
                return ret;
            }
            set
            {
                m_privateObject.SetFieldOrProperty("m_PageEnabledPerDebugMode", value);
            }
        }

        internal bool m_PageEnabledPerBuildMode
        {
            get
            {
                bool ret = ((bool)(m_privateObject.GetFieldOrProperty("m_PageEnabledPerBuildMode")));
                return ret;
            }
            set
            {
                m_privateObject.SetFieldOrProperty("m_PageEnabledPerBuildMode", value);
            }
        }

        internal bool m_fConfigurationSpecificPage
        {
            get
            {
                bool ret = ((bool)(m_privateObject.GetFieldOrProperty("m_fConfigurationSpecificPage")));
                return ret;
            }
            set
            {
                m_privateObject.SetFieldOrProperty("m_fConfigurationSpecificPage", value);
            }
        }

        internal System.Collections.Generic.List<int> m_SuspendPropertyChangeListeningDispIds
        {
            get
            {
                System.Collections.Generic.List<int> ret = ((System.Collections.Generic.List<int>)(m_privateObject.GetFieldOrProperty("m_SuspendPropertyChangeListeningDispIds")));
                return ret;
            }
            set
            {
                m_privateObject.SetFieldOrProperty("m_SuspendPropertyChangeListeningDispIds", value);
            }
        }

        internal int DISPID_UNKNOWN
        {
            get
            {
                int ret = ((int)(m_privateObject.GetFieldOrProperty("DISPID_UNKNOWN")));
                return ret;
            }
            set
            {
                m_privateObject.SetFieldOrProperty("DISPID_UNKNOWN", value);
            }
        }

        internal uint m_CookieBroadcastMessages
        {
            get
            {
                uint ret = ((uint)(m_privateObject.GetFieldOrProperty("m_CookieBroadcastMessages")));
                return ret;
            }
            set
            {
                m_privateObject.SetFieldOrProperty("m_CookieBroadcastMessages", value);
            }
        }

        internal bool m_fIsApplying
        {
            get
            {
                bool ret = ((bool)(m_privateObject.GetFieldOrProperty("m_fIsApplying")));
                return ret;
            }
            set
            {
                m_privateObject.SetFieldOrProperty("m_fIsApplying", value);
            }
        }

        internal bool m_ProjectReloadedDuringCheckout
        {
            get
            {
                bool ret = ((bool)(m_privateObject.GetFieldOrProperty("m_ProjectReloadedDuringCheckout")));
                return ret;
            }
            set
            {
                m_privateObject.SetFieldOrProperty("m_ProjectReloadedDuringCheckout", value);
            }
        }

        internal int m_CheckoutSectionCount
        {
            get
            {
                int ret = ((int)(m_privateObject.GetFieldOrProperty("m_CheckoutSectionCount")));
                return ret;
            }
            set
            {
                m_privateObject.SetFieldOrProperty("m_CheckoutSectionCount", value);
            }
        }

        internal global::System.Windows.Forms.Control[][] ValidationControlGroups
        {
            get
            {
                global::System.Windows.Forms.Control[][] ret = ((global::System.Windows.Forms.Control[][])(m_privateObject.GetProperty("ValidationControlGroups")));
                return ret;
            }
        }

        internal global::Microsoft.VisualStudio.Shell.Interop.IVsHierarchy ProjectHierarchy
        {
            get
            {
                global::Microsoft.VisualStudio.Shell.Interop.IVsHierarchy ret = ((global::Microsoft.VisualStudio.Shell.Interop.IVsHierarchy)(m_privateObject.GetProperty("ProjectHierarchy")));
                return ret;
            }
        }

        internal bool PageRequiresScaling
        {
            get
            {
                bool ret = ((bool)(m_privateObject.GetProperty("PageRequiresScaling")));
                return ret;
            }
            set
            {
                m_privateObject.SetProperty("PageRequiresScaling", value);
            }
        }

        internal bool ManualPageScaling
        {
            get
            {
                bool ret = ((bool)(m_privateObject.GetProperty("ManualPageScaling")));
                return ret;
            }
            set
            {
                m_privateObject.SetProperty("ManualPageScaling", value);
            }
        }

        internal bool Enabled
        {
            get
            {
                bool ret = ((bool)(m_privateObject.GetProperty("Enabled")));
                return ret;
            }
            set
            {
                m_privateObject.SetProperty("Enabled", value);
            }
        }

        internal bool IsActivated
        {
            get
            {
                bool ret = ((bool)(m_privateObject.GetProperty("IsActivated")));
                return ret;
            }
        }

        internal global::Microsoft.VisualStudio.OLE.Interop.IPropertyPageSite PropertyPageSite
        {
            get
            {
                global::Microsoft.VisualStudio.OLE.Interop.IPropertyPageSite ret = ((global::Microsoft.VisualStudio.OLE.Interop.IPropertyPageSite)(m_privateObject.GetProperty("PropertyPageSite")));
                return ret;
            }
        }

        internal object CommonPropertiesObject
        {
            get
            {
                object ret = ((object)(m_privateObject.GetProperty("CommonPropertiesObject")));
                return ret;
            }
        }

        internal bool IsConfigurationSpecificPage
        {
            get
            {
                bool ret = ((bool)(m_privateObject.GetProperty("IsConfigurationSpecificPage")));
                return ret;
            }
        }

        internal object[] RawPropertiesObjectsOfAllProperties
        {
            get
            {
                object[] ret = ((object[])(m_privateObject.GetProperty("RawPropertiesObjectsOfAllProperties")));
                return ret;
            }
        }

        internal bool MultiProjectSelect
        {
            get
            {
                bool ret = ((bool)(m_privateObject.GetProperty("MultiProjectSelect")));
                return ret;
            }
        }

        internal global::Microsoft.VisualStudio.Shell.ServiceProvider ServiceProvider
        {
            get
            {
                global::Microsoft.VisualStudio.Shell.ServiceProvider ret = ((global::Microsoft.VisualStudio.Shell.ServiceProvider)(m_privateObject.GetProperty("ServiceProvider")));
                return ret;
            }
        }

        internal global::EnvDTE.DTE DTE
        {
            get
            {
                global::EnvDTE.DTE ret = ((global::EnvDTE.DTE)(m_privateObject.GetProperty("DTE")));
                return ret;
            }
        }

        internal global::EnvDTE.Project DTEProject
        {
            get
            {
                global::EnvDTE.Project ret = ((global::EnvDTE.Project)(m_privateObject.GetProperty("DTEProject")));
                return ret;
            }
        }

        internal global::VSLangProj.ProjectProperties ProjectProperties
        {
            get
            {
                global::VSLangProj.ProjectProperties ret = ((global::VSLangProj.ProjectProperties)(m_privateObject.GetProperty("ProjectProperties")));
                return ret;
            }
        }

        internal bool ProjectReloadedDuringCheckout
        {
            get
            {
                bool ret = ((bool)(m_privateObject.GetProperty("ProjectReloadedDuringCheckout")));
                return ret;
            }
        }

        internal bool IsInProjectCheckoutSection
        {
            get
            {
                bool ret = ((bool)(m_privateObject.GetProperty("IsInProjectCheckoutSection")));
                return ret;
            }
        }

        internal global::Microsoft.VisualStudio.Editors.PropertyPages.PropertyControlData[] ControlData
        {
            get
            {
                global::Microsoft.VisualStudio.Editors.PropertyPages.PropertyControlData[] ret = ((global::Microsoft.VisualStudio.Editors.PropertyPages.PropertyControlData[])(m_privateObject.GetProperty("ControlData")));
                return ret;
            }
        }

        internal int m_delayValidationGroup
        {
            get
            {
                int ret = ((int)(m_privateObject.GetFieldOrProperty("m_delayValidationGroup")));
                return ret;
            }
            set
            {
                m_privateObject.SetFieldOrProperty("m_delayValidationGroup", value);
            }
        }

        internal global::System.Collections.Specialized.ListDictionary m_delayValidationQueue
        {
            get
            {
                global::System.Collections.Specialized.ListDictionary ret = ((global::System.Collections.Specialized.ListDictionary)(m_privateObject.GetFieldOrProperty("m_delayValidationQueue")));
                return ret;
            }
            set
            {
                m_privateObject.SetFieldOrProperty("m_delayValidationQueue", value);
            }
        }

        internal bool CanApplyNow
        {
            get
            {
                bool ret = ((bool)(m_privateObject.GetProperty("CanApplyNow")));
                return ret;
            }
            set
            {
                m_privateObject.SetProperty("CanApplyNow", value);
            }
        }

        internal global::Microsoft.VisualStudio.Shell.Interop.IVsUIShell VsUIShellService
        {
            get
            {
                global::Microsoft.VisualStudio.Shell.Interop.IVsUIShell ret = ((global::Microsoft.VisualStudio.Shell.Interop.IVsUIShell)(m_privateObject.GetProperty("VsUIShellService")));
                return ret;
            }
        }

        internal global::Microsoft.VisualStudio.Shell.Interop.IVsUIShell2 VsUIShell2Service
        {
            get
            {
                global::Microsoft.VisualStudio.Shell.Interop.IVsUIShell2 ret = ((global::Microsoft.VisualStudio.Shell.Interop.IVsUIShell2)(m_privateObject.GetProperty("VsUIShell2Service")));
                return ret;
            }
        }

        internal bool IsUndoEnabled
        {
            get
            {
                bool ret = ((bool)(m_privateObject.GetProperty("IsUndoEnabled")));
                return ret;
            }
        }

        internal string ProjectKind
        {
            get
            {
                string ret = ((string)(m_privateObject.GetProperty("ProjectKind")));
                return ret;
            }
        }

        internal string ProjectLanguage
        {
            get
            {
                string ret = ((string)(m_privateObject.GetProperty("ProjectLanguage")));
                return ret;
            }
        }

        internal global::Microsoft.VisualStudio.ManagedInterfaces.ProjectDesigner.IVsProjectDesignerPageSite m_PropPageUndoSite
        {
            get
            {
                global::Microsoft.VisualStudio.ManagedInterfaces.ProjectDesigner.IVsProjectDesignerPageSite ret = ((global::Microsoft.VisualStudio.ManagedInterfaces.ProjectDesigner.IVsProjectDesignerPageSite)(m_privateObject.GetFieldOrProperty("m_PropPageUndoSite")));
                return ret;
            }
            set
            {
                m_privateObject.SetFieldOrProperty("m_PropPageUndoSite", value);
            }
        }

        internal global::System.Drawing.Font GetDialogFont
        {
            get
            {
                global::System.Drawing.Font ret = ((global::System.Drawing.Font)(m_privateObject.GetProperty("GetDialogFont")));
                return ret;
            }
        }

        internal bool DisableOnBuild
        {
            get
            {
                bool ret = ((bool)(m_privateObject.GetProperty("DisableOnBuild")));
                return ret;
            }
        }

        internal bool DisableOnDebug
        {
            get
            {
                bool ret = ((bool)(m_privateObject.GetProperty("DisableOnDebug")));
                return ret;
            }
        }

        internal static global::Microsoft.VisualStudio.Editors.PropertyPages.PropPageUserControlBase CreatePrivate(global::Microsoft.VisualStudio.Shell.ServiceProvider serviceProvider)
        {
            object[] args = new object[] {
                serviceProvider};
            Microsoft.VisualStudio.TestTools.UnitTesting.PrivateObject priv_obj = new Microsoft.VisualStudio.TestTools.UnitTesting.PrivateObject(typeof(global::Microsoft.VisualStudio.Editors.PropertyPages.PropPageUserControlBase), new System.Type[] {
                    typeof(global::Microsoft.VisualStudio.Shell.ServiceProvider)}, args);
            return ((global::Microsoft.VisualStudio.Editors.PropertyPages.PropPageUserControlBase)(priv_obj.Target));
        }

        internal void Dispose(bool disposing)
        {
            object[] args = new object[] {
                disposing};
            m_privateObject.Invoke("Dispose", new System.Type[] {
                    typeof(bool)}, args);
        }

        internal void InitializeComponent()
        {
            object[] args = new object[0];
            m_privateObject.Invoke("InitializeComponent", new System.Type[0], args);
        }

        internal void SetEnabledState()
        {
            object[] args = new object[0];
            m_privateObject.Invoke("SetEnabledState", new System.Type[0], args);
        }

        internal void AddToRunningTable()
        {
            object[] args = new object[0];
            m_privateObject.Invoke("AddToRunningTable", new System.Type[0], args);
        }

        internal void RemoveFromRunningTable()
        {
            object[] args = new object[0];
            m_privateObject.Invoke("RemoveFromRunningTable", new System.Type[0], args);
        }

        internal static bool GetPropertyFromRunningPages(global::Microsoft.VisualStudio.Editors.PropertyPages.PropPageUserControlBase SourcePage, int dispid, ref object obj)
        {
            object[] args = new object[] {
                SourcePage,
                dispid,
                obj};
            bool ret = ((bool)(m_privateType.InvokeStatic("GetPropertyFromRunningPages", new System.Type[] {
                    typeof(global::Microsoft.VisualStudio.Editors.PropertyPages.PropPageUserControlBase),
                    typeof(int),
                    typeof(object).MakeByRefType()}, args)));
            obj = ((object)(args[2]));
            return ret;
        }

        internal object get_GetServiceFromPropertyPageSite(global::System.Type ServiceType)
        {
            object[] args = new object[] {
                ServiceType};
            object ret = ((object)(m_privateObject.GetProperty("GetServiceFromPropertyPageSite", new System.Type[] {
                    typeof(global::System.Type)}, args)));
            return ret;
        }

        internal object[] RawPropertiesObjects(global::Microsoft.VisualStudio.Editors.PropertyPages.PropertyControlData Data)
        {
            object[] args = new object[] {
                Data};
            object[] ret = ((object[])(m_privateObject.Invoke("RawPropertiesObjects", new System.Type[] {
                    typeof(global::Microsoft.VisualStudio.Editors.PropertyPages.PropertyControlData)}, args)));
            return ret;
        }

        internal object[] ExtendedPropertiesObjects(global::Microsoft.VisualStudio.Editors.PropertyPages.PropertyControlData Data)
        {
            object[] args = new object[] {
                Data};
            object[] ret = ((object[])(m_privateObject.Invoke("ExtendedPropertiesObjects", new System.Type[] {
                    typeof(global::Microsoft.VisualStudio.Editors.PropertyPages.PropertyControlData)}, args)));
            return ret;
        }

        internal void SuspendPropertyChangeListening(int DispId)
        {
            object[] args = new object[] {
                DispId};
            m_privateObject.Invoke("SuspendPropertyChangeListening", new System.Type[] {
                    typeof(int)}, args);
        }

        internal void ResumePropertyChangeListening(int DispId)
        {
            object[] args = new object[] {
                DispId};
            m_privateObject.Invoke("ResumePropertyChangeListening", new System.Type[] {
                    typeof(int)}, args);
        }

        internal bool PropertyOnPageBeingChanged()
        {
            object[] args = new object[0];
            bool ret = ((bool)(m_privateObject.Invoke("PropertyOnPageBeingChanged", new System.Type[0], args)));
            return ret;
        }

        internal bool GetProperty(int dispid, ref object obj)
        {
            object[] args = new object[] {
                dispid,
                obj};
            bool ret = ((bool)(m_privateObject.Invoke("GetProperty", new System.Type[] {
                    typeof(int),
                    typeof(object).MakeByRefType()}, args)));
            obj = ((object)(args[1]));
            return ret;
        }

        internal bool GetCurrentProperty(int dispid, string PropertyName, ref object obj)
        {
            object[] args = new object[] {
                dispid,
                PropertyName,
                obj};
            bool ret = ((bool)(m_privateObject.Invoke("GetCurrentProperty", new System.Type[] {
                    typeof(int),
                    typeof(string),
                    typeof(object).MakeByRefType()}, args)));
            obj = ((object)(args[2]));
            return ret;
        }

        internal void EnableControl(global::System.Windows.Forms.Control control, bool enabled)
        {
            object[] args = new object[] {
                control,
                enabled};
            m_privateObject.Invoke("EnableControl", new System.Type[] {
                    typeof(global::System.Windows.Forms.Control),
                    typeof(bool)}, args);
        }

        internal void EnterProjectCheckoutSection()
        {
            object[] args = new object[0];
            m_privateObject.Invoke("EnterProjectCheckoutSection", new System.Type[0], args);
        }

        internal void LeaveProjectCheckoutSection()
        {
            object[] args = new object[0];
            m_privateObject.Invoke("LeaveProjectCheckoutSection", new System.Type[0], args);
        }

        internal void DelayedDispose()
        {
            object[] args = new object[0];
            m_privateObject.Invoke("DelayedDispose", new System.Type[0], args);
        }

        internal void CheckoutProjectFile(ref bool ProjectReloaded)
        {
            object[] args = new object[] {
                ProjectReloaded};
            m_privateObject.Invoke("CheckoutProjectFile", new System.Type[] {
                    typeof(bool).MakeByRefType()}, args);
            ProjectReloaded = ((bool)(args[0]));
        }

        internal void IPropertyPageInternal_Apply()
        {
            object[] args = new object[0];
            m_privateObject.Invoke("IPropertyPageInternal_Apply", new System.Type[0], args);
        }

        internal string GetF1HelpKeyword()
        {
            object[] args = new object[0];
            string ret = ((string)(m_privateObject.Invoke("GetF1HelpKeyword", new System.Type[0], args)));
            return ret;
        }

        internal void IProperyPageInternal_Help(string HelpDir)
        {
            object[] args = new object[] {
                HelpDir};
            m_privateObject.Invoke("IProperyPageInternal_Help", new System.Type[] {
                    typeof(string)}, args);
        }

        internal bool IsPageDirty()
        {
            object[] args = new object[0];
            bool ret = ((bool)(m_privateObject.Invoke("IsPageDirty", new System.Type[0], args)));
            return ret;
        }

        internal void CleanupCOMReferences()
        {
            object[] args = new object[0];
            m_privateObject.Invoke("CleanupCOMReferences", new System.Type[0], args);
        }

        internal void CheckMultipleProjectsSelected(object[] objects)
        {
            object[] args = new object[] {
                objects};
            m_privateObject.Invoke("CheckMultipleProjectsSelected", new System.Type[] {
                    typeof(object).MakeArrayType()}, args);
        }

        internal global::Microsoft.VisualStudio.Shell.Interop.IVsHierarchy GetProjectHierarchyFromObject(object ThisObj)
        {
            object[] args = new object[] {
                ThisObj};
            global::Microsoft.VisualStudio.Shell.Interop.IVsHierarchy ret = ((global::Microsoft.VisualStudio.Shell.Interop.IVsHierarchy)(m_privateObject.Invoke("GetProjectHierarchyFromObject", new System.Type[] {
                    typeof(object)}, args)));
            return ret;
        }

        internal void IPropertyPageInternal_SetObjects(object[] objects)
        {
            object[] args = new object[] {
                objects};
            m_privateObject.Invoke("IPropertyPageInternal_SetObjects", new System.Type[] {
                    typeof(object).MakeArrayType()}, args);
        }

        internal void TraceTypeDescriptorCollection(string DebugMessage, global::System.ComponentModel.PropertyDescriptorCollection Properties)
        {
            object[] args = new object[] {
                DebugMessage,
                Properties};
            m_privateObject.Invoke("TraceTypeDescriptorCollection", new System.Type[] {
                    typeof(string),
                    typeof(global::System.ComponentModel.PropertyDescriptorCollection)}, args);
        }

        internal void SetPageSite(global::Microsoft.VisualStudio.Editors.UnitTests.Microsoft_VisualStudio_Editors_PropertyPages_IPropertyPageSiteInternalAccessor site)
        {
            object site_val_target = null;
            if ((site != null))
            {
                site_val_target = site.Target;
            }
            object[] args = new object[] {
                site_val_target};
            Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType target = new Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType(EDITORS_ASSEMBLY, "Microsoft.VisualStudio.Editors.PropertyPages.IPropertyPageSiteInternal");
            m_privateObject.Invoke("SetPageSite", new System.Type[] {
                    target.ReferencedType}, args);
        }

        internal void OnSetSite(global::Microsoft.VisualStudio.OLE.Interop.IPropertyPageSite site)
        {
            object[] args = new object[] {
                site};
            m_privateObject.Invoke("OnSetSite", new System.Type[] {
                    typeof(global::Microsoft.VisualStudio.OLE.Interop.IPropertyPageSite)}, args);
        }

        internal void EditProperty(int dispid)
        {
            object[] args = new object[] {
                dispid};
            m_privateObject.Invoke("EditProperty", new System.Type[] {
                    typeof(int)}, args);
        }

        internal void AddChangeHandlers()
        {
            object[] args = new object[0];
            m_privateObject.Invoke("AddChangeHandlers", new System.Type[0], args);
        }

        internal global::System.Windows.Forms.Control GetPropertyControl(int PropertyId)
        {
            object[] args = new object[] {
                PropertyId};
            global::System.Windows.Forms.Control ret = ((global::System.Windows.Forms.Control)(m_privateObject.Invoke("GetPropertyControl", new System.Type[] {
                    typeof(int)}, args)));
            return ret;
        }

        internal global::Microsoft.VisualStudio.Editors.PropertyPages.PropertyControlData GetPropertyControlData(int PropertyId)
        {
            object[] args = new object[] {
                PropertyId};
            global::Microsoft.VisualStudio.Editors.PropertyPages.PropertyControlData ret = ((global::Microsoft.VisualStudio.Editors.PropertyPages.PropertyControlData)(m_privateObject.Invoke("GetPropertyControlData", new System.Type[] {
                    typeof(int)}, args)));
            return ret;
        }

        internal global::Microsoft.VisualStudio.Editors.PropertyPages.PropertyControlData GetPropertyControlData(string PropertyName)
        {
            object[] args = new object[] {
                PropertyName};
            global::Microsoft.VisualStudio.Editors.PropertyPages.PropertyControlData ret = ((global::Microsoft.VisualStudio.Editors.PropertyPages.PropertyControlData)(m_privateObject.Invoke("GetPropertyControlData", new System.Type[] {
                    typeof(string)}, args)));
            return ret;
        }

        internal int FindControlGroup(global::System.Windows.Forms.Control dataControl)
        {
            object[] args = new object[] {
                dataControl};
            int ret = ((int)(m_privateObject.Invoke("FindControlGroup", new System.Type[] {
                    typeof(global::System.Windows.Forms.Control)}, args)));
            return ret;
        }

        internal bool IsFocusInControlGroup(int groupID)
        {
            object[] args = new object[] {
                groupID};
            bool ret = ((bool)(m_privateObject.Invoke("IsFocusInControlGroup", new System.Type[] {
                    typeof(int)}, args)));
            return ret;
        }

        internal void SkipValidating(global::System.Windows.Forms.Control dataControl)
        {
            object[] args = new object[] {
                dataControl};
            m_privateObject.Invoke("SkipValidating", new System.Type[] {
                    typeof(global::System.Windows.Forms.Control)}, args);
        }

        internal void DelayValidate(global::System.Windows.Forms.Control dataControl)
        {
            object[] args = new object[] {
                dataControl};
            m_privateObject.Invoke("DelayValidate", new System.Type[] {
                    typeof(global::System.Windows.Forms.Control)}, args);
        }

        internal void DelayValidate(int controlGroup, global::System.Collections.ArrayList items)
        {
            object[] args = new object[] {
                controlGroup,
                items};
            m_privateObject.Invoke("DelayValidate", new System.Type[] {
                    typeof(int),
                    typeof(global::System.Collections.ArrayList)}, args);
        }

        internal bool ProcessDelayValidationQueue(bool canThrow)
        {
            object[] args = new object[] {
                canThrow};
            bool ret = ((bool)(m_privateObject.Invoke("ProcessDelayValidationQueue", new System.Type[] {
                    typeof(bool)}, args)));
            return ret;
        }

        internal bool ProcessDelayValidationQueue(global::System.Collections.Specialized.ListDictionary items, bool canThrow)
        {
            object[] args = new object[] {
                items,
                canThrow};
            bool ret = ((bool)(m_privateObject.Invoke("ProcessDelayValidationQueue", new System.Type[] {
                    typeof(global::System.Collections.Specialized.ListDictionary),
                    typeof(bool)}, args)));
            return ret;
        }

        internal void HookDelayValidationEvents()
        {
            object[] args = new object[0];
            m_privateObject.Invoke("HookDelayValidationEvents", new System.Type[0], args);
        }

        internal void UnhookDelayValidationEvents()
        {
            object[] args = new object[0];
            m_privateObject.Invoke("UnhookDelayValidationEvents", new System.Type[0], args);
        }

        internal void OnLeavingControlGroup(object sender, global::System.EventArgs e)
        {
            object[] args = new object[] {
                sender,
                e};
            m_privateObject.Invoke("OnLeavingControlGroup", new System.Type[] {
                    typeof(object),
                    typeof(global::System.EventArgs)}, args);
        }

        internal void PostValidation()
        {
            object[] args = new object[0];
            m_privateObject.Invoke("PostValidation", new System.Type[0], args);
        }

        internal void PreApplyPageChanges()
        {
            object[] args = new object[0];
            m_privateObject.Invoke("PreApplyPageChanges", new System.Type[0], args);
        }

        internal void ValidatePageChanges(bool allowDelayValidation)
        {
            object[] args = new object[] {
                allowDelayValidation};
            m_privateObject.Invoke("ValidatePageChanges", new System.Type[] {
                    typeof(bool)}, args);
        }

        internal global::Microsoft.VisualStudio.Editors.PropertyPages.ValidationResult ValidateProperty(global::Microsoft.VisualStudio.Editors.PropertyPages.PropertyControlData controlData, ref string message, ref global::System.Windows.Forms.Control returnControl)
        {
            object[] args = new object[] {
                controlData,
                message,
                returnControl};
            global::Microsoft.VisualStudio.Editors.PropertyPages.ValidationResult ret = ((global::Microsoft.VisualStudio.Editors.PropertyPages.ValidationResult)(m_privateObject.Invoke("ValidateProperty", new System.Type[] {
                    typeof(global::Microsoft.VisualStudio.Editors.PropertyPages.PropertyControlData),
                    typeof(string).MakeByRefType(),
                    typeof(global::System.Windows.Forms.Control).MakeByRefType()}, args)));
            message = ((string)(args[1]));
            returnControl = ((global::System.Windows.Forms.Control)(args[2]));
            return ret;
        }

        internal void CheckOutFilesForApply()
        {
            object[] args = new object[0];
            m_privateObject.Invoke("CheckOutFilesForApply", new System.Type[0], args);
        }

        internal void ApplyPageChanges()
        {
            object[] args = new object[0];
            m_privateObject.Invoke("ApplyPageChanges", new System.Type[0], args);
        }

        internal string GetTransactionDescription()
        {
            object[] args = new object[0];
            string ret = ((string)(m_privateObject.Invoke("GetTransactionDescription", new System.Type[0], args)));
            return ret;
        }

        internal global::System.ComponentModel.Design.DesignerTransaction GetTransaction()
        {
            object[] args = new object[0];
            global::System.ComponentModel.Design.DesignerTransaction ret = ((global::System.ComponentModel.Design.DesignerTransaction)(m_privateObject.Invoke("GetTransaction", new System.Type[0], args)));
            return ret;
        }

        internal void CommitTransaction(global::System.ComponentModel.Design.DesignerTransaction Transaction)
        {
            object[] args = new object[] {
                Transaction};
            m_privateObject.Invoke("CommitTransaction", new System.Type[] {
                    typeof(global::System.ComponentModel.Design.DesignerTransaction)}, args);
        }

        internal void OnPropertyChanging(string PropertyName, global::System.ComponentModel.PropertyDescriptor PropDesc)
        {
            object[] args = new object[] {
                PropertyName,
                PropDesc};
            m_privateObject.Invoke("OnPropertyChanging", new System.Type[] {
                    typeof(string),
                    typeof(global::System.ComponentModel.PropertyDescriptor)}, args);
        }

        internal void OnPropertyChanged(string PropertyName, global::System.ComponentModel.PropertyDescriptor PropDesc, object OldValue, object NewValue)
        {
            object[] args = new object[] {
                PropertyName,
                PropDesc,
                OldValue,
                NewValue};
            m_privateObject.Invoke("OnPropertyChanged", new System.Type[] {
                    typeof(string),
                    typeof(global::System.ComponentModel.PropertyDescriptor),
                    typeof(object),
                    typeof(object)}, args);
        }

        internal void OnApplyComplete(bool ApplySuccessful)
        {
            object[] args = new object[] {
                ApplySuccessful};
            m_privateObject.Invoke("OnApplyComplete", new System.Type[] {
                    typeof(bool)}, args);
        }

        internal void PostApplyPageChanges()
        {
            object[] args = new object[0];
            m_privateObject.Invoke("PostApplyPageChanges", new System.Type[0], args);
        }

        internal void PreInitPage()
        {
            object[] args = new object[0];
            m_privateObject.Invoke("PreInitPage", new System.Type[0], args);
        }

        internal void InitPage()
        {
            object[] args = new object[0];
            m_privateObject.Invoke("InitPage", new System.Type[0], args);
        }

        internal void PostInitPage()
        {
            object[] args = new object[0];
            m_privateObject.Invoke("PostInitPage", new System.Type[0], args);
        }

        internal global::System.ComponentModel.PropertyDescriptor GetPropertyDescriptor(string PropertyName)
        {
            object[] args = new object[] {
                PropertyName};
            global::System.ComponentModel.PropertyDescriptor ret = ((global::System.ComponentModel.PropertyDescriptor)(m_privateObject.Invoke("GetPropertyDescriptor", new System.Type[] {
                    typeof(string)}, args)));
            return ret;
        }

        internal global::System.ComponentModel.PropertyDescriptor GetCommonPropertyDescriptor(string PropertyName)
        {
            object[] args = new object[] {
                PropertyName};
            global::System.ComponentModel.PropertyDescriptor ret = ((global::System.ComponentModel.PropertyDescriptor)(m_privateObject.Invoke("GetCommonPropertyDescriptor", new System.Type[] {
                    typeof(string)}, args)));
            return ret;
        }

        internal object GetCommonPropertyValueNative(global::System.ComponentModel.PropertyDescriptor prop)
        {
            object[] args = new object[] {
                prop};
            object ret = ((object)(m_privateObject.Invoke("GetCommonPropertyValueNative", new System.Type[] {
                    typeof(global::System.ComponentModel.PropertyDescriptor)}, args)));
            return ret;
        }

        internal object GetCommonPropertyValueNative(string PropertyName)
        {
            object[] args = new object[] {
                PropertyName};
            object ret = ((object)(m_privateObject.Invoke("GetCommonPropertyValueNative", new System.Type[] {
                    typeof(string)}, args)));
            return ret;
        }

        internal object GetCommonPropertyValue(global::System.ComponentModel.PropertyDescriptor prop)
        {
            object[] args = new object[] {
                prop};
            object ret = ((object)(m_privateObject.Invoke("GetCommonPropertyValue", new System.Type[] {
                    typeof(global::System.ComponentModel.PropertyDescriptor)}, args)));
            return ret;
        }

        internal object GetCommonPropertyValue(string PropertyName)
        {
            object[] args = new object[] {
                PropertyName};
            object ret = ((object)(m_privateObject.Invoke("GetCommonPropertyValue", new System.Type[] {
                    typeof(string)}, args)));
            return ret;
        }

        internal void SetCommonPropertyValue(global::System.ComponentModel.PropertyDescriptor prop, object Value)
        {
            object[] args = new object[] {
                prop,
                Value};
            m_privateObject.Invoke("SetCommonPropertyValue", new System.Type[] {
                    typeof(global::System.ComponentModel.PropertyDescriptor),
                    typeof(object)}, args);
        }

        internal void SetCommonPropertyValue(string PropertyName, object value)
        {
            object[] args = new object[] {
                PropertyName,
                value};
            m_privateObject.Invoke("SetCommonPropertyValue", new System.Type[] {
                    typeof(string),
                    typeof(object)}, args);
        }

        internal void SetCommonPropertyValueNative(global::System.ComponentModel.PropertyDescriptor prop, object Value)
        {
            object[] args = new object[] {
                prop,
                Value};
            m_privateObject.Invoke("SetCommonPropertyValueNative", new System.Type[] {
                    typeof(global::System.ComponentModel.PropertyDescriptor),
                    typeof(object)}, args);
        }

        internal void SetCommonPropertyValueNative(string PropertyName, object Value)
        {
            object[] args = new object[] {
                PropertyName,
                Value};
            m_privateObject.Invoke("SetCommonPropertyValueNative", new System.Type[] {
                    typeof(string),
                    typeof(object)}, args);
        }

        internal object GetControlValue(string name)
        {
            object[] args = new object[] {
                name};
            object ret = ((object)(m_privateObject.Invoke("GetControlValue", new System.Type[] {
                    typeof(string)}, args)));
            return ret;
        }

        internal object GetControlValueNative(string name)
        {
            object[] args = new object[] {
                name};
            object ret = ((object)(m_privateObject.Invoke("GetControlValueNative", new System.Type[] {
                    typeof(string)}, args)));
            return ret;
        }

        internal object TryGetNonCommonPropertyValue(global::System.ComponentModel.PropertyDescriptor Descriptor)
        {
            object[] args = new object[] {
                Descriptor};
            object ret = ((object)(m_privateObject.Invoke("TryGetNonCommonPropertyValue", new System.Type[] {
                    typeof(global::System.ComponentModel.PropertyDescriptor)}, args)));
            return ret;
        }

        internal void ApplyChanges(object sender)
        {
            object[] args = new object[] {
                sender};
            m_privateObject.Invoke("ApplyChanges", new System.Type[] {
                    typeof(object)}, args);
        }

        internal void SetDirty(bool ReadyToApply)
        {
            object[] args = new object[] {
                ReadyToApply};
            m_privateObject.Invoke("SetDirty", new System.Type[] {
                    typeof(bool)}, args);
        }

        internal void SetDirty(object sender, bool ReadyToApply)
        {
            object[] args = new object[] {
                sender,
                ReadyToApply};
            m_privateObject.Invoke("SetDirty", new System.Type[] {
                    typeof(object),
                    typeof(bool)}, args);
        }

        internal void SetDirty(object sender)
        {
            object[] args = new object[] {
                sender};
            m_privateObject.Invoke("SetDirty", new System.Type[] {
                    typeof(object)}, args);
        }

        internal void SetDirty(int dispid)
        {
            object[] args = new object[] {
                dispid};
            m_privateObject.Invoke("SetDirty", new System.Type[] {
                    typeof(int)}, args);
        }

        internal void SetDirty(int dispid, bool ReadyToApply)
        {
            object[] args = new object[] {
                dispid,
                ReadyToApply};
            m_privateObject.Invoke("SetDirty", new System.Type[] {
                    typeof(int),
                    typeof(bool)}, args);
        }

        internal bool GetDirty(object sender)
        {
            object[] args = new object[] {
                sender};
            bool ret = ((bool)(m_privateObject.Invoke("GetDirty", new System.Type[] {
                    typeof(object)}, args)));
            return ret;
        }

        internal void ClearIsDirty()
        {
            object[] args = new object[0];
            m_privateObject.Invoke("ClearIsDirty", new System.Type[0], args);
        }

        internal bool IsAnyPropertyDirty()
        {
            object[] args = new object[0];
            bool ret = ((bool)(m_privateObject.Invoke("IsAnyPropertyDirty", new System.Type[0], args)));
            return ret;
        }

        internal void EnableAllControls(bool _enabled)
        {
            object[] args = new object[] {
                _enabled};
            m_privateObject.Invoke("EnableAllControls", new System.Type[] {
                    typeof(bool)}, args);
        }

        internal void InitializeAllProperties()
        {
            object[] args = new object[0];
            m_privateObject.Invoke("InitializeAllProperties", new System.Type[0], args);
        }

        internal global::System.ComponentModel.PropertyDescriptor GetUserDefinedPropertyDescriptor(string PropertyName)
        {
            object[] args = new object[] {
                PropertyName};
            global::System.ComponentModel.PropertyDescriptor ret = ((global::System.ComponentModel.PropertyDescriptor)(m_privateObject.Invoke("GetUserDefinedPropertyDescriptor", new System.Type[] {
                    typeof(string)}, args)));
            return ret;
        }

        internal bool ReadUserDefinedProperty(string PropertyName, ref object Value)
        {
            object[] args = new object[] {
                PropertyName,
                Value};
            bool ret = ((bool)(m_privateObject.Invoke("ReadUserDefinedProperty", new System.Type[] {
                    typeof(string),
                    typeof(object).MakeByRefType()}, args)));
            Value = ((object)(args[1]));
            return ret;
        }

        internal bool WriteUserDefinedProperty(string PropertyName, object Value)
        {
            object[] args = new object[] {
                PropertyName,
                Value};
            bool ret = ((bool)(m_privateObject.Invoke("WriteUserDefinedProperty", new System.Type[] {
                    typeof(string),
                    typeof(object)}, args)));
            return ret;
        }

        internal void ShowErrorMessage(global::System.Exception ex)
        {
            object[] args = new object[] {
                ex};
            m_privateObject.Invoke("ShowErrorMessage", new System.Type[] {
                    typeof(global::System.Exception)}, args);
        }

        internal void ShowErrorMessage(global::System.Exception ex, string HelpLink)
        {
            object[] args = new object[] {
                ex,
                HelpLink};
            m_privateObject.Invoke("ShowErrorMessage", new System.Type[] {
                    typeof(global::System.Exception),
                    typeof(string)}, args);
        }

        internal void ShowErrorMessage(string errorMessage)
        {
            object[] args = new object[] {
                errorMessage};
            m_privateObject.Invoke("ShowErrorMessage", new System.Type[] {
                    typeof(string)}, args);
        }

        internal void ShowErrorMessage(string errorMessage, global::System.Exception ex)
        {
            object[] args = new object[] {
                errorMessage,
                ex};
            m_privateObject.Invoke("ShowErrorMessage", new System.Type[] {
                    typeof(string),
                    typeof(global::System.Exception)}, args);
        }

        internal void ShowErrorMessage(string errorMessage, string HelpLink)
        {
            object[] args = new object[] {
                errorMessage,
                HelpLink};
            m_privateObject.Invoke("ShowErrorMessage", new System.Type[] {
                    typeof(string),
                    typeof(string)}, args);
        }

        internal global::EnvDTE.ProjectItem AddFileToProject(string FileName)
        {
            object[] args = new object[] {
                FileName};
            global::EnvDTE.ProjectItem ret = ((global::EnvDTE.ProjectItem)(m_privateObject.Invoke("AddFileToProject", new System.Type[] {
                    typeof(string)}, args)));
            return ret;
        }

        internal global::EnvDTE.ProjectItem AddFileToProject(string FileName, bool CopyFile)
        {
            object[] args = new object[] {
                FileName,
                CopyFile};
            global::EnvDTE.ProjectItem ret = ((global::EnvDTE.ProjectItem)(m_privateObject.Invoke("AddFileToProject", new System.Type[] {
                    typeof(string),
                    typeof(bool)}, args)));
            return ret;
        }

        internal global::EnvDTE.ProjectItem AddFileToProject(global::EnvDTE.ProjectItems ProjectItems, string FileName, bool CopyFile)
        {
            object[] args = new object[] {
                ProjectItems,
                FileName,
                CopyFile};
            global::EnvDTE.ProjectItem ret = ((global::EnvDTE.ProjectItem)(m_privateObject.Invoke("AddFileToProject", new System.Type[] {
                    typeof(global::EnvDTE.ProjectItems),
                    typeof(string),
                    typeof(bool)}, args)));
            return ret;
        }

        internal global::EnvDTE.ProjectItem AddFileToProject(global::EnvDTE.ProjectItems ProjectItems, string FileName, bool CopyFile, global::VSLangProj.prjBuildAction BuildAction)
        {
            object[] args = new object[] {
                ProjectItems,
                FileName,
                CopyFile,
                BuildAction};
            global::EnvDTE.ProjectItem ret = ((global::EnvDTE.ProjectItem)(m_privateObject.Invoke("AddFileToProject", new System.Type[] {
                    typeof(global::EnvDTE.ProjectItems),
                    typeof(string),
                    typeof(bool),
                    typeof(global::VSLangProj.prjBuildAction)}, args)));
            return ret;
        }

        internal global::Microsoft.VisualStudio.Editors.UnitTests.Microsoft_VisualStudio_Editors_PropertyPages_PropPageHostDialogAccessor GetPropPageHostDialog(global::Microsoft.VisualStudio.Editors.PropertyPages.PropPageUserControlBase ChildPage)
        {
            object[] args = new object[] {
                ChildPage};
            object _ret_val = m_privateObject.Invoke("GetPropPageHostDialog", new System.Type[] {
                    typeof(global::Microsoft.VisualStudio.Editors.PropertyPages.PropPageUserControlBase)}, args);
            global::Microsoft.VisualStudio.Editors.UnitTests.Microsoft_VisualStudio_Editors_PropertyPages_PropPageHostDialogAccessor _ret = null;
            if ((_ret_val != null))
            {
                _ret = new global::Microsoft.VisualStudio.Editors.UnitTests.Microsoft_VisualStudio_Editors_PropertyPages_PropPageHostDialogAccessor(_ret_val);
            }
            global::Microsoft.VisualStudio.Editors.UnitTests.Microsoft_VisualStudio_Editors_PropertyPages_PropPageHostDialogAccessor ret = _ret;
            return ret;
        }

        internal global::System.Windows.Forms.DialogResult ShowChildPage(string Title, global::System.Type PageType)
        {
            object[] args = new object[] {
                Title,
                PageType};
            global::System.Windows.Forms.DialogResult ret = ((global::System.Windows.Forms.DialogResult)(m_privateObject.Invoke("ShowChildPage", new System.Type[] {
                    typeof(string),
                    typeof(global::System.Type)}, args)));
            return ret;
        }

        internal global::System.Windows.Forms.DialogResult ShowChildPage(string Title, global::System.Type PageType, string F1Keyword)
        {
            object[] args = new object[] {
                Title,
                PageType,
                F1Keyword};
            global::System.Windows.Forms.DialogResult ret = ((global::System.Windows.Forms.DialogResult)(m_privateObject.Invoke("ShowChildPage", new System.Type[] {
                    typeof(string),
                    typeof(global::System.Type),
                    typeof(string)}, args)));
            return ret;
        }

        internal bool GetDirectoryViaBrowseRelativeToProject(string InitialDirectory, string DialogTitle, ref string NewValue)
        {
            object[] args = new object[] {
                InitialDirectory,
                DialogTitle,
                NewValue};
            bool ret = ((bool)(m_privateObject.Invoke("GetDirectoryViaBrowseRelativeToProject", new System.Type[] {
                    typeof(string),
                    typeof(string),
                    typeof(string).MakeByRefType()}, args)));
            NewValue = ((string)(args[2]));
            return ret;
        }

        internal bool GetDirectoryViaBrowseRelative(string RelativeInitialDirectory, string BasePath, string DialogTitle, ref string NewRelativePath)
        {
            object[] args = new object[] {
                RelativeInitialDirectory,
                BasePath,
                DialogTitle,
                NewRelativePath};
            bool ret = ((bool)(m_privateObject.Invoke("GetDirectoryViaBrowseRelative", new System.Type[] {
                    typeof(string),
                    typeof(string),
                    typeof(string),
                    typeof(string).MakeByRefType()}, args)));
            NewRelativePath = ((string)(args[3]));
            return ret;
        }

        internal bool GetDirectoryViaBrowse(string InitialDirectory, string DialogTitle, ref string NewValue)
        {
            object[] args = new object[] {
                InitialDirectory,
                DialogTitle,
                NewValue};
            bool ret = ((bool)(m_privateObject.Invoke("GetDirectoryViaBrowse", new System.Type[] {
                    typeof(string),
                    typeof(string),
                    typeof(string).MakeByRefType()}, args)));
            NewValue = ((string)(args[2]));
            return ret;
        }

        internal bool GetFileViaBrowse(string InitialDirectory, ref string NewValue, string Filter)
        {
            object[] args = new object[] {
                InitialDirectory,
                NewValue,
                Filter};
            bool ret = ((bool)(m_privateObject.Invoke("GetFileViaBrowse", new System.Type[] {
                    typeof(string),
                    typeof(string).MakeByRefType(),
                    typeof(string)}, args)));
            NewValue = ((string)(args[1]));
            return ret;
        }

        internal string GetProjectPath()
        {
            object[] args = new object[0];
            string ret = ((string)(m_privateObject.Invoke("GetProjectPath", new System.Type[0], args)));
            return ret;
        }

        internal string GetProjectRelativeDirectoryPath(string DirectoryPath)
        {
            object[] args = new object[] {
                DirectoryPath};
            string ret = ((string)(m_privateObject.Invoke("GetProjectRelativeDirectoryPath", new System.Type[] {
                    typeof(string)}, args)));
            return ret;
        }

        internal string GetProjectRelativeFilePath(string FilePath)
        {
            object[] args = new object[] {
                FilePath};
            string ret = ((string)(m_privateObject.Invoke("GetProjectRelativeFilePath", new System.Type[] {
                    typeof(string)}, args)));
            return ret;
        }

        internal string GetRelativeDirectoryPath(string BasePath, string DirectoryPath)
        {
            object[] args = new object[] {
                BasePath,
                DirectoryPath};
            string ret = ((string)(m_privateObject.Invoke("GetRelativeDirectoryPath", new System.Type[] {
                    typeof(string),
                    typeof(string)}, args)));
            return ret;
        }

        internal string GetRelativeFilePath(string BasePath, string FilePath)
        {
            object[] args = new object[] {
                BasePath,
                FilePath};
            string ret = ((string)(m_privateObject.Invoke("GetRelativeFilePath", new System.Type[] {
                    typeof(string),
                    typeof(string)}, args)));
            return ret;
        }

        internal bool IsVBProject()
        {
            object[] args = new object[0];
            bool ret = ((bool)(m_privateObject.Invoke("IsVBProject", new System.Type[0], args)));
            return ret;
        }

        internal bool IsCSProject()
        {
            object[] args = new object[0];
            bool ret = ((bool)(m_privateObject.Invoke("IsCSProject", new System.Type[0], args)));
            return ret;
        }

        internal bool IsJSProject()
        {
            object[] args = new object[0];
            bool ret = ((bool)(m_privateObject.Invoke("IsJSProject", new System.Type[0], args)));
            return ret;
        }

        internal global::Microsoft.VisualStudio.Editors.PropertyPages.PropertyControlData GetNestedPropertyControlData(string EncodedPropertyName)
        {
            object[] args = new object[] {
                EncodedPropertyName};
            global::Microsoft.VisualStudio.Editors.PropertyPages.PropertyControlData ret = ((global::Microsoft.VisualStudio.Editors.PropertyPages.PropertyControlData)(m_privateObject.Invoke("GetNestedPropertyControlData", new System.Type[] {
                    typeof(string)}, args)));
            return ret;
        }

        internal object IVsProjectDesignerPage_GetPropertyValue(string PropertyName)
        {
            object[] args = new object[] {
                PropertyName};
            object ret = ((object)(m_privateObject.Invoke("IVsProjectDesignerPage_GetPropertyValue", new System.Type[] {
                    typeof(string)}, args)));
            return ret;
        }

        internal void ConvertToEnum(global::Microsoft.VisualStudio.Editors.PropertyPages.PropertyControlData Prop, ref object Value)
        {
            object[] args = new object[] {
                Prop,
                Value};
            m_privateObject.Invoke("ConvertToEnum", new System.Type[] {
                    typeof(global::Microsoft.VisualStudio.Editors.PropertyPages.PropertyControlData),
                    typeof(object).MakeByRefType()}, args);
            Value = ((object)(args[1]));
        }

        internal void IVsProjectDesignerPage_SetPropertyValue(string PropertyName, object Value)
        {
            object[] args = new object[] {
                PropertyName,
                Value};
            m_privateObject.Invoke("IVsProjectDesignerPage_SetPropertyValue", new System.Type[] {
                    typeof(string),
                    typeof(object)}, args);
        }

        internal bool IVsProjectDesignerPage_SupportsMultipleValueUndo(string PropertyName)
        {
            object[] args = new object[] {
                PropertyName};
            bool ret = ((bool)(m_privateObject.Invoke("IVsProjectDesignerPage_SupportsMultipleValueUndo", new System.Type[] {
                    typeof(string)}, args)));
            return ret;
        }

        internal bool SupportsMultipleValueUndo(global::Microsoft.VisualStudio.Editors.PropertyPages.PropertyControlData Data)
        {
            object[] args = new object[] {
                Data};
            bool ret = ((bool)(m_privateObject.Invoke("SupportsMultipleValueUndo", new System.Type[] {
                    typeof(global::Microsoft.VisualStudio.Editors.PropertyPages.PropertyControlData)}, args)));
            return ret;
        }

        internal void IVsProjectDesignerPage_SetPropertyValueMultipleValues(string PropertyName, object[] Objects, object[] Values)
        {
            object[] args = new object[] {
                PropertyName,
                Objects,
                Values};
            m_privateObject.Invoke("IVsProjectDesignerPage_SetPropertyValueMultipleValues", new System.Type[] {
                    typeof(string),
                    typeof(object).MakeArrayType(),
                    typeof(object).MakeArrayType()}, args);
        }

        internal void IVsProjectDesignerPage_SetSite(global::Microsoft.VisualStudio.ManagedInterfaces.ProjectDesigner.IVsProjectDesignerPageSite Site)
        {
            object[] args = new object[] {
                Site};
            m_privateObject.Invoke("IVsProjectDesignerPage_SetSite", new System.Type[] {
                    typeof(global::Microsoft.VisualStudio.ManagedInterfaces.ProjectDesigner.IVsProjectDesignerPageSite)}, args);
        }

        internal bool FinishPendingValidations()
        {
            object[] args = new object[0];
            bool ret = ((bool)(m_privateObject.Invoke("FinishPendingValidations", new System.Type[0], args)));
            return ret;
        }

        internal void OnActivated(bool activated)
        {
            object[] args = new object[] {
                activated};
            m_privateObject.Invoke("OnActivated", new System.Type[] {
                    typeof(bool)}, args);
        }

        internal void OnPageActivated(bool activated)
        {
            object[] args = new object[] {
                activated};
            m_privateObject.Invoke("OnPageActivated", new System.Type[] {
                    typeof(bool)}, args);
        }

        internal int OnModeChange(global::Microsoft.VisualStudio.Shell.Interop.DBGMODE dbgmodeNew)
        {
            object[] args = new object[] {
                dbgmodeNew};
            int ret = ((int)(m_privateObject.Invoke("OnModeChange", new System.Type[] {
                    typeof(global::Microsoft.VisualStudio.Shell.Interop.DBGMODE)}, args)));
            return ret;
        }

        internal void ScaleWindowToCurrentFont()
        {
            object[] args = new object[0];
            m_privateObject.Invoke("ScaleWindowToCurrentFont", new System.Type[0], args);
        }

        internal int OnBroadcastMessage(uint msg, global::System.IntPtr wParam, global::System.IntPtr lParam)
        {
            object[] args = new object[] {
                msg,
                wParam,
                lParam};
            int ret = ((int)(m_privateObject.Invoke("OnBroadcastMessage", new System.Type[] {
                    typeof(uint),
                    typeof(global::System.IntPtr),
                    typeof(global::System.IntPtr)}, args)));
            return ret;
        }

        internal void SetDialogFont(bool ScaleDialog)
        {
            object[] args = new object[] {
                ScaleDialog};
            m_privateObject.Invoke("SetDialogFont", new System.Type[] {
                    typeof(bool)}, args);
        }

        internal static global::System.Drawing.SizeF GetFontScaleSize(global::System.Drawing.Font font)
        {
            object[] args = new object[] {
                font};
            global::System.Drawing.SizeF ret = ((global::System.Drawing.SizeF)(m_privateType.InvokeStatic("GetFontScaleSize", new System.Type[] {
                    typeof(global::System.Drawing.Font)}, args)));
            return ret;
        }

        internal global::System.Drawing.Size ScaleSize(global::System.Drawing.Size startSize, float x, float y)
        {
            object[] args = new object[] {
                startSize,
                x,
                y};
            global::System.Drawing.Size ret = ((global::System.Drawing.Size)(m_privateObject.Invoke("ScaleSize", new System.Type[] {
                    typeof(global::System.Drawing.Size),
                    typeof(float),
                    typeof(float)}, args)));
            return ret;
        }

        internal void RefreshPropertyStandardValues()
        {
            object[] args = new object[0];
            m_privateObject.Invoke("RefreshPropertyStandardValues", new System.Type[0], args);
        }

        internal bool ProcessDialogKey(global::System.Windows.Forms.Keys keyData)
        {
            object[] args = new object[] {
                keyData};
            bool ret = ((bool)(m_privateObject.Invoke("ProcessDialogKey", new System.Type[] {
                    typeof(global::System.Windows.Forms.Keys)}, args)));
            return ret;
        }

        internal void WndProc(ref global::System.Windows.Forms.Message m)
        {
            object[] args = new object[] {
                m};
            m_privateObject.Invoke("WndProc", new System.Type[] {
                    typeof(global::System.Windows.Forms.Message).MakeByRefType()}, args);
            m = ((global::System.Windows.Forms.Message)(args[0]));
        }

        internal string GetHelpContextF1Keyword()
        {
            object[] args = new object[0];
            string ret = ((string)(m_privateObject.Invoke("GetHelpContextF1Keyword", new System.Type[0], args)));
            return ret;
        }

        internal bool DisableWhenDebugMode(global::Microsoft.VisualStudio.Shell.Interop.DBGMODE mode)
        {
            object[] args = new object[] {
                mode};
            bool ret = ((bool)(m_privateObject.Invoke("DisableWhenDebugMode", new System.Type[] {
                    typeof(global::Microsoft.VisualStudio.Shell.Interop.DBGMODE)}, args)));
            return ret;
        }

        internal void ConnectDebuggerEvents()
        {
            object[] args = new object[0];
            m_privateObject.Invoke("ConnectDebuggerEvents", new System.Type[0], args);
        }

        internal void DisconnectDebuggerEvents()
        {
            object[] args = new object[0];
            m_privateObject.Invoke("DisconnectDebuggerEvents", new System.Type[0], args);
        }

        internal void ConnectBroadcastMessages()
        {
            object[] args = new object[0];
            m_privateObject.Invoke("ConnectBroadcastMessages", new System.Type[0], args);
        }

        internal void DisconnectBroadcastMessages()
        {
            object[] args = new object[0];
            m_privateObject.Invoke("DisconnectBroadcastMessages", new System.Type[0], args);
        }

        internal void UpdateDebuggerStatus(global::Microsoft.VisualStudio.Shell.Interop.DBGMODE mode)
        {
            object[] args = new object[] {
                mode};
            m_privateObject.Invoke("UpdateDebuggerStatus", new System.Type[] {
                    typeof(global::Microsoft.VisualStudio.Shell.Interop.DBGMODE)}, args);
        }

        internal void BuildBegin(global::EnvDTE.vsBuildScope scope, global::EnvDTE.vsBuildAction action)
        {
            object[] args = new object[] {
                scope,
                action};
            m_privateObject.Invoke("BuildBegin", new System.Type[] {
                    typeof(global::EnvDTE.vsBuildScope),
                    typeof(global::EnvDTE.vsBuildAction)}, args);
        }

        internal void BuildDone(global::EnvDTE.vsBuildScope scope, global::EnvDTE.vsBuildAction action)
        {
            object[] args = new object[] {
                scope,
                action};
            m_privateObject.Invoke("BuildDone", new System.Type[] {
                    typeof(global::EnvDTE.vsBuildScope),
                    typeof(global::EnvDTE.vsBuildAction)}, args);
        }

        internal void ConnectBuildEvents()
        {
            object[] args = new object[0];
            m_privateObject.Invoke("ConnectBuildEvents", new System.Type[0], args);
        }

        internal void DisconnectBuildEvents()
        {
            object[] args = new object[0];
            m_privateObject.Invoke("DisconnectBuildEvents", new System.Type[0], args);
        }

        internal void ConnectPropertyNotify()
        {
            object[] args = new object[0];
            m_privateObject.Invoke("ConnectPropertyNotify", new System.Type[0], args);
        }

        internal void AttemptConnectPropertyNotifyObject(object EventSource, string DebugSourceName)
        {
            object[] args = new object[] {
                EventSource,
                DebugSourceName};
            m_privateObject.Invoke("AttemptConnectPropertyNotifyObject", new System.Type[] {
                    typeof(object),
                    typeof(string)}, args);
        }

        internal void DisconnectPropertyNotify()
        {
            object[] args = new object[0];
            m_privateObject.Invoke("DisconnectPropertyNotify", new System.Type[0], args);
        }

        internal void OnExternalPropertyChanged(int DISPID, string DebugSourceName)
        {
            object[] args = new object[] {
                DISPID,
                DebugSourceName};
            m_privateObject.Invoke("OnExternalPropertyChanged", new System.Type[] {
                    typeof(int),
                    typeof(string)}, args);
        }

        internal void OnExternalPropertyChanged(int DISPID, global::Microsoft.VisualStudio.Editors.PropertyPages.PropPageUserControlBase.PropertyChangeSource Source)
        {
            object[] args = new object[] {
                DISPID,
                Source};
            m_privateObject.Invoke("OnExternalPropertyChanged", new System.Type[] {
                    typeof(int),
                    typeof(global::Microsoft.VisualStudio.Editors.PropertyPages.PropPageUserControlBase.PropertyChangeSource)}, args);
        }

        internal void OnExternalPropertyChanged(global::Microsoft.VisualStudio.Editors.PropertyPages.PropertyControlData Data, global::Microsoft.VisualStudio.Editors.PropertyPages.PropPageUserControlBase.PropertyChangeSource Source)
        {
            object[] args = new object[] {
                Data,
                Source};
            m_privateObject.Invoke("OnExternalPropertyChanged", new System.Type[] {
                    typeof(global::Microsoft.VisualStudio.Editors.PropertyPages.PropertyControlData),
                    typeof(global::Microsoft.VisualStudio.Editors.PropertyPages.PropPageUserControlBase.PropertyChangeSource)}, args);
        }

        internal void CheckPlayCachedPropertyChanges()
        {
            object[] args = new object[0];
            m_privateObject.Invoke("CheckPlayCachedPropertyChanges", new System.Type[0], args);
        }

        internal void OnExternalPropertyRequestEdit(int DISPID, string DebugSourceName)
        {
            object[] args = new object[] {
                DISPID,
                DebugSourceName};
            m_privateObject.Invoke("OnExternalPropertyRequestEdit", new System.Type[] {
                    typeof(int),
                    typeof(string)}, args);
        }

        internal void OnLayout(global::System.Windows.Forms.LayoutEventArgs levent)
        {
            object[] args = new object[] {
                levent};
            m_privateObject.Invoke("OnLayout", new System.Type[] {
                    typeof(global::System.Windows.Forms.LayoutEventArgs)}, args);
        }
    }
    [System.Diagnostics.DebuggerStepThrough()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TestTools.UnitTestGeneration", "1.0.0.0")]
    internal class Microsoft_VisualStudio_Editors_PropertyPages_IPropertyPageSiteInternalAccessor : BaseAccessor
    {

        protected static Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType m_privateType = new Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType(EDITORS_ASSEMBLY, "Microsoft.VisualStudio.Editors.PropertyPages.IPropertyPageSiteInternal");

        internal Microsoft_VisualStudio_Editors_PropertyPages_IPropertyPageSiteInternalAccessor(object target)
            :
                base(target, m_privateType)
        {
        }

        internal bool IsImmediateApply
        {
            get
            {
                bool ret = ((bool)(m_privateObject.GetProperty("IsImmediateApply")));
                return ret;
            }
        }

        internal void OnStatusChange(global::Microsoft.VisualStudio.Editors.PropertyPages.PROPPAGESTATUS flags)
        {
            object[] args = new object[] {
                flags};
            m_privateObject.Invoke("OnStatusChange", new System.Type[] {
                    typeof(global::Microsoft.VisualStudio.Editors.PropertyPages.PROPPAGESTATUS)}, args);
        }

        internal int GetLocaleID()
        {
            object[] args = new object[0];
            int ret = ((int)(m_privateObject.Invoke("GetLocaleID", new System.Type[0], args)));
            return ret;
        }

        internal int TranslateAccelerator(global::System.Windows.Forms.Message msg)
        {
            object[] args = new object[] {
                msg};
            int ret = ((int)(m_privateObject.Invoke("TranslateAccelerator", new System.Type[] {
                    typeof(global::System.Windows.Forms.Message)}, args)));
            return ret;
        }

        internal object GetService(global::System.Type ServiceType)
        {
            object[] args = new object[] {
                ServiceType};
            object ret = ((object)(m_privateObject.Invoke("GetService", new System.Type[] {
                    typeof(global::System.Type)}, args)));
            return ret;
        }
    }
    [System.Diagnostics.DebuggerStepThrough()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TestTools.UnitTestGeneration", "1.0.0.0")]
    internal class Microsoft_VisualStudio_Editors_PropertyPages_PropPageHostDialogAccessor : BaseAccessor
    {

        protected static Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType m_privateType = new Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType(EDITORS_ASSEMBLY, "Microsoft.VisualStudio.Editors.PropertyPages.PropPageHostDialog");

        internal Microsoft_VisualStudio_Editors_PropertyPages_PropPageHostDialogAccessor(object target)
            :
                base(target, m_privateType)
        {
        }

        internal global::Microsoft.VisualStudio.Editors.PropertyPages.PropPageUserControlBase m_propPage
        {
            get
            {
                global::Microsoft.VisualStudio.Editors.PropertyPages.PropPageUserControlBase ret = ((global::Microsoft.VisualStudio.Editors.PropertyPages.PropPageUserControlBase)(m_privateObject.GetFieldOrProperty("m_propPage")));
                return ret;
            }
            set
            {
                m_privateObject.SetFieldOrProperty("m_propPage", value);
            }
        }

        internal global::System.Windows.Forms.Button Cancel
        {
            get
            {
                global::System.Windows.Forms.Button ret = ((global::System.Windows.Forms.Button)(m_privateObject.GetFieldOrProperty("Cancel")));
                return ret;
            }
            set
            {
                m_privateObject.SetFieldOrProperty("Cancel", value);
            }
        }

        internal global::System.Windows.Forms.Button OK
        {
            get
            {
                global::System.Windows.Forms.Button ret = ((global::System.Windows.Forms.Button)(m_privateObject.GetFieldOrProperty("OK")));
                return ret;
            }
            set
            {
                m_privateObject.SetFieldOrProperty("OK", value);
            }
        }

        internal global::System.Windows.Forms.TableLayoutPanel okCancelTableLayoutPanel
        {
            get
            {
                global::System.Windows.Forms.TableLayoutPanel ret = ((global::System.Windows.Forms.TableLayoutPanel)(m_privateObject.GetFieldOrProperty("okCancelTableLayoutPanel")));
                return ret;
            }
            set
            {
                m_privateObject.SetFieldOrProperty("okCancelTableLayoutPanel", value);
            }
        }

        internal global::System.Windows.Forms.TableLayoutPanel overArchingTableLayoutPanel
        {
            get
            {
                global::System.Windows.Forms.TableLayoutPanel ret = ((global::System.Windows.Forms.TableLayoutPanel)(m_privateObject.GetFieldOrProperty("overArchingTableLayoutPanel")));
                return ret;
            }
            set
            {
                m_privateObject.SetFieldOrProperty("overArchingTableLayoutPanel", value);
            }
        }

        internal bool m_FirstFocusHandled
        {
            get
            {
                bool ret = ((bool)(m_privateObject.GetFieldOrProperty("m_FirstFocusHandled")));
                return ret;
            }
            set
            {
                m_privateObject.SetFieldOrProperty("m_FirstFocusHandled", value);
            }
        }

        internal string F1Keyword
        {
            get
            {
                string ret = ((string)(m_privateObject.GetProperty("F1Keyword")));
                return ret;
            }
            set
            {
                m_privateObject.SetProperty("F1Keyword", value);
            }
        }

        internal global::Microsoft.VisualStudio.Editors.PropertyPages.PropPageUserControlBase PropPage
        {
            get
            {
                global::Microsoft.VisualStudio.Editors.PropertyPages.PropPageUserControlBase ret = ((global::Microsoft.VisualStudio.Editors.PropertyPages.PropPageUserControlBase)(m_privateObject.GetProperty("PropPage")));
                return ret;
            }
            set
            {
                m_privateObject.SetProperty("PropPage", value);
            }
        }

        internal global::System.ComponentModel.IContainer components
        {
            get
            {
                global::System.ComponentModel.IContainer ret = ((global::System.ComponentModel.IContainer)(m_privateObject.GetFieldOrProperty("components")));
                return ret;
            }
            set
            {
                m_privateObject.SetFieldOrProperty("components", value);
            }
        }

        internal void Dispose(bool disposing)
        {
            object[] args = new object[] {
                disposing};
            m_privateObject.Invoke("Dispose", new System.Type[] {
                    typeof(bool)}, args);
        }

        internal void InitializeComponent()
        {
            object[] args = new object[0];
            m_privateObject.Invoke("InitializeComponent", new System.Type[0], args);
        }

        internal static global::System.Windows.Forms.Form CreatePrivate(global::System.IServiceProvider ServiceProvider, string F1Keyword)
        {
            object[] args = new object[] {
                ServiceProvider,
                F1Keyword};
            Microsoft.VisualStudio.TestTools.UnitTesting.PrivateObject priv_obj = new Microsoft.VisualStudio.TestTools.UnitTesting.PrivateObject(EDITORS_ASSEMBLY, "Microsoft.VisualStudio.Editors.PropertyPages.PropPageHostDialog", new System.Type[] {
                    typeof(global::System.IServiceProvider),
                    typeof(string)}, args);
            return ((global::System.Windows.Forms.Form)(priv_obj.Target));
        }

        internal void OnShown(global::System.EventArgs e)
        {
            object[] args = new object[] {
                e};
            m_privateObject.Invoke("OnShown", new System.Type[] {
                    typeof(global::System.EventArgs)}, args);
        }

        internal void Cancel_Click(object sender, global::System.EventArgs e)
        {
            object[] args = new object[] {
                sender,
                e};
            m_privateObject.Invoke("Cancel_Click", new System.Type[] {
                    typeof(object),
                    typeof(global::System.EventArgs)}, args);
        }

        internal void OK_Click(object sender, global::System.EventArgs e)
        {
            object[] args = new object[] {
                sender,
                e};
            m_privateObject.Invoke("OK_Click", new System.Type[] {
                    typeof(object),
                    typeof(global::System.EventArgs)}, args);
        }

        internal void OnFormClosing(global::System.Windows.Forms.FormClosingEventArgs e)
        {
            object[] args = new object[] {
                e};
            m_privateObject.Invoke("OnFormClosing", new System.Type[] {
                    typeof(global::System.Windows.Forms.FormClosingEventArgs)}, args);
        }

        internal void SetFocusToPage()
        {
            object[] args = new object[0];
            m_privateObject.Invoke("SetFocusToPage", new System.Type[0], args);
        }

        internal void PropPageHostDialog_HelpButtonClicked(object sender, global::System.ComponentModel.CancelEventArgs e)
        {
            object[] args = new object[] {
                sender,
                e};
            m_privateObject.Invoke("PropPageHostDialog_HelpButtonClicked", new System.Type[] {
                    typeof(object),
                    typeof(global::System.ComponentModel.CancelEventArgs)}, args);
        }
    }
    [System.Diagnostics.DebuggerStepThrough()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TestTools.UnitTestGeneration", "1.0.0.0")]
    internal class Microsoft_VisualStudio_Editors_PropertyPages_WPFApplicationWithMyPropPageComClassAccessor : BaseAccessor
    {

        protected static Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType m_privateType = new Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType(typeof(global::Microsoft.VisualStudio.Editors.PropertyPages.WPFApplicationWithMyPropPageComClass));

        internal Microsoft_VisualStudio_Editors_PropertyPages_WPFApplicationWithMyPropPageComClassAccessor(global::Microsoft.VisualStudio.Editors.PropertyPages.WPFApplicationWithMyPropPageComClass target)
            :
                base(target, m_privateType)
        {
        }

        internal string Title
        {
            get
            {
                string ret = ((string)(m_privateObject.GetProperty("Title")));
                return ret;
            }
        }

        internal global::System.Type ControlType
        {
            get
            {
                global::System.Type ret = ((global::System.Type)(m_privateObject.GetProperty("ControlType")));
                return ret;
            }
        }

        internal global::System.Windows.Forms.Control CreateControl()
        {
            object[] args = new object[0];
            global::System.Windows.Forms.Control ret = ((global::System.Windows.Forms.Control)(m_privateObject.Invoke("CreateControl", new System.Type[0], args)));
            return ret;
        }
    }
    [System.Diagnostics.DebuggerStepThrough()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TestTools.UnitTestGeneration", "1.0.0.0")]
    internal class Microsoft_VisualStudio_Editors_PropertyPages_ApplicationPropPageVBBaseAccessor : BaseAccessor
    {

        protected static Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType m_privateType = new Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType(EDITORS_ASSEMBLY, "Microsoft.VisualStudio.Editors.PropertyPages.ApplicationPropPageVBBase");

        internal Microsoft_VisualStudio_Editors_PropertyPages_ApplicationPropPageVBBaseAccessor(object target)
            :
                base(target, m_privateType)
        {
        }

        internal global::Microsoft.VisualStudio.Editors.UnitTests.Microsoft_VisualStudio_Editors_PropertyPages_ApplicationPropPageVBBase_SharedControlsAccessor m_SharedControls
        {
            get
            {
                object _ret_val = m_privateObject.GetFieldOrProperty("m_SharedControls");
                global::Microsoft.VisualStudio.Editors.UnitTests.Microsoft_VisualStudio_Editors_PropertyPages_ApplicationPropPageVBBase_SharedControlsAccessor _ret = null;
                if ((_ret_val != null))
                {
                    _ret = new global::Microsoft.VisualStudio.Editors.UnitTests.Microsoft_VisualStudio_Editors_PropertyPages_ApplicationPropPageVBBase_SharedControlsAccessor(_ret_val);
                }
                global::Microsoft.VisualStudio.Editors.UnitTests.Microsoft_VisualStudio_Editors_PropertyPages_ApplicationPropPageVBBase_SharedControlsAccessor ret = _ret;
                return ret;
            }
            set
            {
                m_privateObject.SetFieldOrProperty("m_SharedControls", value);
            }
        }

        internal string m_IconBrowseText
        {
            get
            {
                string ret = ((string)(m_privateObject.GetFieldOrProperty("m_IconBrowseText")));
                return ret;
            }
            set
            {
                m_privateObject.SetFieldOrProperty("m_IconBrowseText", value);
            }
        }

        internal void InitializeComponent()
        {
            object[] args = new object[0];
            m_privateObject.Invoke("InitializeComponent", new System.Type[0], args);
        }

        internal static global::Microsoft.VisualStudio.Editors.PropertyPages.PropPageUserControlBase CreatePrivate()
        {
            object[] args = new object[0];
            Microsoft.VisualStudio.TestTools.UnitTesting.PrivateObject priv_obj = new Microsoft.VisualStudio.TestTools.UnitTesting.PrivateObject(EDITORS_ASSEMBLY, "Microsoft.VisualStudio.Editors.PropertyPages.ApplicationPropPageVBBase", new System.Type[0], args);
            return ((global::Microsoft.VisualStudio.Editors.PropertyPages.PropPageUserControlBase)(priv_obj.Target));
        }

        internal void SetSharedControls()
        {
            object[] args = new object[0];
            m_privateObject.Invoke("SetSharedControls", new System.Type[0], args);
        }
    }
    [System.Diagnostics.DebuggerStepThrough()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TestTools.UnitTestGeneration", "1.0.0.0")]
    internal class Microsoft_VisualStudio_Editors_PropertyPages_ApplicationPropPageVBBase_SharedControlsAccessor : BaseAccessor
    {

        protected static Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType m_privateType = new Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType(EDITORS_ASSEMBLY, "Microsoft.VisualStudio.Editors.PropertyPages.ApplicationPropPageVBBase+SharedCont" +
                "rols");

        internal Microsoft_VisualStudio_Editors_PropertyPages_ApplicationPropPageVBBase_SharedControlsAccessor(object target)
            :
                base(target, m_privateType)
        {
        }

        internal global::System.Windows.Forms.ComboBox IconCombobox
        {
            get
            {
                global::System.Windows.Forms.ComboBox ret = ((global::System.Windows.Forms.ComboBox)(m_privateObject.GetFieldOrProperty("IconCombobox")));
                return ret;
            }
            set
            {
                m_privateObject.SetFieldOrProperty("IconCombobox", value);
            }
        }

        internal global::System.Windows.Forms.Label IconLabel
        {
            get
            {
                global::System.Windows.Forms.Label ret = ((global::System.Windows.Forms.Label)(m_privateObject.GetFieldOrProperty("IconLabel")));
                return ret;
            }
            set
            {
                m_privateObject.SetFieldOrProperty("IconLabel", value);
            }
        }

        internal static object CreatePrivate(global::System.Windows.Forms.ComboBox IconCombobox, global::System.Windows.Forms.Label IconLabel)
        {
            object[] args = new object[] {
                IconCombobox,
                IconLabel};
            Microsoft.VisualStudio.TestTools.UnitTesting.PrivateObject priv_obj = new Microsoft.VisualStudio.TestTools.UnitTesting.PrivateObject(EDITORS_ASSEMBLY, "Microsoft.VisualStudio.Editors.PropertyPages.ApplicationPropPageVBBase+SharedCont" +
                    "rols", new System.Type[] {
                    typeof(global::System.Windows.Forms.ComboBox),
                    typeof(global::System.Windows.Forms.Label)}, args);
            return priv_obj.Target;
        }
    }
    [System.Diagnostics.DebuggerStepThrough()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TestTools.UnitTestGeneration", "1.0.0.0")]
    internal class Microsoft_VisualStudio_Editors_PropertyPages_ApplicationPropPageBaseAccessor : BaseAccessor
    {

        protected static Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType m_privateType = new Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType(EDITORS_ASSEMBLY, "Microsoft.VisualStudio.Editors.PropertyPages.ApplicationPropPageBase");

        internal Microsoft_VisualStudio_Editors_PropertyPages_ApplicationPropPageBaseAccessor(object target)
            :
                base(target, m_privateType)
        {
        }

        internal string m_LastIconImage
        {
            get
            {
                string ret = ((string)(m_privateObject.GetFieldOrProperty("m_LastIconImage")));
                return ret;
            }
            set
            {
                m_privateObject.SetFieldOrProperty("m_LastIconImage", value);
            }
        }

        internal string m_DefaultIconText
        {
            get
            {
                string ret = ((string)(m_privateObject.GetFieldOrProperty("m_DefaultIconText")));
                return ret;
            }
            set
            {
                m_privateObject.SetFieldOrProperty("m_DefaultIconText", value);
            }
        }

        internal global::System.Drawing.Icon m_DefaultIcon
        {
            get
            {
                global::System.Drawing.Icon ret = ((global::System.Drawing.Icon)(m_privateObject.GetFieldOrProperty("m_DefaultIcon")));
                return ret;
            }
            set
            {
                m_privateObject.SetFieldOrProperty("m_DefaultIcon", value);
            }
        }

        internal global::System.ComponentModel.IContainer components
        {
            get
            {
                global::System.ComponentModel.IContainer ret = ((global::System.ComponentModel.IContainer)(m_privateObject.GetFieldOrProperty("components")));
                return ret;
            }
            set
            {
                m_privateObject.SetFieldOrProperty("components", value);
            }
        }

        internal string LastIconImage
        {
            get
            {
                string ret = ((string)(m_privateObject.GetProperty("LastIconImage")));
                return ret;
            }
        }

        internal void InitializeComponent()
        {
            object[] args = new object[0];
            m_privateObject.Invoke("InitializeComponent", new System.Type[0], args);
        }

        internal static global::Microsoft.VisualStudio.Editors.PropertyPages.PropPageUserControlBase CreatePrivate()
        {
            object[] args = new object[0];
            Microsoft.VisualStudio.TestTools.UnitTesting.PrivateObject priv_obj = new Microsoft.VisualStudio.TestTools.UnitTesting.PrivateObject(EDITORS_ASSEMBLY, "Microsoft.VisualStudio.Editors.PropertyPages.ApplicationPropPageBase", new System.Type[0], args);
            return ((global::Microsoft.VisualStudio.Editors.PropertyPages.PropPageUserControlBase)(priv_obj.Target));
        }

        internal bool ApplicationIconGet(global::System.Windows.Forms.Control control, global::System.ComponentModel.PropertyDescriptor prop, ref object value)
        {
            object[] args = new object[] {
                control,
                prop,
                value};
            bool ret = ((bool)(m_privateObject.Invoke("ApplicationIconGet", new System.Type[] {
                    typeof(global::System.Windows.Forms.Control),
                    typeof(global::System.ComponentModel.PropertyDescriptor),
                    typeof(object).MakeByRefType()}, args)));
            value = ((object)(args[2]));
            return ret;
        }

        internal void PopulateIconList(bool FindIconsInProject, global::System.Windows.Forms.ComboBox ApplicationIconCombobox, string CurrentIconValue)
        {
            object[] args = new object[] {
                FindIconsInProject,
                ApplicationIconCombobox,
                CurrentIconValue};
            m_privateObject.Invoke("PopulateIconList", new System.Type[] {
                    typeof(bool),
                    typeof(global::System.Windows.Forms.ComboBox),
                    typeof(string)}, args);
        }

        internal void AddIconEntryToCombobox(global::System.Windows.Forms.ComboBox ApplicationIconCombobox, string IconRelativePath)
        {
            object[] args = new object[] {
                ApplicationIconCombobox,
                IconRelativePath};
            m_privateObject.Invoke("AddIconEntryToCombobox", new System.Type[] {
                    typeof(global::System.Windows.Forms.ComboBox),
                    typeof(string)}, args);
        }

        internal global::EnvDTE.ProjectItem AddIconFileToProject(string IconFileName)
        {
            object[] args = new object[] {
                IconFileName};
            global::EnvDTE.ProjectItem ret = ((global::EnvDTE.ProjectItem)(m_privateObject.Invoke("AddIconFileToProject", new System.Type[] {
                    typeof(string)}, args)));
            return ret;
        }

        internal void BrowseForAppIcon(global::System.Windows.Forms.ComboBox ApplicationIconCombobox, global::System.Windows.Forms.PictureBox ApplicationIconPictureBox)
        {
            object[] args = new object[] {
                ApplicationIconCombobox,
                ApplicationIconPictureBox};
            m_privateObject.Invoke("BrowseForAppIcon", new System.Type[] {
                    typeof(global::System.Windows.Forms.ComboBox),
                    typeof(global::System.Windows.Forms.PictureBox)}, args);
        }

        internal void UpdateIconImage(global::System.Windows.Forms.ComboBox ApplicationIconCombobox, global::System.Windows.Forms.PictureBox ApplicationIconPictureBox, bool AddToProject)
        {
            object[] args = new object[] {
                ApplicationIconCombobox,
                ApplicationIconPictureBox,
                AddToProject};
            m_privateObject.Invoke("UpdateIconImage", new System.Type[] {
                    typeof(global::System.Windows.Forms.ComboBox),
                    typeof(global::System.Windows.Forms.PictureBox),
                    typeof(bool)}, args);
        }

        internal bool SetIconImagePath(string path, global::System.Windows.Forms.ComboBox ApplicationIconCombobox, global::System.Windows.Forms.PictureBox ApplicationIconPictureBox, bool AddToProject)
        {
            object[] args = new object[] {
                path,
                ApplicationIconCombobox,
                ApplicationIconPictureBox,
                AddToProject};
            bool ret = ((bool)(m_privateObject.Invoke("SetIconImagePath", new System.Type[] {
                    typeof(string),
                    typeof(global::System.Windows.Forms.ComboBox),
                    typeof(global::System.Windows.Forms.PictureBox),
                    typeof(bool)}, args)));
            return ret;
        }

        internal global::System.Drawing.Image IconToImage(global::System.Drawing.Icon Icon, global::System.Drawing.Size PictureBoxSize)
        {
            object[] args = new object[] {
                Icon,
                PictureBoxSize};
            global::System.Drawing.Image ret = ((global::System.Drawing.Image)(m_privateObject.Invoke("IconToImage", new System.Type[] {
                    typeof(global::System.Drawing.Icon),
                    typeof(global::System.Drawing.Size)}, args)));
            return ret;
        }

        internal void AddIconsFromProjectItem(global::EnvDTE.ProjectItem ProjectItem, global::System.Windows.Forms.ComboBox ApplicationIconCombobox)
        {
            object[] args = new object[] {
                ProjectItem,
                ApplicationIconCombobox};
            m_privateObject.Invoke("AddIconsFromProjectItem", new System.Type[] {
                    typeof(global::EnvDTE.ProjectItem),
                    typeof(global::System.Windows.Forms.ComboBox)}, args);
        }

        internal bool IconEntryIsBrowse(string EntryText)
        {
            object[] args = new object[] {
                EntryText};
            bool ret = ((bool)(m_privateObject.Invoke("IconEntryIsBrowse", new System.Type[] {
                    typeof(string)}, args)));
            return ret;
        }

        internal bool IconEntryIsDefault(string EntryText)
        {
            object[] args = new object[] {
                EntryText};
            bool ret = ((bool)(m_privateObject.Invoke("IconEntryIsDefault", new System.Type[] {
                    typeof(string)}, args)));
            return ret;
        }

        internal bool IconEntryIsSpecial(string EntryText)
        {
            object[] args = new object[] {
                EntryText};
            bool ret = ((bool)(m_privateObject.Invoke("IconEntryIsSpecial", new System.Type[] {
                    typeof(string)}, args)));
            return ret;
        }
    }
    [System.Diagnostics.DebuggerStepThrough()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TestTools.UnitTestGeneration", "1.0.0.0")]
    internal class Microsoft_VisualStudio_Editors_PropertyPages_ApplicationPropPageVBWinFormsAccessor : BaseAccessor
    {

        protected static Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType m_privateType = new Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType(EDITORS_ASSEMBLY, "Microsoft.VisualStudio.Editors.PropertyPages.ApplicationPropPageVBWinForms");

        internal Microsoft_VisualStudio_Editors_PropertyPages_ApplicationPropPageVBWinFormsAccessor(object target)
            :
                base(target, m_privateType)
        {
        }

        internal global::System.Windows.Forms.CheckBox SaveMySettingsCheckbox
        {
            get
            {
                global::System.Windows.Forms.CheckBox ret = ((global::System.Windows.Forms.CheckBox)(m_privateObject.GetFieldOrProperty("SaveMySettingsCheckbox")));
                return ret;
            }
            set
            {
                m_privateObject.SetFieldOrProperty("SaveMySettingsCheckbox", value);
            }
        }

        internal global::System.Windows.Forms.ComboBox AuthenticationModeComboBox
        {
            get
            {
                global::System.Windows.Forms.ComboBox ret = ((global::System.Windows.Forms.ComboBox)(m_privateObject.GetFieldOrProperty("AuthenticationModeComboBox")));
                return ret;
            }
            set
            {
                m_privateObject.SetFieldOrProperty("AuthenticationModeComboBox", value);
            }
        }

        internal global::System.Windows.Forms.Label AuthenticationModeLabel
        {
            get
            {
                global::System.Windows.Forms.Label ret = ((global::System.Windows.Forms.Label)(m_privateObject.GetFieldOrProperty("AuthenticationModeLabel")));
                return ret;
            }
            set
            {
                m_privateObject.SetFieldOrProperty("AuthenticationModeLabel", value);
            }
        }

        internal global::System.Windows.Forms.TableLayoutPanel overarchingTableLayoutPanel
        {
            get
            {
                global::System.Windows.Forms.TableLayoutPanel ret = ((global::System.Windows.Forms.TableLayoutPanel)(m_privateObject.GetFieldOrProperty("overarchingTableLayoutPanel")));
                return ret;
            }
            set
            {
                m_privateObject.SetFieldOrProperty("overarchingTableLayoutPanel", value);
            }
        }

        internal global::System.Windows.Forms.Label AssemblyNameLabel
        {
            get
            {
                global::System.Windows.Forms.Label ret = ((global::System.Windows.Forms.Label)(m_privateObject.GetFieldOrProperty("AssemblyNameLabel")));
                return ret;
            }
            set
            {
                m_privateObject.SetFieldOrProperty("AssemblyNameLabel", value);
            }
        }

        internal global::System.Windows.Forms.Label RootNamespaceLabel
        {
            get
            {
                global::System.Windows.Forms.Label ret = ((global::System.Windows.Forms.Label)(m_privateObject.GetFieldOrProperty("RootNamespaceLabel")));
                return ret;
            }
            set
            {
                m_privateObject.SetFieldOrProperty("RootNamespaceLabel", value);
            }
        }

        internal global::System.Windows.Forms.TextBox AssemblyNameTextBox
        {
            get
            {
                global::System.Windows.Forms.TextBox ret = ((global::System.Windows.Forms.TextBox)(m_privateObject.GetFieldOrProperty("AssemblyNameTextBox")));
                return ret;
            }
            set
            {
                m_privateObject.SetFieldOrProperty("AssemblyNameTextBox", value);
            }
        }

        internal global::System.Windows.Forms.TextBox RootNamespaceTextBox
        {
            get
            {
                global::System.Windows.Forms.TextBox ret = ((global::System.Windows.Forms.TextBox)(m_privateObject.GetFieldOrProperty("RootNamespaceTextBox")));
                return ret;
            }
            set
            {
                m_privateObject.SetFieldOrProperty("RootNamespaceTextBox", value);
            }
        }

        internal global::System.Windows.Forms.Label ApplicationTypeLabel
        {
            get
            {
                global::System.Windows.Forms.Label ret = ((global::System.Windows.Forms.Label)(m_privateObject.GetFieldOrProperty("ApplicationTypeLabel")));
                return ret;
            }
            set
            {
                m_privateObject.SetFieldOrProperty("ApplicationTypeLabel", value);
            }
        }

        internal global::System.Windows.Forms.ComboBox ApplicationTypeComboBox
        {
            get
            {
                global::System.Windows.Forms.ComboBox ret = ((global::System.Windows.Forms.ComboBox)(m_privateObject.GetFieldOrProperty("ApplicationTypeComboBox")));
                return ret;
            }
            set
            {
                m_privateObject.SetFieldOrProperty("ApplicationTypeComboBox", value);
            }
        }

        internal global::System.Windows.Forms.Button AssemblyInfoButton
        {
            get
            {
                global::System.Windows.Forms.Button ret = ((global::System.Windows.Forms.Button)(m_privateObject.GetFieldOrProperty("AssemblyInfoButton")));
                return ret;
            }
            set
            {
                m_privateObject.SetFieldOrProperty("AssemblyInfoButton", value);
            }
        }

        internal global::System.Windows.Forms.Label StartupObjectLabel
        {
            get
            {
                global::System.Windows.Forms.Label ret = ((global::System.Windows.Forms.Label)(m_privateObject.GetFieldOrProperty("StartupObjectLabel")));
                return ret;
            }
            set
            {
                m_privateObject.SetFieldOrProperty("StartupObjectLabel", value);
            }
        }

        internal global::System.Windows.Forms.ComboBox StartupObjectComboBox
        {
            get
            {
                global::System.Windows.Forms.ComboBox ret = ((global::System.Windows.Forms.ComboBox)(m_privateObject.GetFieldOrProperty("StartupObjectComboBox")));
                return ret;
            }
            set
            {
                m_privateObject.SetFieldOrProperty("StartupObjectComboBox", value);
            }
        }

        internal global::System.Windows.Forms.CheckBox UseApplicationFrameworkCheckBox
        {
            get
            {
                global::System.Windows.Forms.CheckBox ret = ((global::System.Windows.Forms.CheckBox)(m_privateObject.GetFieldOrProperty("UseApplicationFrameworkCheckBox")));
                return ret;
            }
            set
            {
                m_privateObject.SetFieldOrProperty("UseApplicationFrameworkCheckBox", value);
            }
        }

        internal global::System.Windows.Forms.Label IconLabel
        {
            get
            {
                global::System.Windows.Forms.Label ret = ((global::System.Windows.Forms.Label)(m_privateObject.GetFieldOrProperty("IconLabel")));
                return ret;
            }
            set
            {
                m_privateObject.SetFieldOrProperty("IconLabel", value);
            }
        }

        internal global::System.Windows.Forms.CheckBox EnableXPThemesCheckBox
        {
            get
            {
                global::System.Windows.Forms.CheckBox ret = ((global::System.Windows.Forms.CheckBox)(m_privateObject.GetFieldOrProperty("EnableXPThemesCheckBox")));
                return ret;
            }
            set
            {
                m_privateObject.SetFieldOrProperty("EnableXPThemesCheckBox", value);
            }
        }

        internal global::System.Windows.Forms.CheckBox SingleInstanceCheckBox
        {
            get
            {
                global::System.Windows.Forms.CheckBox ret = ((global::System.Windows.Forms.CheckBox)(m_privateObject.GetFieldOrProperty("SingleInstanceCheckBox")));
                return ret;
            }
            set
            {
                m_privateObject.SetFieldOrProperty("SingleInstanceCheckBox", value);
            }
        }

        internal global::System.Windows.Forms.Label ShutdownModeLabel
        {
            get
            {
                global::System.Windows.Forms.Label ret = ((global::System.Windows.Forms.Label)(m_privateObject.GetFieldOrProperty("ShutdownModeLabel")));
                return ret;
            }
            set
            {
                m_privateObject.SetFieldOrProperty("ShutdownModeLabel", value);
            }
        }

        internal global::System.Windows.Forms.ComboBox ShutdownModeComboBox
        {
            get
            {
                global::System.Windows.Forms.ComboBox ret = ((global::System.Windows.Forms.ComboBox)(m_privateObject.GetFieldOrProperty("ShutdownModeComboBox")));
                return ret;
            }
            set
            {
                m_privateObject.SetFieldOrProperty("ShutdownModeComboBox", value);
            }
        }

        internal global::System.Windows.Forms.Button ViewCodeButton
        {
            get
            {
                global::System.Windows.Forms.Button ret = ((global::System.Windows.Forms.Button)(m_privateObject.GetFieldOrProperty("ViewCodeButton")));
                return ret;
            }
            set
            {
                m_privateObject.SetFieldOrProperty("ViewCodeButton", value);
            }
        }

        internal global::System.Windows.Forms.TableLayoutPanel TopHalfLayoutPanel
        {
            get
            {
                global::System.Windows.Forms.TableLayoutPanel ret = ((global::System.Windows.Forms.TableLayoutPanel)(m_privateObject.GetFieldOrProperty("TopHalfLayoutPanel")));
                return ret;
            }
            set
            {
                m_privateObject.SetFieldOrProperty("TopHalfLayoutPanel", value);
            }
        }

        internal global::System.Windows.Forms.GroupBox WindowsAppGroupBox
        {
            get
            {
                global::System.Windows.Forms.GroupBox ret = ((global::System.Windows.Forms.GroupBox)(m_privateObject.GetFieldOrProperty("WindowsAppGroupBox")));
                return ret;
            }
            set
            {
                m_privateObject.SetFieldOrProperty("WindowsAppGroupBox", value);
            }
        }

        internal global::System.Windows.Forms.TableLayoutPanel BottomHalfLayoutPanel
        {
            get
            {
                global::System.Windows.Forms.TableLayoutPanel ret = ((global::System.Windows.Forms.TableLayoutPanel)(m_privateObject.GetFieldOrProperty("BottomHalfLayoutPanel")));
                return ret;
            }
            set
            {
                m_privateObject.SetFieldOrProperty("BottomHalfLayoutPanel", value);
            }
        }

        internal global::System.Windows.Forms.ComboBox IconCombobox
        {
            get
            {
                global::System.Windows.Forms.ComboBox ret = ((global::System.Windows.Forms.ComboBox)(m_privateObject.GetFieldOrProperty("IconCombobox")));
                return ret;
            }
            set
            {
                m_privateObject.SetFieldOrProperty("IconCombobox", value);
            }
        }

        internal global::System.Windows.Forms.PictureBox IconPicturebox
        {
            get
            {
                global::System.Windows.Forms.PictureBox ret = ((global::System.Windows.Forms.PictureBox)(m_privateObject.GetFieldOrProperty("IconPicturebox")));
                return ret;
            }
            set
            {
                m_privateObject.SetFieldOrProperty("IconPicturebox", value);
            }
        }

        internal global::System.Windows.Forms.Label SplashScreenLabel
        {
            get
            {
                global::System.Windows.Forms.Label ret = ((global::System.Windows.Forms.Label)(m_privateObject.GetFieldOrProperty("SplashScreenLabel")));
                return ret;
            }
            set
            {
                m_privateObject.SetFieldOrProperty("SplashScreenLabel", value);
            }
        }

        internal global::System.Windows.Forms.ComboBox SplashScreenComboBox
        {
            get
            {
                global::System.Windows.Forms.ComboBox ret = ((global::System.Windows.Forms.ComboBox)(m_privateObject.GetFieldOrProperty("SplashScreenComboBox")));
                return ret;
            }
            set
            {
                m_privateObject.SetFieldOrProperty("SplashScreenComboBox", value);
            }
        }

        internal global::System.ComponentModel.IContainer components
        {
            get
            {
                global::System.ComponentModel.IContainer ret = ((global::System.ComponentModel.IContainer)(m_privateObject.GetFieldOrProperty("components")));
                return ret;
            }
            set
            {
                m_privateObject.SetFieldOrProperty("components", value);
            }
        }

        internal global::System.Windows.Forms.TextBox MainFormTextboxNoRootNS
        {
            get
            {
                global::System.Windows.Forms.TextBox ret = ((global::System.Windows.Forms.TextBox)(m_privateObject.GetFieldOrProperty("MainFormTextboxNoRootNS")));
                return ret;
            }
            set
            {
                m_privateObject.SetFieldOrProperty("MainFormTextboxNoRootNS", value);
            }
        }

        internal string Const_SubMain
        {
            get
            {
                string ret = ((string)(m_privateObject.GetFieldOrProperty("Const_SubMain")));
                return ret;
            }
            set
            {
                m_privateObject.SetFieldOrProperty("Const_SubMain", value);
            }
        }

        internal string Const_StartupObject
        {
            get
            {
                string ret = ((string)(m_privateObject.GetFieldOrProperty("Const_StartupObject")));
                return ret;
            }
            set
            {
                m_privateObject.SetFieldOrProperty("Const_StartupObject", value);
            }
        }

        internal string Const_OutputType
        {
            get
            {
                string ret = ((string)(m_privateObject.GetFieldOrProperty("Const_OutputType")));
                return ret;
            }
            set
            {
                m_privateObject.SetFieldOrProperty("Const_OutputType", value);
            }
        }

        internal string Const_MyApplicationEntryPoint
        {
            get
            {
                string ret = ((string)(m_privateObject.GetFieldOrProperty("Const_MyApplicationEntryPoint")));
                return ret;
            }
            set
            {
                m_privateObject.SetFieldOrProperty("Const_MyApplicationEntryPoint", value);
            }
        }

        internal string Const_MyApplication
        {
            get
            {
                string ret = ((string)(m_privateObject.GetFieldOrProperty("Const_MyApplication")));
                return ret;
            }
            set
            {
                m_privateObject.SetFieldOrProperty("Const_MyApplication", value);
            }
        }

        internal string[] m_ShutdownModeStringValues
        {
            get
            {
                string[] ret = ((string[])(m_privateObject.GetFieldOrProperty("m_ShutdownModeStringValues")));
                return ret;
            }
            set
            {
                m_privateObject.SetFieldOrProperty("m_ShutdownModeStringValues", value);
            }
        }

        internal string[] m_AuthenticationModeStringValues
        {
            get
            {
                string[] ret = ((string[])(m_privateObject.GetFieldOrProperty("m_AuthenticationModeStringValues")));
                return ret;
            }
            set
            {
                m_privateObject.SetFieldOrProperty("m_AuthenticationModeStringValues", value);
            }
        }

        internal string m_NoneText
        {
            get
            {
                string ret = ((string)(m_privateObject.GetFieldOrProperty("m_NoneText")));
                return ret;
            }
            set
            {
                m_privateObject.SetFieldOrProperty("m_NoneText", value);
            }
        }

        internal string m_MyType
        {
            get
            {
                string ret = ((string)(m_privateObject.GetFieldOrProperty("m_MyType")));
                return ret;
            }
            set
            {
                m_privateObject.SetFieldOrProperty("m_MyType", value);
            }
        }

        internal string m_StartupObjectLabelText
        {
            get
            {
                string ret = ((string)(m_privateObject.GetFieldOrProperty("m_StartupObjectLabelText")));
                return ret;
            }
            set
            {
                m_privateObject.SetFieldOrProperty("m_StartupObjectLabelText", value);
            }
        }

        internal string m_StartupFormLabelText
        {
            get
            {
                string ret = ((string)(m_privateObject.GetFieldOrProperty("m_StartupFormLabelText")));
                return ret;
            }
            set
            {
                m_privateObject.SetFieldOrProperty("m_StartupFormLabelText", value);
            }
        }

        internal global::Microsoft.VisualStudio.Editors.UnitTests.Microsoft_VisualStudio_Editors_MyApplication_IMyApplicationPropertiesInternalAccessor m_MyApplicationPropertiesCache
        {
            get
            {
                object _ret_val = m_privateObject.GetFieldOrProperty("m_MyApplicationPropertiesCache");
                global::Microsoft.VisualStudio.Editors.UnitTests.Microsoft_VisualStudio_Editors_MyApplication_IMyApplicationPropertiesInternalAccessor _ret = null;
                if ((_ret_val != null))
                {
                    _ret = new global::Microsoft.VisualStudio.Editors.UnitTests.Microsoft_VisualStudio_Editors_MyApplication_IMyApplicationPropertiesInternalAccessor(_ret_val);
                }
                global::Microsoft.VisualStudio.Editors.UnitTests.Microsoft_VisualStudio_Editors_MyApplication_IMyApplicationPropertiesInternalAccessor ret = _ret;
                return ret;
            }
            set
            {
                m_privateObject.SetFieldOrProperty("m_MyApplicationPropertiesCache", value);
            }
        }

        internal global::System.ComponentModel.INotifyPropertyChanged m_MyApplicationPropertiesNotifyPropertyChanged
        {
            get
            {
                global::System.ComponentModel.INotifyPropertyChanged ret = ((global::System.ComponentModel.INotifyPropertyChanged)(m_privateObject.GetFieldOrProperty("m_MyApplicationPropertiesNotifyPropertyChanged")));
                return ret;
            }
            set
            {
                m_privateObject.SetFieldOrProperty("m_MyApplicationPropertiesNotifyPropertyChanged", value);
            }
        }

        internal bool m_IsMyApplicationPropertiesCached
        {
            get
            {
                bool ret = ((bool)(m_privateObject.GetFieldOrProperty("m_IsMyApplicationPropertiesCached")));
                return ret;
            }
            set
            {
                m_privateObject.SetFieldOrProperty("m_IsMyApplicationPropertiesCached", value);
            }
        }

        internal bool m_IsMyTypeDisabled
        {
            get
            {
                bool ret = ((bool)(m_privateObject.GetFieldOrProperty("m_IsMyTypeDisabled")));
                return ret;
            }
            set
            {
                m_privateObject.SetFieldOrProperty("m_IsMyTypeDisabled", value);
            }
        }

        internal bool m_IsMyTypeDisabledCached
        {
            get
            {
                bool ret = ((bool)(m_privateObject.GetFieldOrProperty("m_IsMyTypeDisabledCached")));
                return ret;
            }
            set
            {
                m_privateObject.SetFieldOrProperty("m_IsMyTypeDisabledCached", value);
            }
        }

        internal string Const_EnableVisualStyles
        {
            get
            {
                string ret = ((string)(m_privateObject.GetFieldOrProperty("Const_EnableVisualStyles")));
                return ret;
            }
            set
            {
                m_privateObject.SetFieldOrProperty("Const_EnableVisualStyles", value);
            }
        }

        internal string Const_AuthenticationMode
        {
            get
            {
                string ret = ((string)(m_privateObject.GetFieldOrProperty("Const_AuthenticationMode")));
                return ret;
            }
            set
            {
                m_privateObject.SetFieldOrProperty("Const_AuthenticationMode", value);
            }
        }

        internal string Const_SingleInstance
        {
            get
            {
                string ret = ((string)(m_privateObject.GetFieldOrProperty("Const_SingleInstance")));
                return ret;
            }
            set
            {
                m_privateObject.SetFieldOrProperty("Const_SingleInstance", value);
            }
        }

        internal string Const_ShutdownMode
        {
            get
            {
                string ret = ((string)(m_privateObject.GetFieldOrProperty("Const_ShutdownMode")));
                return ret;
            }
            set
            {
                m_privateObject.SetFieldOrProperty("Const_ShutdownMode", value);
            }
        }

        internal string Const_SplashScreenNoRootNS
        {
            get
            {
                string ret = ((string)(m_privateObject.GetFieldOrProperty("Const_SplashScreenNoRootNS")));
                return ret;
            }
            set
            {
                m_privateObject.SetFieldOrProperty("Const_SplashScreenNoRootNS", value);
            }
        }

        internal string Const_CustomSubMain
        {
            get
            {
                string ret = ((string)(m_privateObject.GetFieldOrProperty("Const_CustomSubMain")));
                return ret;
            }
            set
            {
                m_privateObject.SetFieldOrProperty("Const_CustomSubMain", value);
            }
        }

        internal string Const_MainFormNoRootNS
        {
            get
            {
                string ret = ((string)(m_privateObject.GetFieldOrProperty("Const_MainFormNoRootNS")));
                return ret;
            }
            set
            {
                m_privateObject.SetFieldOrProperty("Const_MainFormNoRootNS", value);
            }
        }

        internal string Const_MyType
        {
            get
            {
                string ret = ((string)(m_privateObject.GetFieldOrProperty("Const_MyType")));
                return ret;
            }
            set
            {
                m_privateObject.SetFieldOrProperty("Const_MyType", value);
            }
        }

        internal string Const_SaveMySettingsOnExit
        {
            get
            {
                string ret = ((string)(m_privateObject.GetFieldOrProperty("Const_SaveMySettingsOnExit")));
                return ret;
            }
            set
            {
                m_privateObject.SetFieldOrProperty("Const_SaveMySettingsOnExit", value);
            }
        }

        internal bool m_settingApplicationType
        {
            get
            {
                bool ret = ((bool)(m_privateObject.GetFieldOrProperty("m_settingApplicationType")));
                return ret;
            }
            set
            {
                m_privateObject.SetFieldOrProperty("m_settingApplicationType", value);
            }
        }

        internal global::Microsoft.VisualStudio.Editors.PropertyPages.PropertyControlData[] ControlData
        {
            get
            {
                global::Microsoft.VisualStudio.Editors.PropertyPages.PropertyControlData[] ret = ((global::Microsoft.VisualStudio.Editors.PropertyPages.PropertyControlData[])(m_privateObject.GetProperty("ControlData")));
                return ret;
            }
        }

        internal bool MyApplicationPropertiesSupported
        {
            get
            {
                bool ret = ((bool)(m_privateObject.GetProperty("MyApplicationPropertiesSupported")));
                return ret;
            }
        }

        internal global::Microsoft.VisualStudio.Editors.UnitTests.Microsoft_VisualStudio_Editors_MyApplication_IMyApplicationPropertiesInternalAccessor MyApplicationProperties
        {
            get
            {
                object _ret_val = m_privateObject.GetProperty("MyApplicationProperties");
                global::Microsoft.VisualStudio.Editors.UnitTests.Microsoft_VisualStudio_Editors_MyApplication_IMyApplicationPropertiesInternalAccessor _ret = null;
                if ((_ret_val != null))
                {
                    _ret = new global::Microsoft.VisualStudio.Editors.UnitTests.Microsoft_VisualStudio_Editors_MyApplication_IMyApplicationPropertiesInternalAccessor(_ret_val);
                }
                global::Microsoft.VisualStudio.Editors.UnitTests.Microsoft_VisualStudio_Editors_MyApplication_IMyApplicationPropertiesInternalAccessor ret = _ret;
                return ret;
            }
        }

        internal void Dispose(bool disposing)
        {
            object[] args = new object[] {
                disposing};
            m_privateObject.Invoke("Dispose", new System.Type[] {
                    typeof(bool)}, args);
        }

        internal void InitializeComponent()
        {
            object[] args = new object[0];
            m_privateObject.Invoke("InitializeComponent", new System.Type[0], args);
        }

        internal static global::Microsoft.VisualStudio.Editors.PropertyPages.PropPageUserControlBase CreatePrivate()
        {
            object[] args = new object[0];
            Microsoft.VisualStudio.TestTools.UnitTesting.PrivateObject priv_obj = new Microsoft.VisualStudio.TestTools.UnitTesting.PrivateObject(EDITORS_ASSEMBLY, "Microsoft.VisualStudio.Editors.PropertyPages.ApplicationPropPageVBWinForms", new System.Type[0], args);
            return ((global::Microsoft.VisualStudio.Editors.PropertyPages.PropPageUserControlBase)(priv_obj.Target));
        }

        internal void SetCommonControls()
        {
            object[] args = new object[0];
            m_privateObject.Invoke("SetCommonControls", new System.Type[0], args);
        }

        internal void PopulateApplicationTypes()
        {
            object[] args = new object[0];
            m_privateObject.Invoke("PopulateApplicationTypes", new System.Type[0], args);
        }

        internal void CleanupCOMReferences()
        {
            object[] args = new object[0];
            m_privateObject.Invoke("CleanupCOMReferences", new System.Type[0], args);
        }

        internal bool TryRunCustomToolForMyApplication()
        {
            object[] args = new object[0];
            bool ret = ((bool)(m_privateObject.Invoke("TryRunCustomToolForMyApplication", new System.Type[0], args)));
            return ret;
        }

        internal bool MyApplicationGet(global::System.Windows.Forms.Control control, global::System.ComponentModel.PropertyDescriptor prop, ref object value)
        {
            object[] args = new object[] {
                control,
                prop,
                value};
            bool ret = ((bool)(m_privateObject.Invoke("MyApplicationGet", new System.Type[] {
                    typeof(global::System.Windows.Forms.Control),
                    typeof(global::System.ComponentModel.PropertyDescriptor),
                    typeof(object).MakeByRefType()}, args)));
            value = ((object)(args[2]));
            return ret;
        }

        internal bool MyApplicationSet(global::System.Windows.Forms.Control control, global::System.ComponentModel.PropertyDescriptor prop, object value)
        {
            object[] args = new object[] {
                control,
                prop,
                value};
            bool ret = ((bool)(m_privateObject.Invoke("MyApplicationSet", new System.Type[] {
                    typeof(global::System.Windows.Forms.Control),
                    typeof(global::System.ComponentModel.PropertyDescriptor),
                    typeof(object)}, args)));
            return ret;
        }

        internal bool MyTypeGet(global::System.Windows.Forms.Control control, global::System.ComponentModel.PropertyDescriptor prop, ref object value)
        {
            object[] args = new object[] {
                control,
                prop,
                value};
            bool ret = ((bool)(m_privateObject.Invoke("MyTypeGet", new System.Type[] {
                    typeof(global::System.Windows.Forms.Control),
                    typeof(global::System.ComponentModel.PropertyDescriptor),
                    typeof(object).MakeByRefType()}, args)));
            value = ((object)(args[2]));
            return ret;
        }

        internal bool MyTypeSet(global::System.Windows.Forms.Control control, global::System.ComponentModel.PropertyDescriptor prop, object value)
        {
            object[] args = new object[] {
                control,
                prop,
                value};
            bool ret = ((bool)(m_privateObject.Invoke("MyTypeSet", new System.Type[] {
                    typeof(global::System.Windows.Forms.Control),
                    typeof(global::System.ComponentModel.PropertyDescriptor),
                    typeof(object)}, args)));
            return ret;
        }

        internal bool OutputTypeGet(global::System.Windows.Forms.Control control, global::System.ComponentModel.PropertyDescriptor prop, ref object value)
        {
            object[] args = new object[] {
                control,
                prop,
                value};
            bool ret = ((bool)(m_privateObject.Invoke("OutputTypeGet", new System.Type[] {
                    typeof(global::System.Windows.Forms.Control),
                    typeof(global::System.ComponentModel.PropertyDescriptor),
                    typeof(object).MakeByRefType()}, args)));
            value = ((object)(args[2]));
            return ret;
        }

        internal bool OutputTypeSet(global::System.Windows.Forms.Control control, global::System.ComponentModel.PropertyDescriptor prop, object value)
        {
            object[] args = new object[] {
                control,
                prop,
                value};
            bool ret = ((bool)(m_privateObject.Invoke("OutputTypeSet", new System.Type[] {
                    typeof(global::System.Windows.Forms.Control),
                    typeof(global::System.ComponentModel.PropertyDescriptor),
                    typeof(object)}, args)));
            return ret;
        }

        internal void UpdateApplicationTypeUI()
        {
            object[] args = new object[0];
            m_privateObject.Invoke("UpdateApplicationTypeUI", new System.Type[0], args);
        }

        internal bool CustomSubMainGet(global::System.Windows.Forms.Control control, global::System.ComponentModel.PropertyDescriptor prop, ref object value)
        {
            object[] args = new object[] {
                control,
                prop,
                value};
            bool ret = ((bool)(m_privateObject.Invoke("CustomSubMainGet", new System.Type[] {
                    typeof(global::System.Windows.Forms.Control),
                    typeof(global::System.ComponentModel.PropertyDescriptor),
                    typeof(object).MakeByRefType()}, args)));
            value = ((object)(args[2]));
            return ret;
        }

        internal bool CustomSubMainSet(global::System.Windows.Forms.Control control, global::System.ComponentModel.PropertyDescriptor prop, object value)
        {
            object[] args = new object[] {
                control,
                prop,
                value};
            bool ret = ((bool)(m_privateObject.Invoke("CustomSubMainSet", new System.Type[] {
                    typeof(global::System.Windows.Forms.Control),
                    typeof(global::System.ComponentModel.PropertyDescriptor),
                    typeof(object)}, args)));
            return ret;
        }

        internal bool IsClassLibrary(global::Microsoft.VisualStudio.Editors.UnitTests.Microsoft_VisualStudio_Editors_MyApplication_ApplicationTypesAccessor AppType)
        {
            object AppType_val_target = null;
            if ((AppType != null))
            {
                AppType_val_target = AppType.Target;
            }
            object[] args = new object[] {
                AppType_val_target};
            Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType target = new Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType(EDITORS_ASSEMBLY, "Microsoft.VisualStudio.Editors.MyApplication.ApplicationTypes");
            bool ret = ((bool)(m_privateObject.Invoke("IsClassLibrary", new System.Type[] {
                    target.ReferencedType}, args)));
            return ret;
        }

        internal void EnableUseApplicationFrameworkCheckBox(bool Enable)
        {
            object[] args = new object[] {
                Enable};
            m_privateObject.Invoke("EnableUseApplicationFrameworkCheckBox", new System.Type[] {
                    typeof(bool)}, args);
        }

        internal bool StartupObjectGet(global::System.Windows.Forms.Control control, global::System.ComponentModel.PropertyDescriptor prop, ref object value)
        {
            object[] args = new object[] {
                control,
                prop,
                value};
            bool ret = ((bool)(m_privateObject.Invoke("StartupObjectGet", new System.Type[] {
                    typeof(global::System.Windows.Forms.Control),
                    typeof(global::System.ComponentModel.PropertyDescriptor),
                    typeof(object).MakeByRefType()}, args)));
            value = ((object)(args[2]));
            return ret;
        }

        internal bool StartupObjectSet(global::System.Windows.Forms.Control control, global::System.ComponentModel.PropertyDescriptor prop, object value)
        {
            object[] args = new object[] {
                control,
                prop,
                value};
            bool ret = ((bool)(m_privateObject.Invoke("StartupObjectSet", new System.Type[] {
                    typeof(global::System.Windows.Forms.Control),
                    typeof(global::System.ComponentModel.PropertyDescriptor),
                    typeof(object)}, args)));
            return ret;
        }

        internal bool MainFormNoRootNSSet(global::System.Windows.Forms.Control conrol, global::System.ComponentModel.PropertyDescriptor prop, object value)
        {
            object[] args = new object[] {
                conrol,
                prop,
                value};
            bool ret = ((bool)(m_privateObject.Invoke("MainFormNoRootNSSet", new System.Type[] {
                    typeof(global::System.Windows.Forms.Control),
                    typeof(global::System.ComponentModel.PropertyDescriptor),
                    typeof(object)}, args)));
            return ret;
        }

        internal void PopulateControlSet(global::VSLangProj.prjOutputType OutputType)
        {
            object[] args = new object[] {
                OutputType};
            m_privateObject.Invoke("PopulateControlSet", new System.Type[] {
                    typeof(global::VSLangProj.prjOutputType)}, args);
        }

        internal void PopulateControlSet(global::Microsoft.VisualStudio.Editors.UnitTests.Microsoft_VisualStudio_Editors_MyApplication_ApplicationTypesAccessor AppType)
        {
            object AppType_val_target = null;
            if ((AppType != null))
            {
                AppType_val_target = AppType.Target;
            }
            object[] args = new object[] {
                AppType_val_target};
            Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType target = new Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType(EDITORS_ASSEMBLY, "Microsoft.VisualStudio.Editors.MyApplication.ApplicationTypes");
            m_privateObject.Invoke("PopulateControlSet", new System.Type[] {
                    target.ReferencedType}, args);
        }

        internal void PopulateSplashScreenList(bool PopulateDropdown)
        {
            object[] args = new object[] {
                PopulateDropdown};
            m_privateObject.Invoke("PopulateSplashScreenList", new System.Type[] {
                    typeof(bool)}, args);
        }

        internal bool MyApplicationFrameworkSupported()
        {
            object[] args = new object[0];
            bool ret = ((bool)(m_privateObject.Invoke("MyApplicationFrameworkSupported", new System.Type[0], args)));
            return ret;
        }

        internal bool MyApplicationFrameworkEnabled()
        {
            object[] args = new object[0];
            bool ret = ((bool)(m_privateObject.Invoke("MyApplicationFrameworkEnabled", new System.Type[0], args)));
            return ret;
        }

        internal string[] GetFormEntryPoints(bool IncludeSplashScreen)
        {
            object[] args = new object[] {
                IncludeSplashScreen};
            string[] ret = ((string[])(m_privateObject.Invoke("GetFormEntryPoints", new System.Type[] {
                    typeof(bool)}, args)));
            return ret;
        }

        internal void PopulateStartupObject(bool StartUpObjectSupported, bool PopulateDropdown)
        {
            object[] args = new object[] {
                StartUpObjectSupported,
                PopulateDropdown};
            m_privateObject.Invoke("PopulateStartupObject", new System.Type[] {
                    typeof(bool),
                    typeof(bool)}, args);
        }

        internal string AddCurrentRootNamespace(string ClassName)
        {
            object[] args = new object[] {
                ClassName};
            string ret = ((string)(m_privateObject.Invoke("AddCurrentRootNamespace", new System.Type[] {
                    typeof(string)}, args)));
            return ret;
        }

        internal string RemoveCurrentRootNamespace(string value)
        {
            object[] args = new object[] {
                value};
            string ret = ((string)(m_privateObject.Invoke("RemoveCurrentRootNamespace", new System.Type[] {
                    typeof(string)}, args)));
            return ret;
        }

        internal void EnableControlSet(global::Microsoft.VisualStudio.Editors.UnitTests.Microsoft_VisualStudio_Editors_MyApplication_ApplicationTypesAccessor AppType)
        {
            object AppType_val_target = null;
            if ((AppType != null))
            {
                AppType_val_target = AppType.Target;
            }
            object[] args = new object[] {
                AppType_val_target};
            Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType target = new Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType(EDITORS_ASSEMBLY, "Microsoft.VisualStudio.Editors.MyApplication.ApplicationTypes");
            m_privateObject.Invoke("EnableControlSet", new System.Type[] {
                    target.ReferencedType}, args);
        }

        internal void EnableControlSet(global::VSLangProj.prjOutputType OutputType)
        {
            object[] args = new object[] {
                OutputType};
            m_privateObject.Invoke("EnableControlSet", new System.Type[] {
                    typeof(global::VSLangProj.prjOutputType)}, args);
        }

        internal void EnableMyApplicationControlSet()
        {
            object[] args = new object[0];
            m_privateObject.Invoke("EnableMyApplicationControlSet", new System.Type[0], args);
        }

        internal string GetF1HelpKeyword()
        {
            object[] args = new object[0];
            string ret = ((string)(m_privateObject.Invoke("GetF1HelpKeyword", new System.Type[0], args)));
            return ret;
        }

        internal void PreInitPage()
        {
            object[] args = new object[0];
            m_privateObject.Invoke("PreInitPage", new System.Type[0], args);
        }

        internal void PostInitPage()
        {
            object[] args = new object[0];
            m_privateObject.Invoke("PostInitPage", new System.Type[0], args);
        }

        internal global::System.ComponentModel.PropertyDescriptor GetUserDefinedPropertyDescriptor(string PropertyName)
        {
            object[] args = new object[] {
                PropertyName};
            global::System.ComponentModel.PropertyDescriptor ret = ((global::System.ComponentModel.PropertyDescriptor)(m_privateObject.Invoke("GetUserDefinedPropertyDescriptor", new System.Type[] {
                    typeof(string)}, args)));
            return ret;
        }

        internal bool ReadUserDefinedProperty(string PropertyName, ref object Value)
        {
            object[] args = new object[] {
                PropertyName,
                Value};
            bool ret = ((bool)(m_privateObject.Invoke("ReadUserDefinedProperty", new System.Type[] {
                    typeof(string),
                    typeof(object).MakeByRefType()}, args)));
            Value = ((object)(args[1]));
            return ret;
        }

        internal bool WriteUserDefinedProperty(string PropertyName, object Value)
        {
            object[] args = new object[] {
                PropertyName,
                Value};
            bool ret = ((bool)(m_privateObject.Invoke("WriteUserDefinedProperty", new System.Type[] {
                    typeof(string),
                    typeof(object)}, args)));
            return ret;
        }

        internal string GetMyTypeFromUI()
        {
            object[] args = new object[0];
            string ret = ((string)(m_privateObject.Invoke("GetMyTypeFromUI", new System.Type[0], args)));
            return ret;
        }

        internal string GetMyTypeFromProject()
        {
            object[] args = new object[0];
            string ret = ((string)(m_privateObject.Invoke("GetMyTypeFromProject", new System.Type[0], args)));
            return ret;
        }

        internal bool MyTypeDisabled()
        {
            object[] args = new object[0];
            bool ret = ((bool)(m_privateObject.Invoke("MyTypeDisabled", new System.Type[0], args)));
            return ret;
        }

        internal void SetMyType(global::Microsoft.VisualStudio.Editors.UnitTests.Microsoft_VisualStudio_Editors_MyApplication_ApplicationTypesAccessor AppType, bool ReadyToApply)
        {
            object AppType_val_target = null;
            if ((AppType != null))
            {
                AppType_val_target = AppType.Target;
            }
            object[] args = new object[] {
                AppType_val_target,
                ReadyToApply};
            Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType target = new Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType(EDITORS_ASSEMBLY, "Microsoft.VisualStudio.Editors.MyApplication.ApplicationTypes");
            m_privateObject.Invoke("SetMyType", new System.Type[] {
                    target.ReferencedType,
                    typeof(bool)}, args);
        }

        internal string MyTypeFromApplicationType(global::Microsoft.VisualStudio.Editors.UnitTests.Microsoft_VisualStudio_Editors_MyApplication_ApplicationTypesAccessor AppType, bool CustomSubMain)
        {
            object AppType_val_target = null;
            if ((AppType != null))
            {
                AppType_val_target = AppType.Target;
            }
            object[] args = new object[] {
                AppType_val_target,
                CustomSubMain};
            Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType target = new Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType(EDITORS_ASSEMBLY, "Microsoft.VisualStudio.Editors.MyApplication.ApplicationTypes");
            string ret = ((string)(m_privateObject.Invoke("MyTypeFromApplicationType", new System.Type[] {
                    target.ReferencedType,
                    typeof(bool)}, args)));
            return ret;
        }

        internal void SetStartupObjectLabelText()
        {
            object[] args = new object[0];
            m_privateObject.Invoke("SetStartupObjectLabelText", new System.Type[0], args);
        }

        internal void AssemblyInfoButton_Click(object sender, global::System.EventArgs e)
        {
            object[] args = new object[] {
                sender,
                e};
            m_privateObject.Invoke("AssemblyInfoButton_Click", new System.Type[] {
                    typeof(object),
                    typeof(global::System.EventArgs)}, args);
        }

        internal void ComboBoxes_DropDown(object sender, global::System.EventArgs e)
        {
            object[] args = new object[] {
                sender,
                e};
            m_privateObject.Invoke("ComboBoxes_DropDown", new System.Type[] {
                    typeof(object),
                    typeof(global::System.EventArgs)}, args);
        }

        internal global::Microsoft.VisualStudio.Editors.UnitTests.Microsoft_VisualStudio_Editors_MyApplication_ApplicationTypesAccessor GetAppTypeFromUI()
        {
            object[] args = new object[0];
            object _ret_val = m_privateObject.Invoke("GetAppTypeFromUI", new System.Type[0], args);
            global::Microsoft.VisualStudio.Editors.UnitTests.Microsoft_VisualStudio_Editors_MyApplication_ApplicationTypesAccessor _ret = null;
            if ((_ret_val != null))
            {
                _ret = new global::Microsoft.VisualStudio.Editors.UnitTests.Microsoft_VisualStudio_Editors_MyApplication_ApplicationTypesAccessor(_ret_val);
            }
            global::Microsoft.VisualStudio.Editors.UnitTests.Microsoft_VisualStudio_Editors_MyApplication_ApplicationTypesAccessor ret = _ret;
            return ret;
        }

        internal void AddRequiredReferences()
        {
            object[] args = new object[0];
            m_privateObject.Invoke("AddRequiredReferences", new System.Type[0], args);
        }

        internal void ApplicationTypeComboBox_SelectionChangeCommitted(object sender, global::System.EventArgs e)
        {
            object[] args = new object[] {
                sender,
                e};
            m_privateObject.Invoke("ApplicationTypeComboBox_SelectionChangeCommitted", new System.Type[] {
                    typeof(object),
                    typeof(global::System.EventArgs)}, args);
        }

        internal void StartupObjectComboBox_SelectionChangeCommitted(object sender, global::System.EventArgs e)
        {
            object[] args = new object[] {
                sender,
                e};
            m_privateObject.Invoke("StartupObjectComboBox_SelectionChangeCommitted", new System.Type[] {
                    typeof(object),
                    typeof(global::System.EventArgs)}, args);
        }

        internal void ViewCodeButton_Click(object sender, global::System.EventArgs e)
        {
            object[] args = new object[] {
                sender,
                e};
            m_privateObject.Invoke("ViewCodeButton_Click", new System.Type[] {
                    typeof(object),
                    typeof(global::System.EventArgs)}, args);
        }

        internal void SplashScreenComboBox_DropDown(object sender, global::System.EventArgs e)
        {
            object[] args = new object[] {
                sender,
                e};
            m_privateObject.Invoke("SplashScreenComboBox_DropDown", new System.Type[] {
                    typeof(object),
                    typeof(global::System.EventArgs)}, args);
        }

        internal void StartupObjectComboBox_DropDown(object sender, global::System.EventArgs e)
        {
            object[] args = new object[] {
                sender,
                e};
            m_privateObject.Invoke("StartupObjectComboBox_DropDown", new System.Type[] {
                    typeof(object),
                    typeof(global::System.EventArgs)}, args);
        }

        internal bool MySettingsSupported()
        {
            object[] args = new object[0];
            bool ret = ((bool)(m_privateObject.Invoke("MySettingsSupported", new System.Type[0], args)));
            return ret;
        }

        internal void IconCombobox_DropDown(object sender, global::System.EventArgs e)
        {
            object[] args = new object[] {
                sender,
                e};
            m_privateObject.Invoke("IconCombobox_DropDown", new System.Type[] {
                    typeof(object),
                    typeof(global::System.EventArgs)}, args);
        }

        internal void IconCombobox_DropDownClosed(object sender, global::System.EventArgs e)
        {
            object[] args = new object[] {
                sender,
                e};
            m_privateObject.Invoke("IconCombobox_DropDownClosed", new System.Type[] {
                    typeof(object),
                    typeof(global::System.EventArgs)}, args);
        }

        internal void IconCombobox_SelectionChangeCommitted(object sender, global::System.EventArgs e)
        {
            object[] args = new object[] {
                sender,
                e};
            m_privateObject.Invoke("IconCombobox_SelectionChangeCommitted", new System.Type[] {
                    typeof(object),
                    typeof(global::System.EventArgs)}, args);
        }

        internal void UseApplicationFrameworkCheckBox_CheckedChanged(object sender, global::System.EventArgs e)
        {
            object[] args = new object[] {
                sender,
                e};
            m_privateObject.Invoke("UseApplicationFrameworkCheckBox_CheckedChanged", new System.Type[] {
                    typeof(object),
                    typeof(global::System.EventArgs)}, args);
        }

        internal bool StartUpObjectSupported()
        {
            object[] args = new object[0];
            bool ret = ((bool)(m_privateObject.Invoke("StartUpObjectSupported", new System.Type[0], args)));
            return ret;
        }

        internal bool StartUpObjectSupported(global::VSLangProj.prjOutputType OutputType)
        {
            object[] args = new object[] {
                OutputType};
            bool ret = ((bool)(m_privateObject.Invoke("StartUpObjectSupported", new System.Type[] {
                    typeof(global::VSLangProj.prjOutputType)}, args)));
            return ret;
        }

        internal bool StartUpObjectSupported(global::Microsoft.VisualStudio.Editors.UnitTests.Microsoft_VisualStudio_Editors_MyApplication_ApplicationTypesAccessor AppType)
        {
            object AppType_val_target = null;
            if ((AppType != null))
            {
                AppType_val_target = AppType.Target;
            }
            object[] args = new object[] {
                AppType_val_target};
            Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType target = new Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType(EDITORS_ASSEMBLY, "Microsoft.VisualStudio.Editors.MyApplication.ApplicationTypes");
            bool ret = ((bool)(m_privateObject.Invoke("StartUpObjectSupported", new System.Type[] {
                    target.ReferencedType}, args)));
            return ret;
        }

        internal bool IsNoneText(string Value)
        {
            object[] args = new object[] {
                Value};
            bool ret = ((bool)(m_privateObject.Invoke("IsNoneText", new System.Type[] {
                    typeof(string)}, args)));
            return ret;
        }

        internal void MyApplicationProperties_PropertyChanged(object sender, global::System.ComponentModel.PropertyChangedEventArgs e)
        {
            object[] args = new object[] {
                sender,
                e};
            m_privateObject.Invoke("MyApplicationProperties_PropertyChanged", new System.Type[] {
                    typeof(object),
                    typeof(global::System.ComponentModel.PropertyChangedEventArgs)}, args);
        }
    }
    [System.Diagnostics.DebuggerStepThrough()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TestTools.UnitTestGeneration", "1.0.0.0")]
    internal class Microsoft_VisualStudio_Editors_MyApplication_IMyApplicationPropertiesInternalAccessor : BaseAccessor
    {

        protected static Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType m_privateType = new Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType(EDITORS_ASSEMBLY, "Microsoft.VisualStudio.Editors.MyApplication.IMyApplicationPropertiesInternal");

        internal Microsoft_VisualStudio_Editors_MyApplication_IMyApplicationPropertiesInternalAccessor(object target)
            :
                base(target, m_privateType)
        {
        }

        internal bool CustomSubMainRaw
        {
            get
            {
                bool ret = ((bool)(m_privateObject.GetProperty("CustomSubMainRaw")));
                return ret;
            }
        }

        internal string SplashScreenNoRootNS
        {
            get
            {
                string ret = ((string)(m_privateObject.GetProperty("SplashScreenNoRootNS")));
                return ret;
            }
            set
            {
                m_privateObject.SetProperty("SplashScreenNoRootNS", value);
            }
        }

        internal string MainFormNoRootNamespace
        {
            get
            {
                string ret = ((string)(m_privateObject.GetProperty("MainFormNoRootNamespace")));
                return ret;
            }
            set
            {
                m_privateObject.SetProperty("MainFormNoRootNamespace", value);
            }
        }

        internal void RunCustomTool()
        {
            object[] args = new object[0];
            m_privateObject.Invoke("RunCustomTool", new System.Type[0], args);
        }

        internal void NavigateToEvents()
        {
            object[] args = new object[0];
            m_privateObject.Invoke("NavigateToEvents", new System.Type[0], args);
        }
    }
    [System.Diagnostics.DebuggerStepThrough()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TestTools.UnitTestGeneration", "1.0.0.0")]
    internal class Microsoft_VisualStudio_Editors_ResourceEditor_ResourceFileAccessor : BaseAccessor
    {

        protected static Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType m_privateType = new Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType(EDITORS_ASSEMBLY, "Microsoft.VisualStudio.Editors.ResourceEditor.ResourceFile");

        internal Microsoft_VisualStudio_Editors_ResourceEditor_ResourceFileAccessor(object target)
            :
                base(target, m_privateType)
        {
        }

        /*
        internal global::System.ComponentModel.Design.IComponentChangeService m_ComponentChangeService {
            get {
                global::System.ComponentModel.Design.IComponentChangeService ret = ((global::System.ComponentModel.Design.IComponentChangeService)(m_privateObject.GetFieldOrProperty("m_ComponentChangeService")));
                return ret;
            }
            set {
                m_privateObject.SetFieldOrProperty("m_ComponentChangeService", value);
            }
        }
    
        internal global::System.Collections.Hashtable m_ResourcesHash {
            get {
                global::System.Collections.Hashtable ret = ((global::System.Collections.Hashtable)(m_privateObject.GetFieldOrProperty("m_ResourcesHash")));
                return ret;
            }
            set {
                m_privateObject.SetFieldOrProperty("m_ResourcesHash", value);
            }
        }
    
        internal global::System.Collections.ArrayList m_MetadataList {
            get {
                global::System.Collections.ArrayList ret = ((global::System.Collections.ArrayList)(m_privateObject.GetFieldOrProperty("m_MetadataList")));
                return ret;
            }
            set {
                m_privateObject.SetFieldOrProperty("m_MetadataList", value);
            }
        }
    
        internal global::Microsoft.VisualStudio.Editors.UnitTests.Microsoft_VisualStudio_Editors_ResourceEditor_ResourceEditorRootComponentAccessor m_RootComponent {
            get {
                object _ret_val = m_privateObject.GetFieldOrProperty("m_RootComponent");
                global::Microsoft.VisualStudio.Editors.UnitTests.Microsoft_VisualStudio_Editors_ResourceEditor_ResourceEditorRootComponentAccessor _ret = null;
                if ((_ret_val != null)) {
                    _ret = new global::Microsoft.VisualStudio.Editors.UnitTests.Microsoft_VisualStudio_Editors_ResourceEditor_ResourceEditorRootComponentAccessor(_ret_val);
                }
                global::Microsoft.VisualStudio.Editors.UnitTests.Microsoft_VisualStudio_Editors_ResourceEditor_ResourceEditorRootComponentAccessor ret = _ret;
                return ret;
            }
            set {
                m_privateObject.SetFieldOrProperty("m_RootComponent", value);
            }
        }
    
        internal global::Microsoft.VisualStudio.Shell.ErrorListProvider m_ErrorListProvider {
            get {
                global::Microsoft.VisualStudio.Shell.ErrorListProvider ret = ((global::Microsoft.VisualStudio.Shell.ErrorListProvider)(m_privateObject.GetFieldOrProperty("m_ErrorListProvider")));
                return ret;
            }
            set {
                m_privateObject.SetFieldOrProperty("m_ErrorListProvider", value);
            }
        }
    
        internal global::System.Threading.Thread m_MainThread {
            get {
                global::System.Threading.Thread ret = ((global::System.Threading.Thread)(m_privateObject.GetFieldOrProperty("m_MainThread")));
                return ret;
            }
            set {
                m_privateObject.SetFieldOrProperty("m_MainThread", value);
            }
        }
    
        internal global::System.Collections.Hashtable m_ResourceErrorsHash {
            get {
                global::System.Collections.Hashtable ret = ((global::System.Collections.Hashtable)(m_privateObject.GetFieldOrProperty("m_ResourceErrorsHash")));
                return ret;
            }
            set {
                m_privateObject.SetFieldOrProperty("m_ResourceErrorsHash", value);
            }
        }
    
        internal global::System.Collections.ArrayList m_ResourcesToDelayCheckForErrors {
            get {
                global::System.Collections.ArrayList ret = ((global::System.Collections.ArrayList)(m_privateObject.GetFieldOrProperty("m_ResourcesToDelayCheckForErrors")));
                return ret;
            }
            set {
                m_privateObject.SetFieldOrProperty("m_ResourcesToDelayCheckForErrors", value);
            }
        }
    
        internal bool m_DelayCheckSuspended {
            get {
                bool ret = ((bool)(m_privateObject.GetFieldOrProperty("m_DelayCheckSuspended")));
                return ret;
            }
            set {
                m_privateObject.SetFieldOrProperty("m_DelayCheckSuspended", value);
            }
        }
    
        internal bool m_AddingRemovingResourcesInternally {
            get {
                bool ret = ((bool)(m_privateObject.GetFieldOrProperty("m_AddingRemovingResourcesInternally")));
                return ret;
            }
            set {
                m_privateObject.SetFieldOrProperty("m_AddingRemovingResourcesInternally", value);
            }
        }
    
        internal string m_BasePath {
            get {
                string ret = ((string)(m_privateObject.GetFieldOrProperty("m_BasePath")));
                return ret;
            }
            set {
                m_privateObject.SetFieldOrProperty("m_BasePath", value);
            }
        }
    
        internal global::Microsoft.VisualStudio.Shell.IResXResourceService m_resxService {
            get {
                global::Microsoft.VisualStudio.Shell.IResXResourceService ret = ((global::Microsoft.VisualStudio.Shell.IResXResourceService)(m_privateObject.GetFieldOrProperty("m_resxService")));
                return ret;
            }
            set {
                m_privateObject.SetFieldOrProperty("m_resxService", value);
            }
        }
    
        internal bool m_alphabetizedOrder {
            get {
                bool ret = ((bool)(m_privateObject.GetFieldOrProperty("m_alphabetizedOrder")));
                return ret;
            }
            set {
                m_privateObject.SetFieldOrProperty("m_alphabetizedOrder", value);
            }
        }
    
        internal global::System.IServiceProvider m_ServiceProvider {
            get {
                global::System.IServiceProvider ret = ((global::System.IServiceProvider)(m_privateObject.GetFieldOrProperty("m_ServiceProvider")));
                return ret;
            }
            set {
                m_privateObject.SetFieldOrProperty("m_ServiceProvider", value);
            }
        }
    
        internal bool m_delayFlushAndRunCustomToolQueued {
            get {
                bool ret = ((bool)(m_privateObject.GetFieldOrProperty("m_delayFlushAndRunCustomToolQueued")));
                return ret;
            }
            set {
                m_privateObject.SetFieldOrProperty("m_delayFlushAndRunCustomToolQueued", value);
            }
        }
    
        internal bool m_IsLoadingResourceFile {
            get {
                bool ret = ((bool)(m_privateObject.GetFieldOrProperty("m_IsLoadingResourceFile")));
                return ret;
            }
            set {
                m_privateObject.SetFieldOrProperty("m_IsLoadingResourceFile", value);
            }
        }
    
        internal bool m_InBatchAdding {
            get {
                bool ret = ((bool)(m_privateObject.GetFieldOrProperty("m_InBatchAdding")));
                return ret;
            }
            set {
                m_privateObject.SetFieldOrProperty("m_InBatchAdding", value);
            }
        }
    
        internal global::System.IServiceProvider ServiceProvider {
            get {
                global::System.IServiceProvider ret = ((global::System.IServiceProvider)(m_privateObject.GetProperty("ServiceProvider")));
                return ret;
            }
        }
    
        internal global::System.ComponentModel.Design.IComponentChangeService ComponentChangeService {
            get {
                global::System.ComponentModel.Design.IComponentChangeService ret = ((global::System.ComponentModel.Design.IComponentChangeService)(m_privateObject.GetProperty("ComponentChangeService")));
                return ret;
            }
            set {
                m_privateObject.SetProperty("ComponentChangeService", value);
            }
        }
    
        internal global::Microsoft.VisualStudio.Editors.UnitTests.Microsoft_VisualStudio_Editors_ResourceEditor_ResourceEditorViewAccessor View {
            get {
                object _ret_val = m_privateObject.GetProperty("View");
                global::Microsoft.VisualStudio.Editors.UnitTests.Microsoft_VisualStudio_Editors_ResourceEditor_ResourceEditorViewAccessor _ret = null;
                if ((_ret_val != null)) {
                    _ret = new global::Microsoft.VisualStudio.Editors.UnitTests.Microsoft_VisualStudio_Editors_ResourceEditor_ResourceEditorViewAccessor(_ret_val);
                }
                global::Microsoft.VisualStudio.Editors.UnitTests.Microsoft_VisualStudio_Editors_ResourceEditor_ResourceEditorViewAccessor ret = _ret;
                return ret;
            }
        }
    
        internal global::Microsoft.VisualStudio.Editors.UnitTests.Microsoft_VisualStudio_Editors_ResourceEditor_ResourceEditorRootComponentAccessor RootComponent {
            get {
                object _ret_val = m_privateObject.GetProperty("RootComponent");
                global::Microsoft.VisualStudio.Editors.UnitTests.Microsoft_VisualStudio_Editors_ResourceEditor_ResourceEditorRootComponentAccessor _ret = null;
                if ((_ret_val != null)) {
                    _ret = new global::Microsoft.VisualStudio.Editors.UnitTests.Microsoft_VisualStudio_Editors_ResourceEditor_ResourceEditorRootComponentAccessor(_ret_val);
                }
                global::Microsoft.VisualStudio.Editors.UnitTests.Microsoft_VisualStudio_Editors_ResourceEditor_ResourceEditorRootComponentAccessor ret = _ret;
                return ret;
            }
        }
    
        internal global::System.ComponentModel.Design.IDesignerHost DesignerHost {
            get {
                global::System.ComponentModel.Design.IDesignerHost ret = ((global::System.ComponentModel.Design.IDesignerHost)(m_privateObject.GetProperty("DesignerHost")));
                return ret;
            }
        }
    
        internal global::System.Collections.Hashtable ResourcesHashTable {
            get {
                global::System.Collections.Hashtable ret = ((global::System.Collections.Hashtable)(m_privateObject.GetProperty("ResourcesHashTable")));
                return ret;
            }
        }
    
        internal string BasePath {
            get {
                string ret = ((string)(m_privateObject.GetProperty("BasePath")));
                return ret;
            }
        }
    
        internal global::Microsoft.VisualStudio.Shell.ErrorListProvider ErrorListProvider {
            get {
                global::Microsoft.VisualStudio.Shell.ErrorListProvider ret = ((global::Microsoft.VisualStudio.Shell.ErrorListProvider)(m_privateObject.GetProperty("ErrorListProvider")));
                return ret;
            }
        }
    
        internal bool IsInsideDeviceProject {
            get {
                bool ret = ((bool)(m_privateObject.GetProperty("IsInsideDeviceProject")));
                return ret;
            }
        }
    
        internal static object CreatePrivate(global::Microsoft.VisualStudio.Editors.UnitTests.Microsoft_VisualStudio_Editors_ResourceEditor_ResourceEditorRootComponentAccessor RootComponent, global::System.IServiceProvider ServiceProvider, string BasePath) {
            object RootComponent_val_target = null;
            if ((RootComponent != null)) {
                RootComponent_val_target = RootComponent.Target;
            }
            object[] args = new object[] {
                    RootComponent_val_target,
                    ServiceProvider,
                    BasePath};
            Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType target = new Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType(EDITORS_ASSEMBLY, "Microsoft.VisualStudio.Editors.ResourceEditor.ResourceEditorRootComponent");
            Microsoft.VisualStudio.TestTools.UnitTesting.PrivateObject priv_obj = new Microsoft.VisualStudio.TestTools.UnitTesting.PrivateObject(EDITORS_ASSEMBLY, "Microsoft.VisualStudio.Editors.ResourceEditor.ResourceFile", new System.Type[] {
                        target.ReferencedType,
                        typeof(global::System.IServiceProvider),
                        typeof(string)}, args);
            return priv_obj.Target;
        }
    
        internal void Dispose() {
            object[] args = new object[0];
            m_privateObject.Invoke("Dispose", new System.Type[0], args);
        }
    
        internal void Dispose(bool Disposing) {
            object[] args = new object[] {
                    Disposing};
            m_privateObject.Invoke("Dispose", new System.Type[] {
                        typeof(bool)}, args);
        }
    
        internal string GetUniqueName(global::Microsoft.VisualStudio.Editors.UnitTests.Microsoft_VisualStudio_Editors_ResourceEditor_ResourceTypeEditorAccessor TypeEditor) {
            object TypeEditor_val_target = null;
            if ((TypeEditor != null)) {
                TypeEditor_val_target = TypeEditor.Target;
            }
            object[] args = new object[] {
                    TypeEditor_val_target};
            Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType target = new Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType(EDITORS_ASSEMBLY, "Microsoft.VisualStudio.Editors.ResourceEditor.ResourceTypeEditor");
            string ret = ((string)(m_privateObject.Invoke("GetUniqueName", new System.Type[] {
                        target.ReferencedType}, args)));
            return ret;
        }
    
        internal string GetUniqueName(string NameFormat) {
            object[] args = new object[] {
                    NameFormat};
            string ret = ((string)(m_privateObject.Invoke("GetUniqueName", new System.Type[] {
                        typeof(string)}, args)));
            return ret;
        }
    
        internal bool Contains(string Name) {
            object[] args = new object[] {
                    Name};
            bool ret = ((bool)(m_privateObject.Invoke("Contains", new System.Type[] {
                        typeof(string)}, args)));
            return ret;
        }
    
        internal bool Contains(global::Microsoft.VisualStudio.Editors.UnitTests.Microsoft_VisualStudio_Editors_ResourceEditor_ResourceAccessor Resource) {
            object Resource_val_target = null;
            if ((Resource != null)) {
                Resource_val_target = Resource.Target;
            }
            object[] args = new object[] {
                    Resource_val_target};
            Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType target = new Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType(EDITORS_ASSEMBLY, "Microsoft.VisualStudio.Editors.ResourceEditor.Resource");
            bool ret = ((bool)(m_privateObject.Invoke("Contains", new System.Type[] {
                        target.ReferencedType}, args)));
            return ret;
        }
    
        internal global::Microsoft.VisualStudio.Editors.UnitTests.Microsoft_VisualStudio_Editors_ResourceEditor_ResourceAccessor FindResource(string Name) {
            object[] args = new object[] {
                    Name};
            object _ret_val = m_privateObject.Invoke("FindResource", new System.Type[] {
                        typeof(string)}, args);
            global::Microsoft.VisualStudio.Editors.UnitTests.Microsoft_VisualStudio_Editors_ResourceEditor_ResourceAccessor _ret = null;
            if ((_ret_val != null)) {
                _ret = new global::Microsoft.VisualStudio.Editors.UnitTests.Microsoft_VisualStudio_Editors_ResourceEditor_ResourceAccessor(_ret_val);
            }
            global::Microsoft.VisualStudio.Editors.UnitTests.Microsoft_VisualStudio_Editors_ResourceEditor_ResourceAccessor ret = _ret;
            return ret;
        }
    
        internal global::Microsoft.VisualStudio.Editors.UnitTests.Microsoft_VisualStudio_Editors_ResourceEditor_ResourceAccessor FindLinkResource(string FileFullPath) {
            object[] args = new object[] {
                    FileFullPath};
            object _ret_val = m_privateObject.Invoke("FindLinkResource", new System.Type[] {
                        typeof(string)}, args);
            global::Microsoft.VisualStudio.Editors.UnitTests.Microsoft_VisualStudio_Editors_ResourceEditor_ResourceAccessor _ret = null;
            if ((_ret_val != null)) {
                _ret = new global::Microsoft.VisualStudio.Editors.UnitTests.Microsoft_VisualStudio_Editors_ResourceEditor_ResourceAccessor(_ret_val);
            }
            global::Microsoft.VisualStudio.Editors.UnitTests.Microsoft_VisualStudio_Editors_ResourceEditor_ResourceAccessor ret = _ret;
            return ret;
        }
    
        internal void AddResources(global::System.Collections.ICollection NewResources) {
            object[] args = new object[] {
                    NewResources};
            m_privateObject.Invoke("AddResources", new System.Type[] {
                        typeof(global::System.Collections.ICollection)}, args);
        }
    
        internal void AddResource(global::Microsoft.VisualStudio.Editors.UnitTests.Microsoft_VisualStudio_Editors_ResourceEditor_ResourceAccessor NewResource) {
            object NewResource_val_target = null;
            if ((NewResource != null)) {
                NewResource_val_target = NewResource.Target;
            }
            object[] args = new object[] {
                    NewResource_val_target};
            Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType target = new Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType(EDITORS_ASSEMBLY, "Microsoft.VisualStudio.Editors.ResourceEditor.Resource");
            m_privateObject.Invoke("AddResource", new System.Type[] {
                        target.ReferencedType}, args);
        }
    
        internal void RemoveResource(global::Microsoft.VisualStudio.Editors.UnitTests.Microsoft_VisualStudio_Editors_ResourceEditor_ResourceAccessor Resource, bool DisposeResource) {
            object Resource_val_target = null;
            if ((Resource != null)) {
                Resource_val_target = Resource.Target;
            }
            object[] args = new object[] {
                    Resource_val_target,
                    DisposeResource};
            Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType target = new Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType(EDITORS_ASSEMBLY, "Microsoft.VisualStudio.Editors.ResourceEditor.Resource");
            m_privateObject.Invoke("RemoveResource", new System.Type[] {
                        target.ReferencedType,
                        typeof(bool)}, args);
        }
    
        internal void ComponentChangeService_ComponentAdded(object sender, global::System.ComponentModel.Design.ComponentEventArgs e) {
            object[] args = new object[] {
                    sender,
                    e};
            m_privateObject.Invoke("ComponentChangeService_ComponentAdded", new System.Type[] {
                        typeof(object),
                        typeof(global::System.ComponentModel.Design.ComponentEventArgs)}, args);
        }
    
        internal void ComponentChangeService_ComponentRemoved(object sender, global::System.ComponentModel.Design.ComponentEventArgs e) {
            object[] args = new object[] {
                    sender,
                    e};
            m_privateObject.Invoke("ComponentChangeService_ComponentRemoved", new System.Type[] {
                        typeof(object),
                        typeof(global::System.ComponentModel.Design.ComponentEventArgs)}, args);
        }
    
        internal void RenameResource(global::Microsoft.VisualStudio.Editors.UnitTests.Microsoft_VisualStudio_Editors_ResourceEditor_ResourceAccessor Resource, string NewName) {
            object Resource_val_target = null;
            if ((Resource != null)) {
                Resource_val_target = Resource.Target;
            }
            object[] args = new object[] {
                    Resource_val_target,
                    NewName};
            Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType target = new Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType(EDITORS_ASSEMBLY, "Microsoft.VisualStudio.Editors.ResourceEditor.Resource");
            m_privateObject.Invoke("RenameResource", new System.Type[] {
                        target.ReferencedType,
                        typeof(string)}, args);
        }
    
        internal void ComponentChangeService_ComponentRename(object sender, global::System.ComponentModel.Design.ComponentRenameEventArgs e) {
            object[] args = new object[] {
                    sender,
                    e};
            m_privateObject.Invoke("ComponentChangeService_ComponentRename", new System.Type[] {
                        typeof(object),
                        typeof(global::System.ComponentModel.Design.ComponentRenameEventArgs)}, args);
        }
    
        internal void ComponentChangeService_ComponentChanged(object sender, global::System.ComponentModel.Design.ComponentChangedEventArgs e) {
            object[] args = new object[] {
                    sender,
                    e};
            m_privateObject.Invoke("ComponentChangeService_ComponentChanged", new System.Type[] {
                        typeof(object),
                        typeof(global::System.ComponentModel.Design.ComponentChangedEventArgs)}, args);
        }
    
        internal global::System.Collections.IDictionaryEnumerator GetEnumerator() {
            object[] args = new object[0];
            global::System.Collections.IDictionaryEnumerator ret = ((global::System.Collections.IDictionaryEnumerator)(m_privateObject.Invoke("GetEnumerator", new System.Type[0], args)));
            return ret;
        }
    
        internal void ReadResources(global::System.IO.TextReader TextReader) {
            object[] args = new object[] {
                    TextReader};
            m_privateObject.Invoke("ReadResources", new System.Type[] {
                        typeof(global::System.IO.TextReader)}, args);
        }
    
        internal void WriteResources(global::System.IO.TextWriter TextWriter) {
            object[] args = new object[] {
                    TextWriter};
            m_privateObject.Invoke("WriteResources", new System.Type[] {
                        typeof(global::System.IO.TextWriter)}, args);
        }
    
        internal void ReadResources(global::System.Resources.ResXResourceReader ResXReader) {
            object[] args = new object[] {
                    ResXReader};
            m_privateObject.Invoke("ReadResources", new System.Type[] {
                        typeof(global::System.Resources.ResXResourceReader)}, args);
        }
    
        internal void WriteResources(global::System.Resources.IResourceWriter ResXWriter) {
            object[] args = new object[] {
                    ResXWriter};
            m_privateObject.Invoke("WriteResources", new System.Type[] {
                        typeof(global::System.Resources.IResourceWriter)}, args);
        }
    
        internal void InvalidateResourceInView(global::Microsoft.VisualStudio.Editors.UnitTests.Microsoft_VisualStudio_Editors_ResourceEditor_ResourceAccessor Resource, bool InvalidateThumbnail) {
            object Resource_val_target = null;
            if ((Resource != null)) {
                Resource_val_target = Resource.Target;
            }
            object[] args = new object[] {
                    Resource_val_target,
                    InvalidateThumbnail};
            Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType target = new Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType(EDITORS_ASSEMBLY, "Microsoft.VisualStudio.Editors.ResourceEditor.Resource");
            m_privateObject.Invoke("InvalidateResourceInView", new System.Type[] {
                        target.ReferencedType,
                        typeof(bool)}, args);
        }
    
        internal bool ResourceHasTasks(global::Microsoft.VisualStudio.Editors.UnitTests.Microsoft_VisualStudio_Editors_ResourceEditor_ResourceAccessor Resource) {
            object Resource_val_target = null;
            if ((Resource != null)) {
                Resource_val_target = Resource.Target;
            }
            object[] args = new object[] {
                    Resource_val_target};
            Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType target = new Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType(EDITORS_ASSEMBLY, "Microsoft.VisualStudio.Editors.ResourceEditor.Resource");
            bool ret = ((bool)(m_privateObject.Invoke("ResourceHasTasks", new System.Type[] {
                        target.ReferencedType}, args)));
            return ret;
        }
    
        internal string GetResourceTaskMessage(global::Microsoft.VisualStudio.Editors.UnitTests.Microsoft_VisualStudio_Editors_ResourceEditor_ResourceAccessor Resource, global::Microsoft.VisualStudio.Editors.UnitTests.Microsoft_VisualStudio_Editors_ResourceEditor_ResourceFile_ResourceTaskTypeAccessor TaskType) {
            object Resource_val_target = null;
            if ((Resource != null)) {
                Resource_val_target = Resource.Target;
            }
            object TaskType_val_target = null;
            if ((TaskType != null)) {
                TaskType_val_target = TaskType.Target;
            }
            object[] args = new object[] {
                    Resource_val_target,
                    TaskType_val_target};
            Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType target_fallback1 = new Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType(EDITORS_ASSEMBLY, "Microsoft.VisualStudio.Editors.ResourceEditor.Resource");
            Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType target_fallback2 = new Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType(EDITORS_ASSEMBLY, "Microsoft.VisualStudio.Editors.ResourceEditor.ResourceFile+ResourceTaskType");
            string ret = ((string)(m_privateObject.Invoke("GetResourceTaskMessage", new System.Type[] {
                        target_fallback1.ReferencedType,
                        target_fallback2.ReferencedType}, args)));
            return ret;
        }
    
        internal string GetResourceTaskMessages(global::Microsoft.VisualStudio.Editors.UnitTests.Microsoft_VisualStudio_Editors_ResourceEditor_ResourceAccessor Resource) {
            object Resource_val_target = null;
            if ((Resource != null)) {
                Resource_val_target = Resource.Target;
            }
            object[] args = new object[] {
                    Resource_val_target};
            Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType target = new Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType(EDITORS_ASSEMBLY, "Microsoft.VisualStudio.Editors.ResourceEditor.Resource");
            string ret = ((string)(m_privateObject.Invoke("GetResourceTaskMessages", new System.Type[] {
                        target.ReferencedType}, args)));
            return ret;
        }
    
        internal void OnTaskNavigate(object sender, global::System.EventArgs e) {
            object[] args = new object[] {
                    sender,
                    e};
            m_privateObject.Invoke("OnTaskNavigate", new System.Type[] {
                        typeof(object),
                        typeof(global::System.EventArgs)}, args);
        }
    
        internal void SetResourceTask(global::Microsoft.VisualStudio.Editors.UnitTests.Microsoft_VisualStudio_Editors_ResourceEditor_ResourceAccessor Resource, global::Microsoft.VisualStudio.Editors.UnitTests.Microsoft_VisualStudio_Editors_ResourceEditor_ResourceFile_ResourceTaskTypeAccessor TaskType, string Text, global::Microsoft.VisualStudio.Shell.TaskPriority Priority, string HelpLink, global::Microsoft.VisualStudio.Shell.TaskErrorCategory ErrorCategory) {
            object Resource_val_target = null;
            if ((Resource != null)) {
                Resource_val_target = Resource.Target;
            }
            object TaskType_val_target = null;
            if ((TaskType != null)) {
                TaskType_val_target = TaskType.Target;
            }
            object[] args = new object[] {
                    Resource_val_target,
                    TaskType_val_target,
                    Text,
                    Priority,
                    HelpLink,
                    ErrorCategory};
            Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType target_fallback1 = new Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType(EDITORS_ASSEMBLY, "Microsoft.VisualStudio.Editors.ResourceEditor.Resource");
            Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType target_fallback2 = new Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType(EDITORS_ASSEMBLY, "Microsoft.VisualStudio.Editors.ResourceEditor.ResourceFile+ResourceTaskType");
            m_privateObject.Invoke("SetResourceTask", new System.Type[] {
                        target_fallback1.ReferencedType,
                        target_fallback2.ReferencedType,
                        typeof(string),
                        typeof(global::Microsoft.VisualStudio.Shell.TaskPriority),
                        typeof(string),
                        typeof(global::Microsoft.VisualStudio.Shell.TaskErrorCategory)}, args);
        }
    
        internal void ClearResourceTask(global::Microsoft.VisualStudio.Editors.UnitTests.Microsoft_VisualStudio_Editors_ResourceEditor_ResourceAccessor Resource, global::Microsoft.VisualStudio.Editors.UnitTests.Microsoft_VisualStudio_Editors_ResourceEditor_ResourceFile_ResourceTaskTypeAccessor TaskType) {
            object Resource_val_target = null;
            if ((Resource != null)) {
                Resource_val_target = Resource.Target;
            }
            object TaskType_val_target = null;
            if ((TaskType != null)) {
                TaskType_val_target = TaskType.Target;
            }
            object[] args = new object[] {
                    Resource_val_target,
                    TaskType_val_target};
            Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType target_fallback1 = new Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType(EDITORS_ASSEMBLY, "Microsoft.VisualStudio.Editors.ResourceEditor.Resource");
            Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType target_fallback2 = new Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType(EDITORS_ASSEMBLY, "Microsoft.VisualStudio.Editors.ResourceEditor.ResourceFile+ResourceTaskType");
            m_privateObject.Invoke("ClearResourceTask", new System.Type[] {
                        target_fallback1.ReferencedType,
                        target_fallback2.ReferencedType}, args);
        }
    
        internal void ClearResourceTasks(global::Microsoft.VisualStudio.Editors.UnitTests.Microsoft_VisualStudio_Editors_ResourceEditor_ResourceAccessor Resource) {
            object Resource_val_target = null;
            if ((Resource != null)) {
                Resource_val_target = Resource.Target;
            }
            object[] args = new object[] {
                    Resource_val_target};
            Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType target = new Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType(EDITORS_ASSEMBLY, "Microsoft.VisualStudio.Editors.ResourceEditor.Resource");
            m_privateObject.Invoke("ClearResourceTasks", new System.Type[] {
                        target.ReferencedType}, args);
        }
    
        internal void DelayCheckResourceForErrors(global::Microsoft.VisualStudio.Editors.UnitTests.Microsoft_VisualStudio_Editors_ResourceEditor_ResourceAccessor Resource) {
            object Resource_val_target = null;
            if ((Resource != null)) {
                Resource_val_target = Resource.Target;
            }
            object[] args = new object[] {
                    Resource_val_target};
            Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType target = new Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType(EDITORS_ASSEMBLY, "Microsoft.VisualStudio.Editors.ResourceEditor.Resource");
            m_privateObject.Invoke("DelayCheckResourceForErrors", new System.Type[] {
                        target.ReferencedType}, args);
        }
    
        internal void DelayCheckAllResourcesForErrors() {
            object[] args = new object[0];
            m_privateObject.Invoke("DelayCheckAllResourcesForErrors", new System.Type[0], args);
        }
    
        internal void RemoveResourceToDelayCheckForErrors(global::Microsoft.VisualStudio.Editors.UnitTests.Microsoft_VisualStudio_Editors_ResourceEditor_ResourceAccessor Resource) {
            object Resource_val_target = null;
            if ((Resource != null)) {
                Resource_val_target = Resource.Target;
            }
            object[] args = new object[] {
                    Resource_val_target};
            Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType target = new Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType(EDITORS_ASSEMBLY, "Microsoft.VisualStudio.Editors.ResourceEditor.Resource");
            m_privateObject.Invoke("RemoveResourceToDelayCheckForErrors", new System.Type[] {
                        target.ReferencedType}, args);
        }
    
        internal void OnDelayCheckForErrors(object sender, global::System.EventArgs e) {
            object[] args = new object[] {
                    sender,
                    e};
            m_privateObject.Invoke("OnDelayCheckForErrors", new System.Type[] {
                        typeof(object),
                        typeof(global::System.EventArgs)}, args);
        }
    
        internal void StopDelayingCheckingForErrors() {
            object[] args = new object[0];
            m_privateObject.Invoke("StopDelayingCheckingForErrors", new System.Type[0], args);
        }
    
        internal void SuspendDelayingCheckingForErrors(bool suspendIt) {
            object[] args = new object[] {
                    suspendIt};
            m_privateObject.Invoke("SuspendDelayingCheckingForErrors", new System.Type[] {
                        typeof(bool)}, args);
        }
    
        internal void AddNecessaryReferenceToProject() {
            object[] args = new object[0];
            m_privateObject.Invoke("AddNecessaryReferenceToProject", new System.Type[0], args);
        }
    
        internal void AddNecessaryReferenceToProject(global::System.Collections.ICollection Resources) {
            object[] args = new object[] {
                    Resources};
            m_privateObject.Invoke("AddNecessaryReferenceToProject", new System.Type[] {
                        typeof(global::System.Collections.ICollection)}, args);
        }
    
        internal bool IsGeneratedToCode() {
            object[] args = new object[0];
            bool ret = ((bool)(m_privateObject.Invoke("IsGeneratedToCode", new System.Type[0], args)));
            return ret;
        }
    
        internal global::System.CodeDom.Compiler.CodeDomProvider GetCodeDomProvider() {
            object[] args = new object[0];
            global::System.CodeDom.Compiler.CodeDomProvider ret = ((global::System.CodeDom.Compiler.CodeDomProvider)(m_privateObject.Invoke("GetCodeDomProvider", new System.Type[0], args)));
            return ret;
        }
    
        internal void DelayFlushAndRunCustomTool() {
            object[] args = new object[0];
            m_privateObject.Invoke("DelayFlushAndRunCustomTool", new System.Type[0], args);
        }
    */
        internal void DelayFlushAndRunCustomToolImpl()
        {
            object[] args = new object[0];
            m_privateObject.Invoke("DelayFlushAndRunCustomToolImpl", new System.Type[0], args);
        }
    }


    [System.Diagnostics.DebuggerStepThrough()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TestTools.UnitTestGeneration", "1.0.0.0")]
    internal partial class Microsoft_VisualStudio_Editors_PropertyPages_WPF_ApplicationPropPageVBWPFAccessor : BaseAccessor
    {

        protected static Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType m_privateType = new Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType(EDITORS_ASSEMBLY, "Microsoft.VisualStudio.Editors.PropertyPages.WPF.ApplicationPropPageVBWPF");

        internal Microsoft_VisualStudio_Editors_PropertyPages_WPF_ApplicationPropPageVBWPFAccessor(object target)
            :
                base(target, m_privateType)
        {
        }

        internal global::Microsoft.VisualStudio.Shell.Design.Serialization.DesignerDocDataService m_ApplicationXamlDocDataService
        {
            get
            {
                global::Microsoft.VisualStudio.Shell.Design.Serialization.DesignerDocDataService ret = ((global::Microsoft.VisualStudio.Shell.Design.Serialization.DesignerDocDataService)(m_privateObject.GetFieldOrProperty("m_ApplicationXamlDocDataService")));
                return ret;
            }
            set
            {
                m_privateObject.SetFieldOrProperty("m_ApplicationXamlDocDataService", value);
            }
        }

        internal static string m_NoneText
        {
            get
            {
                string ret = ((string)(m_privateType.GetStaticFieldOrProperty("m_NoneText")));
                return ret;
            }
            set
            {
                m_privateType.SetStaticFieldOrProperty("m_NoneText", value);
            }
        }

        internal string m_StartupObjectLabelText
        {
            get
            {
                string ret = ((string)(m_privateObject.GetFieldOrProperty("m_StartupObjectLabelText")));
                return ret;
            }
            set
            {
                m_privateObject.SetFieldOrProperty("m_StartupObjectLabelText", value);
            }
        }

        internal string m_StartupUriLabelText
        {
            get
            {
                string ret = ((string)(m_privateObject.GetFieldOrProperty("m_StartupUriLabelText")));
                return ret;
            }
            set
            {
                m_privateObject.SetFieldOrProperty("m_StartupUriLabelText", value);
            }
        }

        internal string STARTUPOBJECT_SubMain
        {
            get
            {
                string ret = ((string)(m_privateObject.GetFieldOrProperty("STARTUPOBJECT_SubMain")));
                return ret;
            }
            set
            {
                m_privateObject.SetFieldOrProperty("STARTUPOBJECT_SubMain", value);
            }
        }

        internal int PROPID_StartupObjectOrUri
        {
            get
            {
                int ret = ((int)(m_privateObject.GetFieldOrProperty("PROPID_StartupObjectOrUri")));
                return ret;
            }
            set
            {
                m_privateObject.SetFieldOrProperty("PROPID_StartupObjectOrUri", value);
            }
        }

        internal string PROPNAME_StartupObjectOrUri
        {
            get
            {
                string ret = ((string)(m_privateObject.GetFieldOrProperty("PROPNAME_StartupObjectOrUri")));
                return ret;
            }
            set
            {
                m_privateObject.SetFieldOrProperty("PROPNAME_StartupObjectOrUri", value);
            }
        }

        internal int PROPID_ShutDownMode
        {
            get
            {
                int ret = ((int)(m_privateObject.GetFieldOrProperty("PROPID_ShutDownMode")));
                return ret;
            }
            set
            {
                m_privateObject.SetFieldOrProperty("PROPID_ShutDownMode", value);
            }
        }

        internal string PROPNAME_ShutDownMode
        {
            get
            {
                string ret = ((string)(m_privateObject.GetFieldOrProperty("PROPNAME_ShutDownMode")));
                return ret;
            }
            set
            {
                m_privateObject.SetFieldOrProperty("PROPNAME_ShutDownMode", value);
            }
        }

        internal int PROPID_UseApplicationFramework
        {
            get
            {
                int ret = ((int)(m_privateObject.GetFieldOrProperty("PROPID_UseApplicationFramework")));
                return ret;
            }
            set
            {
                m_privateObject.SetFieldOrProperty("PROPID_UseApplicationFramework", value);
            }
        }

        internal string PROPNAME_UseApplicationFramework
        {
            get
            {
                string ret = ((string)(m_privateObject.GetFieldOrProperty("PROPNAME_UseApplicationFramework")));
                return ret;
            }
            set
            {
                m_privateObject.SetFieldOrProperty("PROPNAME_UseApplicationFramework", value);
            }
        }

        internal global::Microsoft.VisualStudio.Editors.PropertyPages.PropertyControlData[] ControlData
        {
            get
            {
                global::Microsoft.VisualStudio.Editors.PropertyPages.PropertyControlData[] ret = ((global::Microsoft.VisualStudio.Editors.PropertyPages.PropertyControlData[])(m_privateObject.GetProperty("ControlData")));
                return ret;
            }
        }

        internal static global::Microsoft.VisualStudio.Editors.UnitTests.Microsoft_VisualStudio_Editors_PropertyPages_WPF_ApplicationPropPageVBWPF_ShutdownModeAccessor s_defaultShutdownMode
        {
            get
            {
                object _ret_val = m_privateType.GetStaticFieldOrProperty("s_defaultShutdownMode");
                global::Microsoft.VisualStudio.Editors.UnitTests.Microsoft_VisualStudio_Editors_PropertyPages_WPF_ApplicationPropPageVBWPF_ShutdownModeAccessor _ret = null;
                if ((_ret_val != null))
                {
                    _ret = new global::Microsoft.VisualStudio.Editors.UnitTests.Microsoft_VisualStudio_Editors_PropertyPages_WPF_ApplicationPropPageVBWPF_ShutdownModeAccessor(_ret_val);
                }
                global::Microsoft.VisualStudio.Editors.UnitTests.Microsoft_VisualStudio_Editors_PropertyPages_WPF_ApplicationPropPageVBWPF_ShutdownModeAccessor ret = _ret;
                return ret;
            }
            set
            {
                m_privateType.SetStaticFieldOrProperty("s_defaultShutdownMode", value);
            }
        }

        internal string Const_MyApplicationEntryPoint
        {
            get
            {
                string ret = ((string)(m_privateObject.GetFieldOrProperty("Const_MyApplicationEntryPoint")));
                return ret;
            }
            set
            {
                m_privateObject.SetFieldOrProperty("Const_MyApplicationEntryPoint", value);
            }
        }

        internal string Const_MyApplication
        {
            get
            {
                string ret = ((string)(m_privateObject.GetFieldOrProperty("Const_MyApplication")));
                return ret;
            }
            set
            {
                m_privateObject.SetFieldOrProperty("Const_MyApplication", value);
            }
        }

        internal string Const_ShutdownMode
        {
            get
            {
                string ret = ((string)(m_privateObject.GetFieldOrProperty("Const_ShutdownMode")));
                return ret;
            }
            set
            {
                m_privateObject.SetFieldOrProperty("Const_ShutdownMode", value);
            }
        }

        internal string Const_CustomSubMain
        {
            get
            {
                string ret = ((string)(m_privateObject.GetFieldOrProperty("Const_CustomSubMain")));
                return ret;
            }
            set
            {
                m_privateObject.SetFieldOrProperty("Const_CustomSubMain", value);
            }
        }

        internal string Const_MainFormNoRootNS
        {
            get
            {
                string ret = ((string)(m_privateObject.GetFieldOrProperty("Const_MainFormNoRootNS")));
                return ret;
            }
            set
            {
                m_privateObject.SetFieldOrProperty("Const_MainFormNoRootNS", value);
            }
        }

        internal bool m_settingApplicationType
        {
            get
            {
                bool ret = ((bool)(m_privateObject.GetFieldOrProperty("m_settingApplicationType")));
                return ret;
            }
            set
            {
                m_privateObject.SetFieldOrProperty("m_settingApplicationType", value);
            }
        }

        internal global::System.Windows.Forms.TableLayoutPanel overarchingTableLayoutPanel
        {
            get
            {
                global::System.Windows.Forms.TableLayoutPanel ret = ((global::System.Windows.Forms.TableLayoutPanel)(m_privateObject.GetFieldOrProperty("overarchingTableLayoutPanel")));
                return ret;
            }
            set
            {
                m_privateObject.SetFieldOrProperty("overarchingTableLayoutPanel", value);
            }
        }

        internal global::System.Windows.Forms.Button EditXamlButton
        {
            get
            {
                global::System.Windows.Forms.Button ret = ((global::System.Windows.Forms.Button)(m_privateObject.GetFieldOrProperty("EditXamlButton")));
                return ret;
            }
            set
            {
                m_privateObject.SetFieldOrProperty("EditXamlButton", value);
            }
        }

        internal global::System.Windows.Forms.Label AssemblyNameLabel
        {
            get
            {
                global::System.Windows.Forms.Label ret = ((global::System.Windows.Forms.Label)(m_privateObject.GetFieldOrProperty("AssemblyNameLabel")));
                return ret;
            }
            set
            {
                m_privateObject.SetFieldOrProperty("AssemblyNameLabel", value);
            }
        }

        internal global::System.Windows.Forms.Label RootNamespaceLabel
        {
            get
            {
                global::System.Windows.Forms.Label ret = ((global::System.Windows.Forms.Label)(m_privateObject.GetFieldOrProperty("RootNamespaceLabel")));
                return ret;
            }
            set
            {
                m_privateObject.SetFieldOrProperty("RootNamespaceLabel", value);
            }
        }

        internal global::System.Windows.Forms.TextBox AssemblyNameTextBox
        {
            get
            {
                global::System.Windows.Forms.TextBox ret = ((global::System.Windows.Forms.TextBox)(m_privateObject.GetFieldOrProperty("AssemblyNameTextBox")));
                return ret;
            }
            set
            {
                m_privateObject.SetFieldOrProperty("AssemblyNameTextBox", value);
            }
        }

        internal global::System.Windows.Forms.TextBox RootNamespaceTextBox
        {
            get
            {
                global::System.Windows.Forms.TextBox ret = ((global::System.Windows.Forms.TextBox)(m_privateObject.GetFieldOrProperty("RootNamespaceTextBox")));
                return ret;
            }
            set
            {
                m_privateObject.SetFieldOrProperty("RootNamespaceTextBox", value);
            }
        }

        internal global::System.Windows.Forms.Label ApplicationTypeLabel
        {
            get
            {
                global::System.Windows.Forms.Label ret = ((global::System.Windows.Forms.Label)(m_privateObject.GetFieldOrProperty("ApplicationTypeLabel")));
                return ret;
            }
            set
            {
                m_privateObject.SetFieldOrProperty("ApplicationTypeLabel", value);
            }
        }

        internal global::System.Windows.Forms.ComboBox ApplicationTypeComboBox
        {
            get
            {
                global::System.Windows.Forms.ComboBox ret = ((global::System.Windows.Forms.ComboBox)(m_privateObject.GetFieldOrProperty("ApplicationTypeComboBox")));
                return ret;
            }
            set
            {
                m_privateObject.SetFieldOrProperty("ApplicationTypeComboBox", value);
            }
        }

        internal global::System.Windows.Forms.Button AssemblyInfoButton
        {
            get
            {
                global::System.Windows.Forms.Button ret = ((global::System.Windows.Forms.Button)(m_privateObject.GetFieldOrProperty("AssemblyInfoButton")));
                return ret;
            }
            set
            {
                m_privateObject.SetFieldOrProperty("AssemblyInfoButton", value);
            }
        }

        internal global::System.Windows.Forms.Label StartupObjectOrUriLabel
        {
            get
            {
                global::System.Windows.Forms.Label ret = ((global::System.Windows.Forms.Label)(m_privateObject.GetFieldOrProperty("StartupObjectOrUriLabel")));
                return ret;
            }
            set
            {
                m_privateObject.SetFieldOrProperty("StartupObjectOrUriLabel", value);
            }
        }

        internal global::System.Windows.Forms.ComboBox StartupObjectOrUriComboBox
        {
            get
            {
                global::System.Windows.Forms.ComboBox ret = ((global::System.Windows.Forms.ComboBox)(m_privateObject.GetFieldOrProperty("StartupObjectOrUriComboBox")));
                return ret;
            }
            set
            {
                m_privateObject.SetFieldOrProperty("StartupObjectOrUriComboBox", value);
            }
        }

        internal global::System.Windows.Forms.CheckBox UseApplicationFrameworkCheckBox
        {
            get
            {
                global::System.Windows.Forms.CheckBox ret = ((global::System.Windows.Forms.CheckBox)(m_privateObject.GetFieldOrProperty("UseApplicationFrameworkCheckBox")));
                return ret;
            }
            set
            {
                m_privateObject.SetFieldOrProperty("UseApplicationFrameworkCheckBox", value);
            }
        }

        internal global::System.Windows.Forms.Label IconLabel
        {
            get
            {
                global::System.Windows.Forms.Label ret = ((global::System.Windows.Forms.Label)(m_privateObject.GetFieldOrProperty("IconLabel")));
                return ret;
            }
            set
            {
                m_privateObject.SetFieldOrProperty("IconLabel", value);
            }
        }

        internal global::System.Windows.Forms.Label ShutdownModeLabel
        {
            get
            {
                global::System.Windows.Forms.Label ret = ((global::System.Windows.Forms.Label)(m_privateObject.GetFieldOrProperty("ShutdownModeLabel")));
                return ret;
            }
            set
            {
                m_privateObject.SetFieldOrProperty("ShutdownModeLabel", value);
            }
        }

        internal global::System.Windows.Forms.ComboBox ShutdownModeComboBox
        {
            get
            {
                global::System.Windows.Forms.ComboBox ret = ((global::System.Windows.Forms.ComboBox)(m_privateObject.GetFieldOrProperty("ShutdownModeComboBox")));
                return ret;
            }
            set
            {
                m_privateObject.SetFieldOrProperty("ShutdownModeComboBox", value);
            }
        }

        internal global::System.Windows.Forms.Button ViewCodeButton
        {
            get
            {
                global::System.Windows.Forms.Button ret = ((global::System.Windows.Forms.Button)(m_privateObject.GetFieldOrProperty("ViewCodeButton")));
                return ret;
            }
            set
            {
                m_privateObject.SetFieldOrProperty("ViewCodeButton", value);
            }
        }

        internal global::System.Windows.Forms.TableLayoutPanel TopHalfLayoutPanel
        {
            get
            {
                global::System.Windows.Forms.TableLayoutPanel ret = ((global::System.Windows.Forms.TableLayoutPanel)(m_privateObject.GetFieldOrProperty("TopHalfLayoutPanel")));
                return ret;
            }
            set
            {
                m_privateObject.SetFieldOrProperty("TopHalfLayoutPanel", value);
            }
        }

        internal global::System.Windows.Forms.GroupBox WindowsAppGroupBox
        {
            get
            {
                global::System.Windows.Forms.GroupBox ret = ((global::System.Windows.Forms.GroupBox)(m_privateObject.GetFieldOrProperty("WindowsAppGroupBox")));
                return ret;
            }
            set
            {
                m_privateObject.SetFieldOrProperty("WindowsAppGroupBox", value);
            }
        }

        internal global::System.Windows.Forms.TableLayoutPanel BottomHalfLayoutPanel
        {
            get
            {
                global::System.Windows.Forms.TableLayoutPanel ret = ((global::System.Windows.Forms.TableLayoutPanel)(m_privateObject.GetFieldOrProperty("BottomHalfLayoutPanel")));
                return ret;
            }
            set
            {
                m_privateObject.SetFieldOrProperty("BottomHalfLayoutPanel", value);
            }
        }

        internal global::System.Windows.Forms.ComboBox IconCombobox
        {
            get
            {
                global::System.Windows.Forms.ComboBox ret = ((global::System.Windows.Forms.ComboBox)(m_privateObject.GetFieldOrProperty("IconCombobox")));
                return ret;
            }
            set
            {
                m_privateObject.SetFieldOrProperty("IconCombobox", value);
            }
        }

        internal global::System.Windows.Forms.PictureBox IconPicturebox
        {
            get
            {
                global::System.Windows.Forms.PictureBox ret = ((global::System.Windows.Forms.PictureBox)(m_privateObject.GetFieldOrProperty("IconPicturebox")));
                return ret;
            }
            set
            {
                m_privateObject.SetFieldOrProperty("IconPicturebox", value);
            }
        }

        internal global::System.Windows.Forms.Label MainWindowLabel
        {
            get
            {
                global::System.Windows.Forms.Label ret = ((global::System.Windows.Forms.Label)(m_privateObject.GetFieldOrProperty("MainWindowLabel")));
                return ret;
            }
            set
            {
                m_privateObject.SetFieldOrProperty("MainWindowLabel", value);
            }
        }

        internal global::System.Windows.Forms.ComboBox MainWindowComboBox
        {
            get
            {
                global::System.Windows.Forms.ComboBox ret = ((global::System.Windows.Forms.ComboBox)(m_privateObject.GetFieldOrProperty("MainWindowComboBox")));
                return ret;
            }
            set
            {
                m_privateObject.SetFieldOrProperty("MainWindowComboBox", value);
            }
        }

        internal global::System.ComponentModel.IContainer components
        {
            get
            {
                global::System.ComponentModel.IContainer ret = ((global::System.ComponentModel.IContainer)(m_privateObject.GetFieldOrProperty("components")));
                return ret;
            }
            set
            {
                m_privateObject.SetFieldOrProperty("components", value);
            }
        }

        internal void Dispose(bool disposing)
        {
            object[] args = new object[] {
                disposing};
            m_privateObject.Invoke("Dispose", new System.Type[] {
                    typeof(bool)}, args);
        }

        internal void CleanupCOMReferences()
        {
            object[] args = new object[0];
            m_privateObject.Invoke("CleanupCOMReferences", new System.Type[0], args);
        }

        internal static global::Microsoft.VisualStudio.Editors.PropertyPages.PropPageUserControlBase CreatePrivate()
        {
            object[] args = new object[0];
            Microsoft.VisualStudio.TestTools.UnitTesting.PrivateObject priv_obj = new Microsoft.VisualStudio.TestTools.UnitTesting.PrivateObject(EDITORS_ASSEMBLY, "Microsoft.VisualStudio.Editors.PropertyPages.WPF.ApplicationPropPageVBWPF", new System.Type[0], args);
            return ((global::Microsoft.VisualStudio.Editors.PropertyPages.PropPageUserControlBase)(priv_obj.Target));
        }

        internal static void InitializeApplicationTypes()
        {
            object[] args = new object[0];
            m_privateType.InvokeStatic("InitializeApplicationTypes", new System.Type[0], args);
        }

        internal void IconCombobox_DropDown(object sender, global::System.EventArgs e)
        {
            object[] args = new object[] {
                sender,
                e};
            m_privateObject.Invoke("IconCombobox_DropDown", new System.Type[] {
                    typeof(object),
                    typeof(global::System.EventArgs)}, args);
        }

        internal void IconCombobox_DropDownClosed(object sender, global::System.EventArgs e)
        {
            object[] args = new object[] {
                sender,
                e};
            m_privateObject.Invoke("IconCombobox_DropDownClosed", new System.Type[] {
                    typeof(object),
                    typeof(global::System.EventArgs)}, args);
        }

        internal void IconCombobox_SelectionChangeCommitted(object sender, global::System.EventArgs e)
        {
            object[] args = new object[] {
                sender,
                e};
            m_privateObject.Invoke("IconCombobox_SelectionChangeCommitted", new System.Type[] {
                    typeof(object),
                    typeof(global::System.EventArgs)}, args);
        }

        internal void AssemblyInfoButton_Click(object sender, global::System.EventArgs e)
        {
            object[] args = new object[] {
                sender,
                e};
            m_privateObject.Invoke("AssemblyInfoButton_Click", new System.Type[] {
                    typeof(object),
                    typeof(global::System.EventArgs)}, args);
        }

        internal bool GetOutputTypeFromUI(global::System.Windows.Forms.Control control, global::System.ComponentModel.PropertyDescriptor prop, ref object value)
        {
            object[] args = new object[] {
                control,
                prop,
                value};
            bool ret = ((bool)(m_privateObject.Invoke("GetOutputTypeFromUI", new System.Type[] {
                    typeof(global::System.Windows.Forms.Control),
                    typeof(global::System.ComponentModel.PropertyDescriptor),
                    typeof(object).MakeByRefType()}, args)));
            value = ((object)(args[2]));
            return ret;
        }

        internal bool SetOutputTypeIntoUI(global::System.Windows.Forms.Control control, global::System.ComponentModel.PropertyDescriptor prop, object value)
        {
            object[] args = new object[] {
                control,
                prop,
                value};
            bool ret = ((bool)(m_privateObject.Invoke("SetOutputTypeIntoUI", new System.Type[] {
                    typeof(global::System.Windows.Forms.Control),
                    typeof(global::System.ComponentModel.PropertyDescriptor),
                    typeof(object)}, args)));
            return ret;
        }

        internal void EnableApplicationIconAccordingToApplicationType(global::Microsoft.VisualStudio.Editors.UnitTests.Microsoft_VisualStudio_Editors_MyApplication_ApplicationTypesAccessor AppType)
        {
            object AppType_val_target = null;
            if ((AppType != null))
            {
                AppType_val_target = AppType.Target;
            }
            object[] args = new object[] {
                AppType_val_target};
            Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType target = new Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType(EDITORS_ASSEMBLY, "Microsoft.VisualStudio.Editors.MyApplication.ApplicationTypes");
            m_privateObject.Invoke("EnableApplicationIconAccordingToApplicationType", new System.Type[] {
                    target.ReferencedType}, args);
        }

        internal static global::Microsoft.VisualStudio.Editors.UnitTests.Microsoft_VisualStudio_Editors_MyApplication_ApplicationTypesAccessor ApplicationTypeFromOutputType(global::VSLangProj.prjOutputType OutputType)
        {
            object[] args = new object[] {
                OutputType};
            object _ret_val = m_privateType.InvokeStatic("ApplicationTypeFromOutputType", new System.Type[] {
                    typeof(global::VSLangProj.prjOutputType)}, args);
            global::Microsoft.VisualStudio.Editors.UnitTests.Microsoft_VisualStudio_Editors_MyApplication_ApplicationTypesAccessor _ret = null;
            if ((_ret_val != null))
            {
                _ret = new global::Microsoft.VisualStudio.Editors.UnitTests.Microsoft_VisualStudio_Editors_MyApplication_ApplicationTypesAccessor(_ret_val);
            }
            global::Microsoft.VisualStudio.Editors.UnitTests.Microsoft_VisualStudio_Editors_MyApplication_ApplicationTypesAccessor ret = _ret;
            return ret;
        }

        internal static global::VSLangProj.prjOutputType OutputTypeFromApplicationType(global::Microsoft.VisualStudio.Editors.UnitTests.Microsoft_VisualStudio_Editors_MyApplication_ApplicationTypesAccessor AppType)
        {
            object AppType_val_target = null;
            if ((AppType != null))
            {
                AppType_val_target = AppType.Target;
            }
            object[] args = new object[] {
                AppType_val_target};
            Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType target = new Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType(EDITORS_ASSEMBLY, "Microsoft.VisualStudio.Editors.MyApplication.ApplicationTypes");
            global::VSLangProj.prjOutputType ret = ((global::VSLangProj.prjOutputType)(m_privateType.InvokeStatic("OutputTypeFromApplicationType", new System.Type[] {
                    target.ReferencedType}, args)));
            return ret;
        }

        internal void EnableUseApplicationFrameworkCheckBox(bool Enable)
        {
            object[] args = new object[] {
                Enable};
            m_privateObject.Invoke("EnableUseApplicationFrameworkCheckBox", new System.Type[] {
                    typeof(bool)}, args);
        }

        internal bool SetUseApplicationFrameworkIntoUI(global::System.Windows.Forms.Control control, global::System.ComponentModel.PropertyDescriptor prop, object value)
        {
            object[] args = new object[] {
                control,
                prop,
                value};
            bool ret = ((bool)(m_privateObject.Invoke("SetUseApplicationFrameworkIntoUI", new System.Type[] {
                    typeof(global::System.Windows.Forms.Control),
                    typeof(global::System.ComponentModel.PropertyDescriptor),
                    typeof(object)}, args)));
            return ret;
        }

        internal bool GetUseApplicationFrameworkFromUI(global::System.Windows.Forms.Control control, global::System.ComponentModel.PropertyDescriptor prop, ref object value)
        {
            object[] args = new object[] {
                control,
                prop,
                value};
            bool ret = ((bool)(m_privateObject.Invoke("GetUseApplicationFrameworkFromUI", new System.Type[] {
                    typeof(global::System.Windows.Forms.Control),
                    typeof(global::System.ComponentModel.PropertyDescriptor),
                    typeof(object).MakeByRefType()}, args)));
            value = ((object)(args[2]));
            return ret;
        }

        internal void SetUseApplicationFrameworkIntoStorage(global::Microsoft.VisualStudio.Editors.UnitTests.Microsoft_VisualStudio_Editors_PropertyPages_WPF_ApplicationPropPageVBWPF_TriStateAccessor value)
        {
            object value_val_target = null;
            if ((value != null))
            {
                value_val_target = value.Target;
            }
            object[] args = new object[] {
                value_val_target};
            Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType target = new Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType(EDITORS_ASSEMBLY, "Microsoft.VisualStudio.Editors.PropertyPages.WPF.ApplicationPropPageVBWPF+TriState");
            m_privateObject.Invoke("SetUseApplicationFrameworkIntoStorage", new System.Type[] {
                    target.ReferencedType}, args);
        }

        internal global::Microsoft.VisualStudio.Editors.UnitTests.Microsoft_VisualStudio_Editors_PropertyPages_WPF_ApplicationPropPageVBWPF_TriStateAccessor GetUseApplicationFrameworkFromStorage()
        {
            object[] args = new object[0];
            object _ret_val = m_privateObject.Invoke("GetUseApplicationFrameworkFromStorage", new System.Type[0], args);
            global::Microsoft.VisualStudio.Editors.UnitTests.Microsoft_VisualStudio_Editors_PropertyPages_WPF_ApplicationPropPageVBWPF_TriStateAccessor _ret = null;
            if ((_ret_val != null))
            {
                _ret = new global::Microsoft.VisualStudio.Editors.UnitTests.Microsoft_VisualStudio_Editors_PropertyPages_WPF_ApplicationPropPageVBWPF_TriStateAccessor(_ret_val);
            }
            global::Microsoft.VisualStudio.Editors.UnitTests.Microsoft_VisualStudio_Editors_PropertyPages_WPF_ApplicationPropPageVBWPF_TriStateAccessor ret = _ret;
            return ret;
        }

        internal bool ApplicationXamlFileExistsInProject()
        {
            object[] args = new object[0];
            bool ret = ((bool)(m_privateObject.Invoke("ApplicationXamlFileExistsInProject", new System.Type[0], args)));
            return ret;
        }

        internal global::EnvDTE.ProjectItem FindApplicationXamlProjectItem(bool createAppXamlIfDoesNotExist)
        {
            object[] args = new object[] {
                createAppXamlIfDoesNotExist};
            global::EnvDTE.ProjectItem ret = ((global::EnvDTE.ProjectItem)(m_privateObject.Invoke("FindApplicationXamlProjectItem", new System.Type[] {
                    typeof(bool)}, args)));
            return ret;
        }

        internal global::Microsoft.VisualStudio.Shell.Design.Serialization.DocData GetApplicationXamlDocData(bool createAppXamlIfDoesNotExist)
        {
            object[] args = new object[] {
                createAppXamlIfDoesNotExist};
            global::Microsoft.VisualStudio.Shell.Design.Serialization.DocData ret = ((global::Microsoft.VisualStudio.Shell.Design.Serialization.DocData)(m_privateObject.Invoke("GetApplicationXamlDocData", new System.Type[] {
                    typeof(bool)}, args)));
            return ret;
        }

        internal global::Microsoft.VisualStudio.Editors.PropertyPages.WPF.AppDotXamlDocument GetAppDotXamlDocument(bool createAppXamlIfDoesNotExist)
        {
            object[] args = new object[] {
                createAppXamlIfDoesNotExist};
            global::Microsoft.VisualStudio.Editors.PropertyPages.WPF.AppDotXamlDocument ret = ((global::Microsoft.VisualStudio.Editors.PropertyPages.WPF.AppDotXamlDocument)(m_privateObject.Invoke("GetAppDotXamlDocument", new System.Type[] {
                    typeof(bool)}, args)));
            return ret;
        }

        internal string GetStartupUriFromStorage()
        {
            object[] args = new object[0];
            string ret = ((string)(m_privateObject.Invoke("GetStartupUriFromStorage", new System.Type[0], args)));
            return ret;
        }

        internal void SetStartupUriIntoStorage(string value)
        {
            object[] args = new object[] {
                value};
            m_privateObject.Invoke("SetStartupUriIntoStorage", new System.Type[] {
                    typeof(string)}, args);
        }

        internal void StartupObjectComboBox_DropDown(object sender, global::System.EventArgs e)
        {
            object[] args = new object[] {
                sender,
                e};
            m_privateObject.Invoke("StartupObjectComboBox_DropDown", new System.Type[] {
                    typeof(object),
                    typeof(global::System.EventArgs)}, args);
        }

        internal void PopulateStartupObjectOrUriComboboxAndKeepCurrentEntry()
        {
            object[] args = new object[0];
            m_privateObject.Invoke("PopulateStartupObjectOrUriComboboxAndKeepCurrentEntry", new System.Type[0], args);
        }

        internal global::Microsoft.VisualStudio.Editors.PropertyPages.PropertyControlData GetStartupObjectPropertyControlData()
        {
            object[] args = new object[0];
            global::Microsoft.VisualStudio.Editors.PropertyPages.PropertyControlData ret = ((global::Microsoft.VisualStudio.Editors.PropertyPages.PropertyControlData)(m_privateObject.Invoke("GetStartupObjectPropertyControlData", new System.Type[0], args)));
            return ret;
        }

        internal bool IsStartupObjectMissing()
        {
            object[] args = new object[0];
            bool ret = ((bool)(m_privateObject.Invoke("IsStartupObjectMissing", new System.Type[0], args)));
            return ret;
        }

        internal string GetCurrentStartupObjectFromStorage(ref bool isMissing, ref bool isSubMain)
        {
            object[] args = new object[] {
                isMissing,
                isSubMain};
            string ret = ((string)(m_privateObject.Invoke("GetCurrentStartupObjectFromStorage", new System.Type[] {
                    typeof(bool).MakeByRefType(),
                    typeof(bool).MakeByRefType()}, args)));
            isMissing = ((bool)(args[0]));
            isSubMain = ((bool)(args[1]));
            return ret;
        }

        internal bool IsStartUpObjectSupportedInThisProject()
        {
            object[] args = new object[0];
            bool ret = ((bool)(m_privateObject.Invoke("IsStartUpObjectSupportedInThisProject", new System.Type[0], args)));
            return ret;
        }

        internal bool GetStartupObjectOrUriFromUI(global::System.Windows.Forms.Control control, global::System.ComponentModel.PropertyDescriptor prop, ref object value)
        {
            object[] args = new object[] {
                control,
                prop,
                value};
            bool ret = ((bool)(m_privateObject.Invoke("GetStartupObjectOrUriFromUI", new System.Type[] {
                    typeof(global::System.Windows.Forms.Control),
                    typeof(global::System.ComponentModel.PropertyDescriptor),
                    typeof(object).MakeByRefType()}, args)));
            value = ((object)(args[2]));
            return ret;
        }

        internal static void SetSelectedStartupObjectOrUriIntoCombobox(global::System.Windows.Forms.ComboBox combobox, global::Microsoft.VisualStudio.Editors.UnitTests.Microsoft_VisualStudio_Editors_PropertyPages_WPF_ApplicationPropPageVBWPF_StartupObjectOrUriAccessor startupObjectOrUri)
        {
            object startupObjectOrUri_val_target = null;
            if ((startupObjectOrUri != null))
            {
                startupObjectOrUri_val_target = startupObjectOrUri.Target;
            }
            object[] args = new object[] {
                combobox,
                startupObjectOrUri_val_target};
            Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType target = new Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType(EDITORS_ASSEMBLY, "Microsoft.VisualStudio.Editors.PropertyPages.WPF.ApplicationPropPageVBWPF+StartupObje" +
                    "ctOrUri");
            m_privateType.InvokeStatic("SetSelectedStartupObjectOrUriIntoCombobox", new System.Type[] {
                    typeof(global::System.Windows.Forms.ComboBox),
                    target.ReferencedType}, args);
        }

        internal bool SetStartupObjectOrUriIntoUI(global::System.Windows.Forms.Control control, global::System.ComponentModel.PropertyDescriptor prop, object value)
        {
            object[] args = new object[] {
                control,
                prop,
                value};
            bool ret = ((bool)(m_privateObject.Invoke("SetStartupObjectOrUriIntoUI", new System.Type[] {
                    typeof(global::System.Windows.Forms.Control),
                    typeof(global::System.ComponentModel.PropertyDescriptor),
                    typeof(object)}, args)));
            return ret;
        }

        internal bool ShouldStartupUriBeDisplayedInsteadOfStartupObject()
        {
            object[] args = new object[0];
            bool ret = ((bool)(m_privateObject.Invoke("ShouldStartupUriBeDisplayedInsteadOfStartupObject", new System.Type[0], args)));
            return ret;
        }

        internal global::Microsoft.VisualStudio.Editors.UnitTests.Microsoft_VisualStudio_Editors_PropertyPages_WPF_ApplicationPropPageVBWPF_StartupObjectOrUriAccessor GetStartupObjectOrUriValueFromStorage()
        {
            object[] args = new object[0];
            object _ret_val = m_privateObject.Invoke("GetStartupObjectOrUriValueFromStorage", new System.Type[0], args);
            global::Microsoft.VisualStudio.Editors.UnitTests.Microsoft_VisualStudio_Editors_PropertyPages_WPF_ApplicationPropPageVBWPF_StartupObjectOrUriAccessor _ret = null;
            if ((_ret_val != null))
            {
                _ret = new global::Microsoft.VisualStudio.Editors.UnitTests.Microsoft_VisualStudio_Editors_PropertyPages_WPF_ApplicationPropPageVBWPF_StartupObjectOrUriAccessor(_ret_val);
            }
            global::Microsoft.VisualStudio.Editors.UnitTests.Microsoft_VisualStudio_Editors_PropertyPages_WPF_ApplicationPropPageVBWPF_StartupObjectOrUriAccessor ret = _ret;
            return ret;
        }

        internal void SetStartupObjectOrUriValueIntoStorage(global::Microsoft.VisualStudio.Editors.UnitTests.Microsoft_VisualStudio_Editors_PropertyPages_WPF_ApplicationPropPageVBWPF_StartupObjectOrUriAccessor value)
        {
            object value_val_target = null;
            if ((value != null))
            {
                value_val_target = value.Target;
            }
            object[] args = new object[] {
                value_val_target};
            Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType target = new Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType(EDITORS_ASSEMBLY, "Microsoft.VisualStudio.Editors.PropertyPages.WPF.ApplicationPropPageVBWPF+StartupObje" +
                    "ctOrUri");
            m_privateObject.Invoke("SetStartupObjectOrUriValueIntoStorage", new System.Type[] {
                    target.ReferencedType}, args);
        }

        internal void SetStartupObjectIntoStorage(string value)
        {
            object[] args = new object[] {
                value};
            m_privateObject.Invoke("SetStartupObjectIntoStorage", new System.Type[] {
                    typeof(string)}, args);
        }

        internal void PopulateStartupObjectDropdownValues(global::System.Windows.Forms.ComboBox startupObjectComboBox)
        {
            object[] args = new object[] {
                startupObjectComboBox};
            m_privateObject.Invoke("PopulateStartupObjectDropdownValues", new System.Type[] {
                    typeof(global::System.Windows.Forms.ComboBox)}, args);
        }

        internal void PopulateStartupUriDropdownValues(global::System.Windows.Forms.ComboBox startupObjectComboBox)
        {
            object[] args = new object[] {
                startupObjectComboBox};
            m_privateObject.Invoke("PopulateStartupUriDropdownValues", new System.Type[] {
                    typeof(global::System.Windows.Forms.ComboBox)}, args);
        }

        internal void FindXamlPageFiles(global::EnvDTE.ProjectItems projectItems, System.Collections.Generic.List<EnvDTE.ProjectItem> list)
        {
            object[] args = new object[] {
                projectItems,
                list};
            m_privateObject.Invoke("FindXamlPageFiles", new System.Type[] {
                    typeof(global::EnvDTE.ProjectItems),
                    typeof(System.Collections.Generic.List<EnvDTE.ProjectItem>)}, args);
        }

        internal string GetXamlFileRelativePath(string xamlFullPath)
        {
            object[] args = new object[] {
                xamlFullPath};
            string ret = ((string)(m_privateObject.Invoke("GetXamlFileRelativePath", new System.Type[] {
                    typeof(string)}, args)));
            return ret;
        }

        internal System.Collections.Generic.List<object> GetAvailableStartupUris()
        {
            object[] args = new object[0];
            System.Collections.Generic.List<object> ret = ((System.Collections.Generic.List<object>)(m_privateObject.Invoke("GetAvailableStartupUris", new System.Type[0], args)));
            return ret;
        }

        internal static void InitializeShutdownModeValues()
        {
            object[] args = new object[0];
            m_privateType.InvokeStatic("InitializeShutdownModeValues", new System.Type[0], args);
        }

        internal string GetShutdownModeFromStorage()
        {
            object[] args = new object[0];
            string ret = ((string)(m_privateObject.Invoke("GetShutdownModeFromStorage", new System.Type[0], args)));
            return ret;
        }

        internal void SetShutdownModeIntoStorage(string value)
        {
            object[] args = new object[] {
                value};
            m_privateObject.Invoke("SetShutdownModeIntoStorage", new System.Type[] {
                    typeof(string)}, args);
        }

        internal bool GetShutdownModeFromUI(global::System.Windows.Forms.Control control, global::System.ComponentModel.PropertyDescriptor prop, ref object value)
        {
            object[] args = new object[] {
                control,
                prop,
                value};
            bool ret = ((bool)(m_privateObject.Invoke("GetShutdownModeFromUI", new System.Type[] {
                    typeof(global::System.Windows.Forms.Control),
                    typeof(global::System.ComponentModel.PropertyDescriptor),
                    typeof(object).MakeByRefType()}, args)));
            value = ((object)(args[2]));
            return ret;
        }

        internal bool SetShutdownModeIntoUI(global::System.Windows.Forms.Control control, global::System.ComponentModel.PropertyDescriptor prop, object value)
        {
            object[] args = new object[] {
                control,
                prop,
                value};
            bool ret = ((bool)(m_privateObject.Invoke("SetShutdownModeIntoUI", new System.Type[] {
                    typeof(global::System.Windows.Forms.Control),
                    typeof(global::System.ComponentModel.PropertyDescriptor),
                    typeof(object)}, args)));
            return ret;
        }

        internal global::System.ComponentModel.PropertyDescriptor GetUserDefinedPropertyDescriptor(string PropertyName)
        {
            object[] args = new object[] {
                PropertyName};
            global::System.ComponentModel.PropertyDescriptor ret = ((global::System.ComponentModel.PropertyDescriptor)(m_privateObject.Invoke("GetUserDefinedPropertyDescriptor", new System.Type[] {
                    typeof(string)}, args)));
            return ret;
        }

        internal bool ReadUserDefinedProperty(string PropertyName, ref object Value)
        {
            object[] args = new object[] {
                PropertyName,
                Value};
            bool ret = ((bool)(m_privateObject.Invoke("ReadUserDefinedProperty", new System.Type[] {
                    typeof(string),
                    typeof(object).MakeByRefType()}, args)));
            Value = ((object)(args[1]));
            return ret;
        }

        internal bool WriteUserDefinedProperty(string PropertyName, object Value)
        {
            object[] args = new object[] {
                PropertyName,
                Value};
            bool ret = ((bool)(m_privateObject.Invoke("WriteUserDefinedProperty", new System.Type[] {
                    typeof(string),
                    typeof(object)}, args)));
            return ret;
        }

        internal void SetCommonControls()
        {
            object[] args = new object[0];
            m_privateObject.Invoke("SetCommonControls", new System.Type[0], args);
        }

        internal bool MyApplicationFrameworkEnabled()
        {
            object[] args = new object[0];
            bool ret = ((bool)(m_privateObject.Invoke("MyApplicationFrameworkEnabled", new System.Type[0], args)));
            return ret;
        }

        internal string GetF1HelpKeyword()
        {
            object[] args = new object[0];
            string ret = ((string)(m_privateObject.Invoke("GetF1HelpKeyword", new System.Type[0], args)));
            return ret;
        }

        internal void PreInitPage()
        {
            object[] args = new object[0];
            m_privateObject.Invoke("PreInitPage", new System.Type[0], args);
        }

        internal void PostInitPage()
        {
            object[] args = new object[0];
            m_privateObject.Invoke("PostInitPage", new System.Type[0], args);
        }

        internal void ComboBoxes_DropDown(object sender, global::System.EventArgs e)
        {
            object[] args = new object[] {
                sender,
                e};
            m_privateObject.Invoke("ComboBoxes_DropDown", new System.Type[] {
                    typeof(object),
                    typeof(global::System.EventArgs)}, args);
        }

        internal global::Microsoft.VisualStudio.Editors.UnitTests.Microsoft_VisualStudio_Editors_MyApplication_ApplicationTypesAccessor GetAppTypeFromUI()
        {
            object[] args = new object[0];
            object _ret_val = m_privateObject.Invoke("GetAppTypeFromUI", new System.Type[0], args);
            global::Microsoft.VisualStudio.Editors.UnitTests.Microsoft_VisualStudio_Editors_MyApplication_ApplicationTypesAccessor _ret = null;
            if ((_ret_val != null))
            {
                _ret = new global::Microsoft.VisualStudio.Editors.UnitTests.Microsoft_VisualStudio_Editors_MyApplication_ApplicationTypesAccessor(_ret_val);
            }
            global::Microsoft.VisualStudio.Editors.UnitTests.Microsoft_VisualStudio_Editors_MyApplication_ApplicationTypesAccessor ret = _ret;
            return ret;
        }

        internal void AddRequiredReferences()
        {
            object[] args = new object[0];
            m_privateObject.Invoke("AddRequiredReferences", new System.Type[0], args);
        }

        internal void ViewCodeButton_Click(object sender, global::System.EventArgs e)
        {
            object[] args = new object[] {
                sender,
                e};
            m_privateObject.Invoke("ViewCodeButton_Click", new System.Type[] {
                    typeof(object),
                    typeof(global::System.EventArgs)}, args);
        }

        internal void MainWindowComboBox_DropDown(object sender, global::System.EventArgs e)
        {
            object[] args = new object[] {
                sender,
                e};
            m_privateObject.Invoke("MainWindowComboBox_DropDown", new System.Type[] {
                    typeof(object),
                    typeof(global::System.EventArgs)}, args);
        }

        internal bool MySettingsSupported()
        {
            object[] args = new object[0];
            bool ret = ((bool)(m_privateObject.Invoke("MySettingsSupported", new System.Type[0], args)));
            return ret;
        }

        internal bool IsNoneText(string Value)
        {
            object[] args = new object[] {
                Value};
            bool ret = ((bool)(m_privateObject.Invoke("IsNoneText", new System.Type[] {
                    typeof(string)}, args)));
            return ret;
        }

        internal void InitializeComponent()
        {
            object[] args = new object[0];
            m_privateObject.Invoke("InitializeComponent", new System.Type[0], args);
        }
    }
    [System.Diagnostics.DebuggerStepThrough()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TestTools.UnitTestGeneration", "1.0.0.0")]
    internal class Microsoft_VisualStudio_Editors_MyApplication_ApplicationTypesAccessor : BaseAccessor
    {

        protected static Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType m_privateType = new Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType(EDITORS_ASSEMBLY, "Microsoft.VisualStudio.Editors.MyApplication.ApplicationTypes");

        internal Microsoft_VisualStudio_Editors_MyApplication_ApplicationTypesAccessor(object target)
            :
                base(target, m_privateType)
        {
        }

        internal static global::Microsoft.VisualStudio.Editors.UnitTests.Microsoft_VisualStudio_Editors_MyApplication_ApplicationTypesAccessor WindowsApp
        {
            get
            {
                object _ret_val = m_privateType.GetStaticFieldOrProperty("WindowsApp");
                global::Microsoft.VisualStudio.Editors.UnitTests.Microsoft_VisualStudio_Editors_MyApplication_ApplicationTypesAccessor _ret = null;
                if ((_ret_val != null))
                {
                    _ret = new global::Microsoft.VisualStudio.Editors.UnitTests.Microsoft_VisualStudio_Editors_MyApplication_ApplicationTypesAccessor(_ret_val);
                }
                global::Microsoft.VisualStudio.Editors.UnitTests.Microsoft_VisualStudio_Editors_MyApplication_ApplicationTypesAccessor ret = _ret;
                return ret;
            }
        }

        internal static global::Microsoft.VisualStudio.Editors.UnitTests.Microsoft_VisualStudio_Editors_MyApplication_ApplicationTypesAccessor WindowsClassLib
        {
            get
            {
                object _ret_val = m_privateType.GetStaticFieldOrProperty("WindowsClassLib");
                global::Microsoft.VisualStudio.Editors.UnitTests.Microsoft_VisualStudio_Editors_MyApplication_ApplicationTypesAccessor _ret = null;
                if ((_ret_val != null))
                {
                    _ret = new global::Microsoft.VisualStudio.Editors.UnitTests.Microsoft_VisualStudio_Editors_MyApplication_ApplicationTypesAccessor(_ret_val);
                }
                global::Microsoft.VisualStudio.Editors.UnitTests.Microsoft_VisualStudio_Editors_MyApplication_ApplicationTypesAccessor ret = _ret;
                return ret;
            }
        }

        internal static global::Microsoft.VisualStudio.Editors.UnitTests.Microsoft_VisualStudio_Editors_MyApplication_ApplicationTypesAccessor CommandLineApp
        {
            get
            {
                object _ret_val = m_privateType.GetStaticFieldOrProperty("CommandLineApp");
                global::Microsoft.VisualStudio.Editors.UnitTests.Microsoft_VisualStudio_Editors_MyApplication_ApplicationTypesAccessor _ret = null;
                if ((_ret_val != null))
                {
                    _ret = new global::Microsoft.VisualStudio.Editors.UnitTests.Microsoft_VisualStudio_Editors_MyApplication_ApplicationTypesAccessor(_ret_val);
                }
                global::Microsoft.VisualStudio.Editors.UnitTests.Microsoft_VisualStudio_Editors_MyApplication_ApplicationTypesAccessor ret = _ret;
                return ret;
            }
        }

        internal static global::Microsoft.VisualStudio.Editors.UnitTests.Microsoft_VisualStudio_Editors_MyApplication_ApplicationTypesAccessor WindowsService
        {
            get
            {
                object _ret_val = m_privateType.GetStaticFieldOrProperty("WindowsService");
                global::Microsoft.VisualStudio.Editors.UnitTests.Microsoft_VisualStudio_Editors_MyApplication_ApplicationTypesAccessor _ret = null;
                if ((_ret_val != null))
                {
                    _ret = new global::Microsoft.VisualStudio.Editors.UnitTests.Microsoft_VisualStudio_Editors_MyApplication_ApplicationTypesAccessor(_ret_val);
                }
                global::Microsoft.VisualStudio.Editors.UnitTests.Microsoft_VisualStudio_Editors_MyApplication_ApplicationTypesAccessor ret = _ret;
                return ret;
            }
        }

        internal static global::Microsoft.VisualStudio.Editors.UnitTests.Microsoft_VisualStudio_Editors_MyApplication_ApplicationTypesAccessor WebControl
        {
            get
            {
                object _ret_val = m_privateType.GetStaticFieldOrProperty("WebControl");
                global::Microsoft.VisualStudio.Editors.UnitTests.Microsoft_VisualStudio_Editors_MyApplication_ApplicationTypesAccessor _ret = null;
                if ((_ret_val != null))
                {
                    _ret = new global::Microsoft.VisualStudio.Editors.UnitTests.Microsoft_VisualStudio_Editors_MyApplication_ApplicationTypesAccessor(_ret_val);
                }
                global::Microsoft.VisualStudio.Editors.UnitTests.Microsoft_VisualStudio_Editors_MyApplication_ApplicationTypesAccessor ret = _ret;
                return ret;
            }
        }
    }
    [System.Diagnostics.DebuggerStepThrough()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TestTools.UnitTestGeneration", "1.0.0.0")]
    internal class Microsoft_VisualStudio_Editors_PropertyPages_WPF_ApplicationPropPageVBWPF_TriStateAccessor : BaseAccessor
    {

        protected static Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType m_privateType = new Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType(EDITORS_ASSEMBLY, "Microsoft.VisualStudio.Editors.PropertyPages.WPF.ApplicationPropPageVBWPF+TriState");

        internal Microsoft_VisualStudio_Editors_PropertyPages_WPF_ApplicationPropPageVBWPF_TriStateAccessor(object target)
            :
                base(target, m_privateType)
        {
        }

        internal static global::Microsoft.VisualStudio.Editors.UnitTests.Microsoft_VisualStudio_Editors_PropertyPages_WPF_ApplicationPropPageVBWPF_TriStateAccessor False
        {
            get
            {
                object _ret_val = m_privateType.GetStaticFieldOrProperty("False");
                global::Microsoft.VisualStudio.Editors.UnitTests.Microsoft_VisualStudio_Editors_PropertyPages_WPF_ApplicationPropPageVBWPF_TriStateAccessor _ret = null;
                if ((_ret_val != null))
                {
                    _ret = new global::Microsoft.VisualStudio.Editors.UnitTests.Microsoft_VisualStudio_Editors_PropertyPages_WPF_ApplicationPropPageVBWPF_TriStateAccessor(_ret_val);
                }
                global::Microsoft.VisualStudio.Editors.UnitTests.Microsoft_VisualStudio_Editors_PropertyPages_WPF_ApplicationPropPageVBWPF_TriStateAccessor ret = _ret;
                return ret;
            }
        }

        internal static global::Microsoft.VisualStudio.Editors.UnitTests.Microsoft_VisualStudio_Editors_PropertyPages_WPF_ApplicationPropPageVBWPF_TriStateAccessor Disabled
        {
            get
            {
                object _ret_val = m_privateType.GetStaticFieldOrProperty("Disabled");
                global::Microsoft.VisualStudio.Editors.UnitTests.Microsoft_VisualStudio_Editors_PropertyPages_WPF_ApplicationPropPageVBWPF_TriStateAccessor _ret = null;
                if ((_ret_val != null))
                {
                    _ret = new global::Microsoft.VisualStudio.Editors.UnitTests.Microsoft_VisualStudio_Editors_PropertyPages_WPF_ApplicationPropPageVBWPF_TriStateAccessor(_ret_val);
                }
                global::Microsoft.VisualStudio.Editors.UnitTests.Microsoft_VisualStudio_Editors_PropertyPages_WPF_ApplicationPropPageVBWPF_TriStateAccessor ret = _ret;
                return ret;
            }
        }

        internal static global::Microsoft.VisualStudio.Editors.UnitTests.Microsoft_VisualStudio_Editors_PropertyPages_WPF_ApplicationPropPageVBWPF_TriStateAccessor True
        {
            get
            {
                object _ret_val = m_privateType.GetStaticFieldOrProperty("True");
                global::Microsoft.VisualStudio.Editors.UnitTests.Microsoft_VisualStudio_Editors_PropertyPages_WPF_ApplicationPropPageVBWPF_TriStateAccessor _ret = null;
                if ((_ret_val != null))
                {
                    _ret = new global::Microsoft.VisualStudio.Editors.UnitTests.Microsoft_VisualStudio_Editors_PropertyPages_WPF_ApplicationPropPageVBWPF_TriStateAccessor(_ret_val);
                }
                global::Microsoft.VisualStudio.Editors.UnitTests.Microsoft_VisualStudio_Editors_PropertyPages_WPF_ApplicationPropPageVBWPF_TriStateAccessor ret = _ret;
                return ret;
            }
        }
    }
    [System.Diagnostics.DebuggerStepThrough()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TestTools.UnitTestGeneration", "1.0.0.0")]
    internal class Microsoft_VisualStudio_Editors_PropertyPages_WPF_ApplicationPropPageVBWPF_StartupObjectOrUriAccessor : BaseAccessor
    {

        protected static Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType m_privateType = new Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType(EDITORS_ASSEMBLY, "Microsoft.VisualStudio.Editors.PropertyPages.WPF.ApplicationPropPageVBWPF+StartupObje" +
                "ctOrUri");

        internal Microsoft_VisualStudio_Editors_PropertyPages_WPF_ApplicationPropPageVBWPF_StartupObjectOrUriAccessor(object target)
            :
                base(target, m_privateType)
        {
        }

        internal string m_value
        {
            get
            {
                string ret = ((string)(m_privateObject.GetFieldOrProperty("m_value")));
                return ret;
            }
            set
            {
                m_privateObject.SetFieldOrProperty("m_value", value);
            }
        }

        internal string m_description
        {
            get
            {
                string ret = ((string)(m_privateObject.GetFieldOrProperty("m_description")));
                return ret;
            }
            set
            {
                m_privateObject.SetFieldOrProperty("m_description", value);
            }
        }

        internal string Value
        {
            get
            {
                string ret = ((string)(m_privateObject.GetProperty("Value")));
                return ret;
            }
        }

        internal string Description
        {
            get
            {
                string ret = ((string)(m_privateObject.GetProperty("Description")));
                return ret;
            }
        }

        internal static object CreatePrivate(string value, string description)
        {
            object[] args = new object[] {
                value,
                description};
            Microsoft.VisualStudio.TestTools.UnitTesting.PrivateObject priv_obj = new Microsoft.VisualStudio.TestTools.UnitTesting.PrivateObject(EDITORS_ASSEMBLY, "Microsoft.VisualStudio.Editors.PropertyPages.WPF.ApplicationPropPageVBWPF+StartupObje" +
                    "ctOrUri", new System.Type[] {
                    typeof(string),
                    typeof(string)}, args);
            return priv_obj.Target;
        }

        public override string ToString()
        {
            object[] args = new object[0];
            string ret = ((string)(m_privateObject.Invoke("ToString", new System.Type[0], args)));
            return ret;
        }

        public override bool Equals(object obj)
        {
            object[] args = new object[] {
                obj};
            bool ret = ((bool)(m_privateObject.Invoke("Equals", new System.Type[] {
                    typeof(object)}, args)));
            return ret;
        }

        public override int GetHashCode()
        {
            object[] args = new object[0];
            int ret = ((int)(m_privateObject.Invoke("GetHashCode", new System.Type[0], args)));
            return ret;
        }
    }

    [System.Diagnostics.DebuggerStepThrough()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TestTools.UnitTestGeneration", "1.0.0.0")]
    internal class Microsoft_VisualStudio_Editors_PropertyPages_WPF_ApplicationPropPageVBWPF_ShutdownModeAccessor : BaseAccessor
    {

        protected static Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType m_privateType = new Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType(EDITORS_ASSEMBLY, "Microsoft.VisualStudio.Editors.PropertyPages.WPF.ApplicationPropPageVBWPF+ShutdownMod" +
                "e");

        internal Microsoft_VisualStudio_Editors_PropertyPages_WPF_ApplicationPropPageVBWPF_ShutdownModeAccessor(object target)
            :
                base(target, m_privateType)
        {
        }

        internal string m_Value
        {
            get
            {
                string ret = ((string)(m_privateObject.GetFieldOrProperty("m_Value")));
                return ret;
            }
            set
            {
                m_privateObject.SetFieldOrProperty("m_Value", value);
            }
        }

        internal string m_Description
        {
            get
            {
                string ret = ((string)(m_privateObject.GetFieldOrProperty("m_Description")));
                return ret;
            }
            set
            {
                m_privateObject.SetFieldOrProperty("m_Description", value);
            }
        }

        internal string Value
        {
            get
            {
                string ret = ((string)(m_privateObject.GetProperty("Value")));
                return ret;
            }
        }

        internal string Description
        {
            get
            {
                string ret = ((string)(m_privateObject.GetProperty("Description")));
                return ret;
            }
        }

        internal static object CreatePrivate(string value, string description)
        {
            object[] args = new object[] {
                value,
                description};
            Microsoft.VisualStudio.TestTools.UnitTesting.PrivateObject priv_obj = new Microsoft.VisualStudio.TestTools.UnitTesting.PrivateObject(EDITORS_ASSEMBLY, "Microsoft.VisualStudio.Editors.PropertyPages.WPF.ApplicationPropPageVBWPF+ShutdownMod" +
                    "e", new System.Type[] {
                    typeof(string),
                    typeof(string)}, args);
            return priv_obj.Target;
        }

        public override string ToString()
        {
            object[] args = new object[0];
            string ret = ((string)(m_privateObject.Invoke("ToString", new System.Type[0], args)));
            return ret;
        }
    }

    [System.Diagnostics.DebuggerStepThrough()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TestTools.UnitTestGeneration", "1.0.0.0")]
    internal class Microsoft_VisualStudio_Editors_PropertyPages_TargetFrameworkAssembliesAccessor : BaseAccessor
    {

        protected static Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType m_privateType = new Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType(EDITORS_ASSEMBLY, "Microsoft.VisualStudio.Editors.PropertyPages.TargetFrameworkAssemblies");

        internal Microsoft_VisualStudio_Editors_PropertyPages_TargetFrameworkAssembliesAccessor(object target)
            :
                base(target, m_privateType)
        {
        }

        internal static string GetTargetFrameworkDescriptionFromVersion(global::Microsoft.VisualStudio.Shell.Interop.IVsTargetFrameworkAssemblies vsTargetFrameworkAssemblies, uint version)
        {
            object[] args = new object[] {
                vsTargetFrameworkAssemblies,
                version};
            string ret = ((string)(m_privateType.InvokeStatic("GetTargetFrameworkDescriptionFromVersion", new System.Type[] {
                    typeof(global::Microsoft.VisualStudio.Shell.Interop.IVsTargetFrameworkAssemblies),
                    typeof(uint)}, args)));
            return ret;
        }

        internal static uint[] GetSupportedTargetFrameworkAssemblyVersions(global::Microsoft.VisualStudio.Shell.Interop.IVsTargetFrameworkAssemblies vsTargetFrameworkAssemblies)
        {
            object[] args = new object[] {
                vsTargetFrameworkAssemblies};
            uint[] ret = ((uint[])(m_privateType.InvokeStatic("GetSupportedTargetFrameworkAssemblyVersions", new System.Type[] {
                    typeof(global::Microsoft.VisualStudio.Shell.Interop.IVsTargetFrameworkAssemblies)}, args)));
            return ret;
        }

        internal static object CreatePrivate()
        {
            Microsoft.VisualStudio.TestTools.UnitTesting.PrivateObject priv_obj = new Microsoft.VisualStudio.TestTools.UnitTesting.PrivateObject(EDITORS_ASSEMBLY, "Microsoft.VisualStudio.Editors.PropertyPages.TargetFrameworkAssemblies", new object[0]);
            return priv_obj.Target;
        }
    }

}


