// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information. 

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Linq;

namespace Microsoft.VisualStudio.ProjectSystem.Utilities
{
    /// <summary>
    /// A class that tracks a set of disposable objects and disposes them collectively.
    /// </summary>
    internal sealed class DisposableBag : IDisposableObservable
    {
        /// <summary>
        /// The set of disposable blocks.
        /// </summary>
        private ImmutableHashSet<IDisposable?> _disposables = ImmutableHashSet.Create<IDisposable?>();

        /// <summary>
        /// A value indicating whether this instance has been disposed.
        /// </summary>
        public bool IsDisposed { get; private set; }

        /// <summary>
        /// Disposes of all contained disposable items.
        /// </summary>
        public void Dispose()
        {
            bool disposedThisTime = false;
            ImmutableHashSet<IDisposable?>? disposables = null;
            lock (this)
            {
                if (!IsDisposed)
                {
                    // Two related cancellation tokens both end up tending to call this method, at roughly the same time.
                    // So to avoid deadlocks with those tokens themselves, it's imperative that we very carefully avoid
                    // executing outside (even framework) code within this lock.
                    disposedThisTime = true;
                    IsDisposed = true;
                    disposables = _disposables;
                    _disposables = _disposables.Clear();
                }
            }

            if (disposedThisTime)
            {
                DisposeAllIfNotNull(disposables);
            }
        }

        /// <summary>
        /// Adds a value to be disposed of when this collection is disposed of.
        /// </summary>
        /// <param name="disposable">The value to be disposed of later. May be <c>null</c>.</param>
        public void AddDisposable(IDisposable? disposable)
        {
            if (disposable == null)
            {
                return;
            }

            bool shouldDisposeArgument = false;
            lock (this)
            {
                if (IsDisposed)
                {
                    shouldDisposeArgument = true;
                }
                else
                {
                    _disposables = _disposables.Add(disposable);
                }
            }

            if (shouldDisposeArgument)
            {
                disposable.Dispose();
            }
        }

        /// <summary>
        /// Adds values to be disposed of when this collection is disposed of.
        /// </summary>
        public void AddDisposables(IEnumerable<IDisposable?> disposables)
        {
            Requires.NotNull(disposables, nameof(disposables));

            foreach (IDisposable? disposable in disposables)
            {
                AddDisposable(disposable);
            }
        }

        /// <summary>
        /// Removes a disposable value from the collection.
        /// </summary>
        /// <param name="disposable">The value to remove. May be <c>null</c>.</param>
        public void RemoveDisposable(IDisposable? disposable)
        {
            if (disposable == null)
            {
                return;
            }

            lock (this)
            {
                _disposables = _disposables.Remove(disposable);
            }
        }

        /// <summary>
        /// Calls <see cref="IDisposable.Dispose"/> on all elements in a sequence,
        /// allowing the sequence itself or elements inside it to be null.
        /// </summary>
        private static void DisposeAllIfNotNull(IEnumerable<IDisposable?>? sequence, bool cacheSequence = false)
        {
            if (sequence != null)
            {
                if (cacheSequence)
                {
                    // This makes us impervious to changes in the sequence generated by disposing elements of the sequence.
                    sequence = sequence.ToList();
                }

                foreach (IDisposable? item in sequence)
                {
                    item?.Dispose();
                }
            }
        }
    }
}
