// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Linq;
using Microsoft.VisualStudio.LanguageServices.ProjectSystem;

namespace Microsoft.VisualStudio.ProjectSystem.LanguageServices.Handlers
{
    /// <summary>
    ///     Responsible for coordinating changes and conflicts between evaluation and design-time builds, and pushing those changes
    ///     onto Roslyn via a <see cref="IWorkspaceProjectContext"/>.
    /// </summary>
    internal abstract partial class AbstractEvaluationCommandLineHandler
    {
        // This class is not thread-safe, and the assumption is that the caller will coordinate evaluations and design-time builds so 
        // that they do not enter this class at the same time.
        //
        // In the ideal world, we would simply wait for a design-time build to get the command-line arguments that would have been passed
        // to Csc/Vbc and push these onto Rolsyn. This behavior is what the legacy project system did, and when a user added or removed a 
        // file or changed the project, it performed a blocking wait on the design-time build before it returned control to the user. In 
        // CPS, design-time builds are not UI blocking, so control can be returned to the user before Roslyn has been told about the file, 
        // leading to the observable behavior where the source file for a period of time is without "project" IntelliSense. To counteract 
        // that, we push changes both in design-time builds *and* during evaluations, which gives the user results a lot faster than if we 
        // just pushed during design-time builds only.
        //
        // Typically, adds and removes of files found at evaluation time are also found during a design-time build, with the later also 
        // including generated files. This causes us to remember files that we've already sent to Roslyn, to avoid sending duplicate adds
        // or removes of the same file. Due to design-time builds being significantly slower than evaluations, there are also times where 
        // many evaluations have occured by the time the design-time build based on a past version of the ConfiguredProject has completed. 
        // This leads to conflicts.
        //
        // A conflict occurs when evaluation or design-time build adds a item that the other removed, or vice versa. 
        // 
        //   Examples of conflicts include:
        //
        //   - A user removes a item before a design-time build that contains the addition of that item has finished
        //   - A user adds a item before a design-time build that contains the removoal of that item has finished
        //   - A user adds a item that was previously generated by a target (but stopped generating it)
        //   - A user removes a item and in the same version it starts getting generated via a target during design-time build
        //
        //  Examples of changes that are not conflicts include:
        // 
        //   - A user adds a item and it appears as an addition in both evaluation and design-time build (the item is always added)
        //   - A user removes a item and it appears as removal in both evaluation and design-time build  (the item is always removed)
        //   - A target during design-time build generates an item that did not appear during evaluation (the item is always added)
        //   - A target, new since the last design-time build, removes a item that appeared during evaluation (the item is always removed)
        //
        // TODO: These are also not conflicts, but we're currently handling differently to a normal build, which we should fix:
        //
        //    - A target, since the very first design-time build, removed a item that appeared during evaluation (currently the item gets added).
        //          * This is because a design-time build IProjectChangeDescription is only a diff between itself and the previous build, 
        //            not between itself and evaluation, which means that design-time build diff never knows that the item was removed.
        //
        // Algorithm for resolving conflicts is as follows:
        //
        // 1. Walk every evaluation since the last design-time build, discarding those from conflict resolution that have a version less 
        //    than or equal to the current design-time build
        // 2. Walk every design-time build addition, if there's an associated removal in a later evaluation - we throw away the addition
        // 3. Walk every design-time build removal, if there's an associated addition in a later evaluation - we throw away the removal
        //
        private readonly HashSet<string> _paths = new HashSet<string>(StringComparers.Paths);
        private readonly Queue<VersionedProjectChangeDiff> _evaluations = new Queue<VersionedProjectChangeDiff>();
        private readonly UnconfiguredProject _project;

        /// <summary>
        ///     Initializes a new instance of the <see cref="AbstractEvaluationCommandLineHandler"/> class with the specified project.
        /// </summary>
        /// <exception cref="ArgumentNullException">
        ///     <paramref name="project"/> is <see langword="null"/>.
        /// </exception>
        protected AbstractEvaluationCommandLineHandler(UnconfiguredProject project)
        {
            Requires.NotNull(project, nameof(project));

            _project = project;
        }

        /// <summary>
        ///     Applys the specified version of evaluation <see cref="IProjectChangeDiff"/> and metadata to the underlying 
        ///     <see cref="IWorkspaceProjectContext"/>, indicating if the context is the currently active one.
        /// </summary>
        /// <exception cref="ArgumentNullException">
        ///     <paramref name="version"/> is <see langword="null"/>.
        ///     <para>
        ///         -or-
        ///     </para>
        ///     <paramref name="difference" /> is <see langword="null"/>.
        ///     <para>
        ///         -or-
        ///     </para>
        ///     <paramref name="metadata" /> is <see langword="null"/>.
        /// </exception>
        public void ApplyEvaluationChanges(IComparable version, IProjectChangeDiff difference, IImmutableDictionary<string, IImmutableDictionary<string, string>> metadata, bool isActiveContext)
        {
            Requires.NotNull(version, nameof(version));
            Requires.NotNull(version, nameof(version));
            Requires.NotNull(metadata, nameof(metadata));

            if (!difference.AnyChanges)
                return;

            difference = NormalizeDifferences(difference);
            EnqueueEvaluation(version, difference);

            ApplyChangesToContext(version, difference, metadata, isActiveContext);
        }

        /// <summary>
        ///     Applys the specified version of design-time build <see cref="IProjectChangeDiff"/> to the underlying
        ///     <see cref="IWorkspaceProjectContext"/>, indicating if the context is the currently active one.
        /// </summary>
        /// <exception cref="ArgumentNullException">
        ///     <paramref name="version"/> is <see langword="null"/>.
        ///     <para>
        ///         -or-
        ///     </para>
        ///     <paramref name="difference" /> is <see langword="null"/>.
        /// </exception>
        public void ApplyDesignTimeChanges(IComparable version, IProjectChangeDiff difference, bool isActiveContext)
        {
            Requires.NotNull(version, nameof(version));
            Requires.NotNull(difference, nameof(difference));

            if (!difference.AnyChanges)
                return;

            difference = NormalizeDifferences(difference);
            difference = ResolveDesignTimeConflicts(version, difference);

            ApplyChangesToContext(version, difference, ImmutableDictionary<string, IImmutableDictionary<string, string>>.Empty, isActiveContext);
        }

        protected abstract void AddToContext(string fullPath, IImmutableDictionary<string, string> metadata, bool isActiveContext);

        protected abstract void RemoveFromContext(string fullPath);

        private void ApplyChangesToContext(IComparable version, IProjectChangeDiff difference, IImmutableDictionary<string, IImmutableDictionary<string, string>> metadata, bool isActiveContext)
        {
            foreach (string includePath in difference.RemovedItems)
            {
                RemoveFromContextIfPresent(includePath);
            }

            foreach (string includePath in difference.AddedItems)
            {
                AddToContextIfNotPresent(includePath, metadata, isActiveContext);
            }

            // We Remove then Add changed items to pick up the Linked metadata
            foreach (string includePath in difference.ChangedItems)
            {
                RemoveFromContextIfPresent(includePath);
                AddToContextIfNotPresent(includePath, metadata, isActiveContext);
            }

            Assumes.True(difference.RenamedItems.Count == 0, "We should have normalized renames.");
        }

        private void RemoveFromContextIfPresent(string includePath)
        {
            string fullPath = _project.MakeRooted(includePath);
            if (_paths.Remove(fullPath))
            {
                RemoveFromContext(fullPath);
            }
        }

        private void AddToContextIfNotPresent(string includePath, IImmutableDictionary<string, IImmutableDictionary<string, string>> metadata, bool isActiveContext)
        {
            string fullPath = _project.MakeRooted(includePath);
            if (_paths.Add(fullPath))
            {
                var itemMetadata = metadata.GetValueOrDefault(includePath, ImmutableDictionary<string, string>.Empty);
                AddToContext(fullPath, itemMetadata, isActiveContext);
            }
        }

        private IProjectChangeDiff ResolveDesignTimeConflicts(IComparable designTimeVersion, IProjectChangeDiff designTimeDifference)
        {
            DiscardOutOfDateEvaluations(designTimeVersion);

            // Walk all evaluations (if any) that occurred since we launched and resolve the conflicts
            foreach (VersionedProjectChangeDiff evaluation in _evaluations)
            {
                Assumes.True(evaluation.Version.IsLaterThan(designTimeVersion), "Attempted to resolve a conflict between a design-time build and an earlier evaluation.");

                designTimeDifference = ResolveConflicts(evaluation.Difference, designTimeDifference);
            }

            return designTimeDifference;
        }

        private IProjectChangeDiff ResolveConflicts(IProjectChangeDiff evaluationDifferences, IProjectChangeDiff designTimeDifferences)
        {
            // Remove added items that were removed by later evaluations, and vice versa
            IImmutableSet<string> added = designTimeDifferences.AddedItems.Except(evaluationDifferences.RemovedItems);
            IImmutableSet<string> removed = designTimeDifferences.RemovedItems.Except(evaluationDifferences.AddedItems);

            return new ProjectChangeDiff(added, removed, designTimeDifferences.ChangedItems);
        }

        private void DiscardOutOfDateEvaluations(IComparable version)
        {
            // Throw away evaluations that are the same version or earlier than the design-time build
            // version as it has more up-to-date information on the the current state of the project

            // Note, evaluations could be empty if previous evaluations resulted in no new changes
            while (_evaluations.Count > 0)
            {
                VersionedProjectChangeDiff evaluation = _evaluations.Peek();
                if (evaluation.Version.IsEarlierThanOrEqualTo(version))
                {
                    _evaluations.Dequeue();
                }
            }
        }

        private void EnqueueEvaluation(IComparable version, IProjectChangeDiff evaluationDifference)
        {
            Assumes.False(_evaluations.Count > 0 && version.IsEarlierThanOrEqualTo(_evaluations.Peek().Version), "Attempted to push an evaluation that regressed in version.");

            _evaluations.Enqueue(new VersionedProjectChangeDiff(version, evaluationDifference));
        }

        private IProjectChangeDiff NormalizeDifferences(IProjectChangeDiff difference)
        {
            // Optimize for common case
            if (difference.RenamedItems.Count == 0)
                return difference;

            // Treat renamed items as just as an Add and Remove, makes finding conflicts easier
            IEnumerable<string> renamedNewNames = difference.RenamedItems.Select(r => r.Value);
            IEnumerable<string> renamedOldNames = difference.RenamedItems.Select(e => e.Key);

            IImmutableSet<string> added = difference.AddedItems.Union(renamedNewNames);
            IImmutableSet<string> removed = difference.RemovedItems.Union(renamedOldNames);

            return new ProjectChangeDiff(added, removed, difference.ChangedItems);
        }
    }
}
