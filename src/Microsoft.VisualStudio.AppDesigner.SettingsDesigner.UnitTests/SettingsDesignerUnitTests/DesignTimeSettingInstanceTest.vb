'The following code was generated by Microsoft Visual Studio 2005.
'The test owner should check each test for validity.
Imports Microsoft.VisualStudio.TestTools.UnitTesting
Imports System
Imports System.Text
Imports System.Collections
Imports System.Collections.Generic
Imports SettingsDesignerUnitTests
Imports System.ComponentModel
Imports System.Runtime.Serialization



'''<summary>
'''This is a test class for Microsoft.VisualStudio.Editors.SettingsDesigner.DesignTimeSettingInstance and is intended
'''to contain all Microsoft.VisualStudio.Editors.SettingsDesigner.DesignTimeSettingInstance Unit Tests
'''</summary>
<TestClass()> _
Public Class DesignTimeSettingInstanceTest


    Private testContextInstance As TestContext

    '''<summary>
    '''Gets or sets the test context which provides
    '''information about and functionality for the current test run.
    '''</summary>
    Public Property TestContext() As TestContext
        Get
            Return testContextInstance
        End Get
        Set(ByVal value As TestContext)
            testContextInstance = value
        End Set
    End Property
#Region "Additional test attributes"
    '
    'You can use the following additional attributes as you write your tests:
    '
    'Use ClassInitialize to run code before running the first test in the class
    '
    '<ClassInitialize()>  _
    'Public Shared Sub MyClassInitialize(ByVal testContext As TestContext)
    'End Sub
    '
    'Use ClassCleanup to run code after all tests in a class have run
    '
    '<ClassCleanup()>  _
    'Public Shared Sub MyClassCleanup()
    'End Sub
    '
    'Use TestInitialize to run code before running each test
    '
    '<TestInitialize()>  _
    'Public Sub MyTestInitialize()
    'End Sub
    '
    'Use TestCleanup to run code after each test has run
    '
    '<TestCleanup()>  _
    'Public Sub MyTestCleanup()
    'End Sub
    '
#End Region


    '''<summary>
    '''A test for Description()
    '''</summary>
    <DeploymentItem("Microsoft.VisualStudio.Editors.dll"), _
     TestMethod()> _
    Public Sub DescriptionTest()
        Dim target As Component = Microsoft_VisualStudio_Editors_SettingsDesigner_DesignTimeSettingInstanceAccessor.CreatePrivate

        Dim val As String = "This is a description"

        Dim accessor As Microsoft_VisualStudio_Editors_SettingsDesigner_DesignTimeSettingInstanceAccessor = New Microsoft_VisualStudio_Editors_SettingsDesigner_DesignTimeSettingInstanceAccessor(target)
        accessor.m_description = val

        Assert.AreEqual(val, accessor.Description, "Microsoft.VisualStudio.Editors.SettingsDesigner.DesignTimeSettingInstance.Descrip" & _
                "tion was not set correctly.")
    End Sub

    '''<summary>
    '''A test for GenerateDefaultValueInCode()
    '''</summary>
    <DeploymentItem("Microsoft.VisualStudio.Editors.dll"), _
     TestMethod()> _
    Public Sub GenerateDefaultValueInCodeTest()

    End Sub

    '''<summary>
    '''A test for GetAttributes()
    '''</summary>
    <DeploymentItem("Microsoft.VisualStudio.Editors.dll"), _
     TestMethod()> _
    Public Sub GetAttributesTest()
        Dim target As Component = Microsoft_VisualStudio_Editors_SettingsDesigner_DesignTimeSettingInstanceAccessor.CreatePrivate

        Dim accessor As Microsoft_VisualStudio_Editors_SettingsDesigner_DesignTimeSettingInstanceAccessor = New Microsoft_VisualStudio_Editors_SettingsDesigner_DesignTimeSettingInstanceAccessor(target)

        Dim expected As AttributeCollection = Nothing
        Dim actual As AttributeCollection

        actual = accessor.GetAttributes

        Assert.IsTrue(actual.Contains(New System.ComponentModel.Design.HelpKeywordAttribute("ApplicationSetting")))
        Assert.AreEqual(1, actual.Count, "Microsoft.VisualStudio.Editors.SettingsDesigner.DesignTimeSettingInstance.GetAttr" & _
                "ibutes did not return the expected value.")
    End Sub

    '''<summary>
    '''A test for GetClassName()
    '''</summary>
    <DeploymentItem("Microsoft.VisualStudio.Editors.dll"), _
     TestMethod()> _
    Public Sub GetClassNameTest()
        Dim target As Component = Microsoft_VisualStudio_Editors_SettingsDesigner_DesignTimeSettingInstanceAccessor.CreatePrivate

        Dim accessor As Microsoft_VisualStudio_Editors_SettingsDesigner_DesignTimeSettingInstanceAccessor = New Microsoft_VisualStudio_Editors_SettingsDesigner_DesignTimeSettingInstanceAccessor(target)

        Dim expected As String = "Microsoft.VisualStudio.Editors.SettingsDesigner.DesignTimeSettingInstance"
        Dim actual As String

        actual = accessor.GetClassName

        Assert.AreEqual(expected, actual, "Microsoft.VisualStudio.Editors.SettingsDesigner.DesignTimeSettingInstance.GetClas" & _
                "sName did not return the expected value.")
    End Sub

    '''<summary>
    '''A test for GetComponentName()
    '''</summary>
    <DeploymentItem("Microsoft.VisualStudio.Editors.dll"), _
     TestMethod()> _
    Public Sub GetComponentNameTest()
        Dim target As Component = Microsoft_VisualStudio_Editors_SettingsDesigner_DesignTimeSettingInstanceAccessor.CreatePrivate

        Dim accessor As Microsoft_VisualStudio_Editors_SettingsDesigner_DesignTimeSettingInstanceAccessor = New Microsoft_VisualStudio_Editors_SettingsDesigner_DesignTimeSettingInstanceAccessor(target)

        Dim expected As String = "Foo"
        accessor.SetName(expected)
        Dim actual As String

        actual = accessor.GetComponentName

        Assert.AreEqual(expected, actual, "Microsoft.VisualStudio.Editors.SettingsDesigner.DesignTimeSettingInstance.GetComp" & _
                "onentName did not return the expected value.")
    End Sub

    '''<summary>
    '''A test for GetConverter()
    '''</summary>
    <DeploymentItem("Microsoft.VisualStudio.Editors.dll"), _
     TestMethod()> _
    Public Sub GetConverterTest()
        Dim target As Component = Microsoft_VisualStudio_Editors_SettingsDesigner_DesignTimeSettingInstanceAccessor.CreatePrivate

        Dim accessor As Microsoft_VisualStudio_Editors_SettingsDesigner_DesignTimeSettingInstanceAccessor = New Microsoft_VisualStudio_Editors_SettingsDesigner_DesignTimeSettingInstanceAccessor(target)

        Dim expected As TypeConverter = Nothing
        Dim actual As TypeConverter

        actual = accessor.GetConverter

        Assert.AreEqual(expected, actual, "Microsoft.VisualStudio.Editors.SettingsDesigner.DesignTimeSettingInstance.GetConv" & _
                "erter did not return the expected value.")
    End Sub

    '''<summary>
    '''A test for GetDefaultEvent()
    '''</summary>
    <DeploymentItem("Microsoft.VisualStudio.Editors.dll"), _
     TestMethod()> _
    Public Sub GetDefaultEventTest()
        Dim target As Component = Microsoft_VisualStudio_Editors_SettingsDesigner_DesignTimeSettingInstanceAccessor.CreatePrivate

        Dim accessor As Microsoft_VisualStudio_Editors_SettingsDesigner_DesignTimeSettingInstanceAccessor = New Microsoft_VisualStudio_Editors_SettingsDesigner_DesignTimeSettingInstanceAccessor(target)

        Dim expected As EventDescriptor = Nothing
        Dim actual As EventDescriptor

        actual = accessor.GetDefaultEvent

        Assert.AreEqual(expected, actual, "Microsoft.VisualStudio.Editors.SettingsDesigner.DesignTimeSettingInstance.GetDefa" & _
                "ultEvent did not return the expected value.")
    End Sub

    '''<summary>
    '''A test for GetDefaultProperty()
    '''</summary>
    <DeploymentItem("Microsoft.VisualStudio.Editors.dll"), _
     TestMethod()> _
    Public Sub GetDefaultPropertyTest()
        Dim target As Component = Microsoft_VisualStudio_Editors_SettingsDesigner_DesignTimeSettingInstanceAccessor.CreatePrivate

        Dim accessor As Microsoft_VisualStudio_Editors_SettingsDesigner_DesignTimeSettingInstanceAccessor = New Microsoft_VisualStudio_Editors_SettingsDesigner_DesignTimeSettingInstanceAccessor(target)

        Dim expected As PropertyDescriptor = accessor.NameProperty
        Dim actual As PropertyDescriptor

        actual = accessor.GetDefaultProperty

        Assert.AreSame(expected, actual, "Microsoft.VisualStudio.Editors.SettingsDesigner.DesignTimeSettingInstance.GetDefa" & _
                "ultProperty did not return the expected value.")
    End Sub

    '''<summary>
    '''A test for GetEditor(ByVal System.Type)
    '''</summary>
    <DeploymentItem("Microsoft.VisualStudio.Editors.dll"), _
     TestMethod()> _
    Public Sub GetEditorTest()
        Dim target As Component = Microsoft_VisualStudio_Editors_SettingsDesigner_DesignTimeSettingInstanceAccessor.CreatePrivate

        Dim accessor As Microsoft_VisualStudio_Editors_SettingsDesigner_DesignTimeSettingInstanceAccessor = New Microsoft_VisualStudio_Editors_SettingsDesigner_DesignTimeSettingInstanceAccessor(target)

        Dim editorBaseType As Type = Nothing

        Dim expected As Object = Nothing
        Dim actual As Object

        actual = accessor.GetEditor(editorBaseType)

        ' We don't have a UI type editor for this guy!
        Assert.AreEqual(expected, actual, "Microsoft.VisualStudio.Editors.SettingsDesigner.DesignTimeSettingInstance.GetEdit" & _
                "or did not return the expected value.")
    End Sub

    '''<summary>
    '''A test for GetEvents()
    '''</summary>
    <DeploymentItem("Microsoft.VisualStudio.Editors.dll"), _
     TestMethod()> _
    Public Sub GetEventsTest()
        Dim target As Component = Microsoft_VisualStudio_Editors_SettingsDesigner_DesignTimeSettingInstanceAccessor.CreatePrivate

        Dim accessor As Microsoft_VisualStudio_Editors_SettingsDesigner_DesignTimeSettingInstanceAccessor = New Microsoft_VisualStudio_Editors_SettingsDesigner_DesignTimeSettingInstanceAccessor(target)

        Dim actual As EventDescriptorCollection

        actual = accessor.GetEvents

        Assert.AreEqual(0, actual.Count, "Microsoft.VisualStudio.Editors.SettingsDesigner.DesignTimeSettingInstance.GetEven" & _
                "ts did not return the expected value.")
    End Sub

    '''<summary>
    '''A test for GetEvents(ByVal System.Attribute())
    '''</summary>
    <DeploymentItem("Microsoft.VisualStudio.Editors.dll"), _
     TestMethod()> _
    Public Sub GetEventsTest1()
        Dim target As Component = Microsoft_VisualStudio_Editors_SettingsDesigner_DesignTimeSettingInstanceAccessor.CreatePrivate

        Dim accessor As Microsoft_VisualStudio_Editors_SettingsDesigner_DesignTimeSettingInstanceAccessor = New Microsoft_VisualStudio_Editors_SettingsDesigner_DesignTimeSettingInstanceAccessor(target)

        Dim attributes() As Attribute = New System.Attribute() {}

        Dim actual As EventDescriptorCollection

        actual = accessor.GetEvents(attributes)

        Assert.AreEqual(0, actual.Count, "Microsoft.VisualStudio.Editors.SettingsDesigner.DesignTimeSettingInstance.GetEven" & _
                "ts did not return the expected value.")
    End Sub

    '''<summary>
    '''A test for GetProperties()
    '''</summary>
    <DeploymentItem("Microsoft.VisualStudio.Editors.dll"), _
     TestMethod()> _
    Public Sub GetPropertiesTest()
        Dim target As Component = Microsoft_VisualStudio_Editors_SettingsDesigner_DesignTimeSettingInstanceAccessor.CreatePrivate

        Dim accessor As Microsoft_VisualStudio_Editors_SettingsDesigner_DesignTimeSettingInstanceAccessor = New Microsoft_VisualStudio_Editors_SettingsDesigner_DesignTimeSettingInstanceAccessor(target)

        Dim actual As PropertyDescriptorCollection

        actual = accessor.GetProperties

        Assert.IsTrue(actual.Contains(TryCast(accessor.m_serializedValuePropertyDescriptor.Target, System.ComponentModel.PropertyDescriptor)))
        Assert.IsTrue(actual.Contains(TryCast(accessor.m_settingTypeNamePropertyDescriptor.Target, System.ComponentModel.PropertyDescriptor)))
        Assert.IsTrue(actual.Contains(TryCast(accessor.m_scopePropertyDescriptor.Target, System.ComponentModel.PropertyDescriptor)))
        Assert.IsTrue(actual.Contains(TryCast(accessor.m_roamingPropertyDescriptor.Target, System.ComponentModel.PropertyDescriptor)))
        Assert.IsTrue(actual.Contains(TryCast(accessor.m_providerPropertyDescriptor.Target, System.ComponentModel.PropertyDescriptor)))
        Assert.IsTrue(actual.Contains(TryCast(accessor.m_namePropertyDescriptor.Target, System.ComponentModel.PropertyDescriptor)))
        Assert.IsTrue(actual.Contains(TryCast(accessor.m_generateDefaultValueInCodePropertyDescriptor.Target, System.ComponentModel.PropertyDescriptor)))
        Assert.IsTrue(actual.Contains(TryCast(accessor.m_descriptionPropertyDescriptor.Target, System.ComponentModel.PropertyDescriptor)))
        Assert.AreEqual(actual.Count, 8, "Microsoft.VisualStudio.Editors.SettingsDesigner.DesignTimeSettingInstance.GetProp" & _
                "erties did not return the expected value.")
    End Sub

    '''<summary>
    '''A test for GetProperties(ByVal System.Attribute())
    '''</summary>
    <DeploymentItem("Microsoft.VisualStudio.Editors.dll"), _
     TestMethod()> _
    Public Sub GetPropertiesTest_WithAttributes()
        Dim target As Component = Microsoft_VisualStudio_Editors_SettingsDesigner_DesignTimeSettingInstanceAccessor.CreatePrivate

        Dim accessor As Microsoft_VisualStudio_Editors_SettingsDesigner_DesignTimeSettingInstanceAccessor = New Microsoft_VisualStudio_Editors_SettingsDesigner_DesignTimeSettingInstanceAccessor(target)

        Dim attributes() As Attribute = New System.Attribute() {}

        Dim actual As PropertyDescriptorCollection

        actual = accessor.GetProperties(attributes)

        Assert.IsTrue(actual.Contains(TryCast(accessor.m_serializedValuePropertyDescriptor.Target, System.ComponentModel.PropertyDescriptor)))
        Assert.IsTrue(actual.Contains(TryCast(accessor.m_settingTypeNamePropertyDescriptor.Target, System.ComponentModel.PropertyDescriptor)))
        Assert.IsTrue(actual.Contains(TryCast(accessor.m_scopePropertyDescriptor.Target, System.ComponentModel.PropertyDescriptor)))
        Assert.IsTrue(actual.Contains(TryCast(accessor.m_roamingPropertyDescriptor.Target, System.ComponentModel.PropertyDescriptor)))
        Assert.IsTrue(actual.Contains(TryCast(accessor.m_providerPropertyDescriptor.Target, System.ComponentModel.PropertyDescriptor)))
        Assert.IsTrue(actual.Contains(TryCast(accessor.m_namePropertyDescriptor.Target, System.ComponentModel.PropertyDescriptor)))
        Assert.IsTrue(actual.Contains(TryCast(accessor.m_generateDefaultValueInCodePropertyDescriptor.Target, System.ComponentModel.PropertyDescriptor)))
        Assert.IsTrue(actual.Contains(TryCast(accessor.m_descriptionPropertyDescriptor.Target, System.ComponentModel.PropertyDescriptor)))
        Assert.AreEqual(actual.Count, 8, "Microsoft.VisualStudio.Editors.SettingsDesigner.DesignTimeSettingInstance.GetProp" & _
                "erties did not return the expected value.")
    End Sub

    '''<summary>
    '''A test for GetPropertyOwner(ByVal System.ComponentModel.PropertyDescriptor)
    '''</summary>
    <DeploymentItem("Microsoft.VisualStudio.Editors.dll"), _
     Ignore(), _
     TestMethod()> _
    Public Sub GetPropertyOwnerTest()
        Dim target As Component = Microsoft_VisualStudio_Editors_SettingsDesigner_DesignTimeSettingInstanceAccessor.CreatePrivate

        Dim accessor As Microsoft_VisualStudio_Editors_SettingsDesigner_DesignTimeSettingInstanceAccessor = New Microsoft_VisualStudio_Editors_SettingsDesigner_DesignTimeSettingInstanceAccessor(target)

        Dim pd As PropertyDescriptor = Nothing 'TODO: Initialize to an appropriate value

        Dim expected As Object = Nothing
        Dim actual As Object

        actual = accessor.GetPropertyOwner(pd)

        Assert.AreEqual(expected, actual, "Microsoft.VisualStudio.Editors.SettingsDesigner.DesignTimeSettingInstance.GetProp" & _
                "ertyOwner did not return the expected value.")
        Assert.Inconclusive("Verify the correctness of this test method.")
    End Sub

    '''<summary>
    '''A test for Name()
    '''</summary>
    <DeploymentItem("Microsoft.VisualStudio.Editors.dll"), _
     TestMethod()> _
    Public Sub NameTest()
        Dim target As Component = Microsoft_VisualStudio_Editors_SettingsDesigner_DesignTimeSettingInstanceAccessor.CreatePrivate

        Dim val As String = "My name"

        Dim accessor As Microsoft_VisualStudio_Editors_SettingsDesigner_DesignTimeSettingInstanceAccessor = New Microsoft_VisualStudio_Editors_SettingsDesigner_DesignTimeSettingInstanceAccessor(target)
        accessor.m_name = val

        Assert.AreEqual(val, accessor.Name, "Microsoft.VisualStudio.Editors.SettingsDesigner.DesignTimeSettingInstance.Name wa" & _
                "s not set correctly.")
    End Sub

    '''<summary>
    '''A test for NameProperty()
    '''</summary>
    <DeploymentItem("Microsoft.VisualStudio.Editors.dll"), _
     TestMethod()> _
    Public Sub NamePropertyTest()
        Dim target As Component = Microsoft_VisualStudio_Editors_SettingsDesigner_DesignTimeSettingInstanceAccessor.CreatePrivate

        Dim accessor As Microsoft_VisualStudio_Editors_SettingsDesigner_DesignTimeSettingInstanceAccessor = New Microsoft_VisualStudio_Editors_SettingsDesigner_DesignTimeSettingInstanceAccessor(target)


        Assert.AreEqual(accessor.NameProperty.Name, "Name", "Microsoft.VisualStudio.Editors.SettingsDesigner.DesignTimeSettingInstance.NamePro" & _
                "perty was not set correctly.")
    End Sub

    '''<summary>
    '''A test for New()
    '''</summary>
    <DeploymentItem("Microsoft.VisualStudio.Editors.dll"), _
     TestMethod()> _
    Public Sub ConstructorTest()
        Dim target As Component = Microsoft_VisualStudio_Editors_SettingsDesigner_DesignTimeSettingInstanceAccessor.CreatePrivate
        Dim accessor As New Microsoft_VisualStudio_Editors_SettingsDesigner_DesignTimeSettingInstanceAccessor(target)

        Assert.AreEqual(accessor.m_settingScope, Global.SettingsDesignerUnitTests.Microsoft_VisualStudio_Editors_SettingsDesigner_DesignTimeSettingInstance_SettingScopeAccessor.User)
    End Sub

    '''<summary>
    '''A test for New(ByVal System.Runtime.Serialization.SerializationInfo, ByVal System.Runtime.Serialization.StreamingContext)
    '''</summary>
    <DeploymentItem("Microsoft.VisualStudio.Editors.dll"), _
     Ignore(), _
     TestMethod()> _
    Public Sub ConstructorTest_SerializationConstructor()
        Dim Info As SerializationInfo = Nothing 'TODO: Initialize to an appropriate value

        Dim Context As StreamingContext = Nothing 'TODO: Initialize to an appropriate value

        Dim target As Component = Microsoft_VisualStudio_Editors_SettingsDesigner_DesignTimeSettingInstanceAccessor.CreatePrivate(Info, Context)

        'TODO: Implement code to verify target
        Assert.Inconclusive("TODO: Implement code to verify target")
    End Sub

    '''<summary>
    '''A test for Provider()
    '''</summary>
    <DeploymentItem("Microsoft.VisualStudio.Editors.dll"), _
     TestMethod()> _
    Public Sub ProviderTest()
        Dim target As Component = Microsoft_VisualStudio_Editors_SettingsDesigner_DesignTimeSettingInstanceAccessor.CreatePrivate

        Dim val As String = "Foo"

        Dim accessor As Microsoft_VisualStudio_Editors_SettingsDesigner_DesignTimeSettingInstanceAccessor = New Microsoft_VisualStudio_Editors_SettingsDesigner_DesignTimeSettingInstanceAccessor(target)

        accessor.m_provider = val


        Assert.AreEqual(val, accessor.Provider, "Microsoft.VisualStudio.Editors.SettingsDesigner.DesignTimeSettingInstance.Provide" & _
                "r was not set correctly.")
    End Sub

    '''<summary>
    '''A test for Roaming()
    '''</summary>
    <DeploymentItem("Microsoft.VisualStudio.Editors.dll"), _
     TestMethod()> _
    Public Sub RoamingTest()
        Dim target As Component = Microsoft_VisualStudio_Editors_SettingsDesigner_DesignTimeSettingInstanceAccessor.CreatePrivate

        Dim val As Boolean 'TODO: Assign to an appropriate value for the property

        Dim accessor As Microsoft_VisualStudio_Editors_SettingsDesigner_DesignTimeSettingInstanceAccessor = New Microsoft_VisualStudio_Editors_SettingsDesigner_DesignTimeSettingInstanceAccessor(target)

        accessor.m_roaming = val


        Assert.AreEqual(val, accessor.Roaming, "Microsoft.VisualStudio.Editors.SettingsDesigner.DesignTimeSettingInstance.Roaming" & _
                " was not set correctly.")
    End Sub

    '''<summary>
    '''A test for Scope()
    '''</summary>
    <DeploymentItem("Microsoft.VisualStudio.Editors.dll"), _
     Ignore(), _
     TestMethod()> _
    Public Sub ScopeTest()
        Dim target As Component = Microsoft_VisualStudio_Editors_SettingsDesigner_DesignTimeSettingInstanceAccessor.CreatePrivate

        Dim val As Microsoft_VisualStudio_Editors_SettingsDesigner_DesignTimeSettingInstance_SettingScopeAccessor = Global.SettingsDesignerUnitTests.Microsoft_VisualStudio_Editors_SettingsDesigner_DesignTimeSettingInstance_SettingScopeAccessor.Application

        Dim accessor As Microsoft_VisualStudio_Editors_SettingsDesigner_DesignTimeSettingInstanceAccessor = New Microsoft_VisualStudio_Editors_SettingsDesigner_DesignTimeSettingInstanceAccessor(target)
        accessor.m_settingScope = val

        Assert.AreEqual(CInt(val.Target), CInt(accessor.Scope.Target), "Microsoft.VisualStudio.Editors.SettingsDesigner.DesignTimeSettingInstance.Scope w" & _
                "as not set correctly.")
    End Sub

    '''<summary>
    '''A test for ScopeProperty()
    '''</summary>
    <DeploymentItem("Microsoft.VisualStudio.Editors.dll"), _
     TestMethod()> _
    Public Sub ScopePropertyTest()
        Dim target As Component = Microsoft_VisualStudio_Editors_SettingsDesigner_DesignTimeSettingInstanceAccessor.CreatePrivate

        Dim accessor As Microsoft_VisualStudio_Editors_SettingsDesigner_DesignTimeSettingInstanceAccessor = New Microsoft_VisualStudio_Editors_SettingsDesigner_DesignTimeSettingInstanceAccessor(target)


        Assert.AreEqual("Scope", accessor.ScopeProperty.Name, "Microsoft.VisualStudio.Editors.SettingsDesigner.DesignTimeSettingInstance.ScopePr" & _
                "operty was not set correctly.")
    End Sub

    '''<summary>
    '''A test for SerializedValue()
    '''</summary>
    <DeploymentItem("Microsoft.VisualStudio.Editors.dll"), _
     TestMethod()> _
    Public Sub SerializedValueTest()
        Dim target As Component = Microsoft_VisualStudio_Editors_SettingsDesigner_DesignTimeSettingInstanceAccessor.CreatePrivate

        Dim val As String = "Dumdidu"

        Dim accessor As Microsoft_VisualStudio_Editors_SettingsDesigner_DesignTimeSettingInstanceAccessor = New Microsoft_VisualStudio_Editors_SettingsDesigner_DesignTimeSettingInstanceAccessor(target)
        accessor.m_serializedValue = val

        Assert.AreEqual(val, accessor.SerializedValue, "Microsoft.VisualStudio.Editors.SettingsDesigner.DesignTimeSettingInstance.Seriali" & _
                "zedValue was not set correctly.")
    End Sub

    '''<summary>
    '''A test for SerializedValueProperty()
    '''</summary>
    <DeploymentItem("Microsoft.VisualStudio.Editors.dll"), _
     TestMethod()> _
    Public Sub SerializedValuePropertyTest()
        Dim target As Component = Microsoft_VisualStudio_Editors_SettingsDesigner_DesignTimeSettingInstanceAccessor.CreatePrivate

        Dim accessor As Microsoft_VisualStudio_Editors_SettingsDesigner_DesignTimeSettingInstanceAccessor = New Microsoft_VisualStudio_Editors_SettingsDesigner_DesignTimeSettingInstanceAccessor(target)


        Assert.AreEqual("SerializedValue", accessor.SerializedValueProperty.Name, "Microsoft.VisualStudio.Editors.SettingsDesigner.DesignTimeSettingInstance.Seriali" & _
                "zedValueProperty was not set correctly.")
    End Sub

    '''<summary>
    '''A test for SetDescription(ByVal String)
    '''</summary>
    <DeploymentItem("Microsoft.VisualStudio.Editors.dll"), _
     TestMethod()> _
    Public Sub SetDescriptionTest()
        Dim target As Component = Microsoft_VisualStudio_Editors_SettingsDesigner_DesignTimeSettingInstanceAccessor.CreatePrivate

        Dim accessor As Microsoft_VisualStudio_Editors_SettingsDesigner_DesignTimeSettingInstanceAccessor = New Microsoft_VisualStudio_Editors_SettingsDesigner_DesignTimeSettingInstanceAccessor(target)

        Dim value As String = "Onk"

        accessor.SetDescription(value)

        Assert.AreEqual(value, accessor.m_description)
        Assert.AreEqual(value, accessor.Description)
    End Sub

    '''<summary>
    '''A test for SetName(ByVal String)
    '''</summary>
    <DeploymentItem("Microsoft.VisualStudio.Editors.dll"), _
     TestMethod()> _
    Public Sub SetNameTest()
        Dim target As Component = Microsoft_VisualStudio_Editors_SettingsDesigner_DesignTimeSettingInstanceAccessor.CreatePrivate

        Dim accessor As Microsoft_VisualStudio_Editors_SettingsDesigner_DesignTimeSettingInstanceAccessor = New Microsoft_VisualStudio_Editors_SettingsDesigner_DesignTimeSettingInstanceAccessor(target)

        Dim value As String = "A name"

        accessor.SetName(value)

        Assert.AreEqual(value, accessor.m_name)
        Assert.AreEqual(value, accessor.Name)
    End Sub

    '''<summary>
    '''A test for SetScope(ByVal Microsoft.VisualStudio.Editors.SettingsDesigner.DesignTimeSettingInstance.SettingScope)
    '''</summary>
    <DeploymentItem("Microsoft.VisualStudio.Editors.dll"), _
     Ignore(), _
     TestMethod()> _
    Public Sub SetScopeTest()
        Dim target As Component = Microsoft_VisualStudio_Editors_SettingsDesigner_DesignTimeSettingInstanceAccessor.CreatePrivate

        Dim accessor As Microsoft_VisualStudio_Editors_SettingsDesigner_DesignTimeSettingInstanceAccessor = New Microsoft_VisualStudio_Editors_SettingsDesigner_DesignTimeSettingInstanceAccessor(target)

        Dim value As Microsoft_VisualStudio_Editors_SettingsDesigner_DesignTimeSettingInstance_SettingScopeAccessor = Nothing 'TODO: Initialize to an appropriate value

        accessor.SetScope(value)

        Assert.Inconclusive("A method that does not return a value cannot be verified.")
    End Sub

    '''<summary>
    '''A test for SetSerializedValue(ByVal String)
    '''</summary>
    <DeploymentItem("Microsoft.VisualStudio.Editors.dll"), _
     TestMethod()> _
    Public Sub SetSerializedValueTest()
        Dim target As Component = Microsoft_VisualStudio_Editors_SettingsDesigner_DesignTimeSettingInstanceAccessor.CreatePrivate

        Dim accessor As Microsoft_VisualStudio_Editors_SettingsDesigner_DesignTimeSettingInstanceAccessor = New Microsoft_VisualStudio_Editors_SettingsDesigner_DesignTimeSettingInstanceAccessor(target)

        Dim value As String = "Foo bar"

        accessor.SetSerializedValue(value)

        Assert.AreEqual(accessor.m_serializedValue, value)
        Assert.AreEqual(accessor.SerializedValue, value)
    End Sub

    '''<summary>
    '''A test for SetSettingTypeName(ByVal String)
    '''</summary>
    <DeploymentItem("Microsoft.VisualStudio.Editors.dll"), _
     TestMethod()> _
    Public Sub SetSettingTypeNameTest()
        Dim target As Component = Microsoft_VisualStudio_Editors_SettingsDesigner_DesignTimeSettingInstanceAccessor.CreatePrivate

        Dim accessor As Microsoft_VisualStudio_Editors_SettingsDesigner_DesignTimeSettingInstanceAccessor = New Microsoft_VisualStudio_Editors_SettingsDesigner_DesignTimeSettingInstanceAccessor(target)

        Dim value As String = "Foo"

        accessor.SetSettingTypeName(value)

        Assert.AreEqual(value, accessor.m_settingTypeName, "SettingTypeName not set!")
    End Sub

    '''<summary>
    '''A test for SettingTypeName()
    '''</summary>
    <DeploymentItem("Microsoft.VisualStudio.Editors.dll"), _
     TestMethod()> _
    Public Sub SettingTypeNameTest()
        Dim target As Component = Microsoft_VisualStudio_Editors_SettingsDesigner_DesignTimeSettingInstanceAccessor.CreatePrivate

        Dim val As String = GetType(System.String).FullName

        Dim accessor As Microsoft_VisualStudio_Editors_SettingsDesigner_DesignTimeSettingInstanceAccessor = New Microsoft_VisualStudio_Editors_SettingsDesigner_DesignTimeSettingInstanceAccessor(target)
        accessor.m_settingTypeName = val

        Assert.AreEqual(val, accessor.SettingTypeName, "Microsoft.VisualStudio.Editors.SettingsDesigner.DesignTimeSettingInstance.Setting" & _
                "TypeName was not set correctly.")
    End Sub

    '''<summary>
    '''A test for TypeNameProperty()
    '''</summary>
    <DeploymentItem("Microsoft.VisualStudio.Editors.dll"), _
     TestMethod()> _
    Public Sub TypeNamePropertyTest()
        Dim target As Component = Microsoft_VisualStudio_Editors_SettingsDesigner_DesignTimeSettingInstanceAccessor.CreatePrivate

        Dim accessor As Microsoft_VisualStudio_Editors_SettingsDesigner_DesignTimeSettingInstanceAccessor = New Microsoft_VisualStudio_Editors_SettingsDesigner_DesignTimeSettingInstanceAccessor(target)

        Assert.AreEqual("SettingTypeName", accessor.TypeNameProperty.Name, "Microsoft.VisualStudio.Editors.SettingsDesigner.DesignTimeSettingInstance.TypeNam" & _
                "eProperty was not set correctly.")
    End Sub

    
    '''<summary>
    '''A test for SetGenerateDefaultValueInCode(ByVal Boolean)
    '''</summary>
    <DeploymentItem("Microsoft.VisualStudio.Editors.dll"), _
     TestMethod()> _
    Public Sub SetGenerateDefaultValueInCodeTest()
        Dim target As Component = Microsoft_VisualStudio_Editors_SettingsDesigner_DesignTimeSettingInstanceAccessor.CreatePrivate

        Dim val As Boolean = False

        Dim accessor As Microsoft_VisualStudio_Editors_SettingsDesigner_DesignTimeSettingInstanceAccessor = New Microsoft_VisualStudio_Editors_SettingsDesigner_DesignTimeSettingInstanceAccessor(target)

        accessor.SetGenerateDefaultValueInCode(val)


        Assert.AreEqual(val, accessor.GenerateDefaultValueInCode, "Microsoft.VisualStudio.Editors.SettingsDesigner.DesignTimeSettingInstance.Generat" & _
                "eDefaultValueInCode was not set correctly.")
    End Sub

    '''<summary>
    '''A test for GetObjectData(ByVal System.Runtime.Serialization.SerializationInfo, ByVal System.Runtime.Serialization.StreamingContext)
    '''</summary>
    <DeploymentItem("Microsoft.VisualStudio.Editors.dll"), _
     TestMethod()> _
    Public Sub SerializeDeserialize()
        Dim target As Component = Microsoft_VisualStudio_Editors_SettingsDesigner_DesignTimeSettingInstanceAccessor.CreatePrivate
        Dim accessor As Microsoft_VisualStudio_Editors_SettingsDesigner_DesignTimeSettingInstanceAccessor = New Microsoft_VisualStudio_Editors_SettingsDesigner_DesignTimeSettingInstanceAccessor(target)

        accessor.m_description = "Description"
        accessor.m_generateDefaultValueInCode = False
        accessor.m_name = "Name"
        accessor.m_provider = "Provider"
        accessor.m_roaming = True
        accessor.m_serializedValue = "SerializedValue"
        accessor.m_settingTypeName = GetType(String).FullName

        Dim ms As New System.IO.MemoryStream()
        Dim formatter As New System.Runtime.Serialization.Formatters.Binary.BinaryFormatter()
        formatter.Serialize(ms, target)

        ms.Position = 0
        Dim deserializedTarget As Component = TryCast(formatter.Deserialize(ms), Component)
        Dim deserializedAccessor As New Microsoft_VisualStudio_Editors_SettingsDesigner_DesignTimeSettingInstanceAccessor(deserializedTarget)

        Assert.AreEqual(accessor.m_description, deserializedAccessor.m_description)
        Assert.AreEqual(accessor.m_generateDefaultValueInCode, deserializedAccessor.m_generateDefaultValueInCode)
        Assert.AreEqual(accessor.m_name, deserializedAccessor.m_name)
        Assert.AreEqual(accessor.m_provider, deserializedAccessor.m_provider)
        Assert.AreEqual(accessor.m_roaming, deserializedAccessor.m_roaming)
        Assert.AreEqual(accessor.m_serializedValue, deserializedAccessor.m_serializedValue)
        Assert.AreEqual(accessor.m_settingTypeName, deserializedAccessor.m_settingTypeName)

    End Sub


End Class

'''<summary>
'''This is a test class for Microsoft.VisualStudio.Editors.SettingsDesigner.DesignTimeSettingInstance.ProviderPropertyDescriptor and is intended
'''to contain all Microsoft.VisualStudio.Editors.SettingsDesigner.DesignTimeSettingInstance.ProviderPropertyDescriptor Unit Tests
'''</summary>
<TestClass()> _
Public Class ProviderPropertyDescriptorTest


    Private testContextInstance As TestContext

    '''<summary>
    '''Gets or sets the test context which provides
    '''information about and functionality for the current test run.
    '''</summary>
    Public Property TestContext() As TestContext
        Get
            Return testContextInstance
        End Get
        Set(ByVal value As TestContext)
            testContextInstance = value
        End Set
    End Property
#Region "Additional test attributes"
    '
    'You can use the following additional attributes as you write your tests:
    '
    'Use ClassInitialize to run code before running the first test in the class
    '
    '<ClassInitialize()>  _
    'Public Shared Sub MyClassInitialize(ByVal testContext As TestContext)
    'End Sub
    '
    'Use ClassCleanup to run code after all tests in a class have run
    '
    '<ClassCleanup()>  _
    'Public Shared Sub MyClassCleanup()
    'End Sub
    '
    'Use TestInitialize to run code before running each test
    '
    '<TestInitialize()>  _
    'Public Sub MyTestInitialize()
    'End Sub
    '
    'Use TestCleanup to run code after each test has run
    '
    '<TestCleanup()>  _
    'Public Sub MyTestCleanup()
    'End Sub
    '
#End Region


    '''<summary>
    '''A test for GetValue(ByVal Microsoft.VisualStudio.Editors.SettingsDesigner.DesignTimeSettingInstance)
    '''</summary>
    <DeploymentItem("Microsoft.VisualStudio.Editors.dll"), _
     TestMethod()> _
    Public Sub GetValueTest()
        Dim settingsTarget As Component = Microsoft_VisualStudio_Editors_SettingsDesigner_DesignTimeSettingsAccessor.CreatePrivate()
        Dim settingsAccessor As New Microsoft_VisualStudio_Editors_SettingsDesigner_DesignTimeSettingsAccessor(settingsTarget)

        Dim owner As Microsoft_VisualStudio_Editors_SettingsDesigner_DesignTimeSettingInstanceAccessor = settingsAccessor.AddNew(GetType(String).FullName, "Bar", False)
        owner.m_provider = "ThisIsTheProvider"
        Dim accessor As Microsoft_VisualStudio_Editors_SettingsDesigner_DesignTimeSettingInstance_ProviderPropertyDescriptorAccessor = owner.m_providerPropertyDescriptor

        Dim component As Microsoft_VisualStudio_Editors_SettingsDesigner_DesignTimeSettingInstanceAccessor = owner

        Dim expected As Object = owner.m_provider
        Dim actual As Object

        actual = accessor.GetValue(component)

        Assert.AreEqual(expected, actual, "Microsoft.VisualStudio.Editors.SettingsDesigner.DesignTimeSettingInstance.Provide" & _
                "rPropertyDescriptor.GetValue did not return the expected value.")
    End Sub

    '''<summary>
    '''A test for IsReadOnly()
    '''</summary>
    <DeploymentItem("Microsoft.VisualStudio.Editors.dll"), _
     TestMethod()> _
    Public Sub IsReadOnlyTest()
        Dim settingsTarget As Component = Microsoft_VisualStudio_Editors_SettingsDesigner_DesignTimeSettingsAccessor.CreatePrivate()
        Dim settingsAccessor As New Microsoft_VisualStudio_Editors_SettingsDesigner_DesignTimeSettingsAccessor(settingsTarget)

        Dim owner As Microsoft_VisualStudio_Editors_SettingsDesigner_DesignTimeSettingInstanceAccessor = settingsAccessor.AddNew(GetType(String).FullName, "Bar", False)

        Dim target As PropertyDescriptor = Microsoft_VisualStudio_Editors_SettingsDesigner_DesignTimeSettingInstance_ProviderPropertyDescriptorAccessor.CreatePrivate(owner)

        Dim val As Boolean = False

        Dim accessor As Microsoft_VisualStudio_Editors_SettingsDesigner_DesignTimeSettingInstance_ProviderPropertyDescriptorAccessor = New Microsoft_VisualStudio_Editors_SettingsDesigner_DesignTimeSettingInstance_ProviderPropertyDescriptorAccessor(target)


        Assert.AreEqual(val, accessor.IsReadOnly, "Microsoft.VisualStudio.Editors.SettingsDesigner.DesignTimeSettingInstance.Provide" & _
                "rPropertyDescriptor.IsReadOnly was not set correctly.")
    End Sub

    '''<summary>
    '''A test for PropertyType()
    '''</summary>
    <DeploymentItem("Microsoft.VisualStudio.Editors.dll"), _
     TestMethod()> _
    Public Sub PropertyTypeTest()
        Dim settingsTarget As Component = Microsoft_VisualStudio_Editors_SettingsDesigner_DesignTimeSettingsAccessor.CreatePrivate()
        Dim settingsAccessor As New Microsoft_VisualStudio_Editors_SettingsDesigner_DesignTimeSettingsAccessor(settingsTarget)

        Dim owner As Microsoft_VisualStudio_Editors_SettingsDesigner_DesignTimeSettingInstanceAccessor = settingsAccessor.AddNew(GetType(String).FullName, "Bar", False)


        Dim target As PropertyDescriptor = Microsoft_VisualStudio_Editors_SettingsDesigner_DesignTimeSettingInstance_ProviderPropertyDescriptorAccessor.CreatePrivate(owner)

        Dim val As Type = GetType(System.String)

        Dim accessor As Microsoft_VisualStudio_Editors_SettingsDesigner_DesignTimeSettingInstance_ProviderPropertyDescriptorAccessor = New Microsoft_VisualStudio_Editors_SettingsDesigner_DesignTimeSettingInstance_ProviderPropertyDescriptorAccessor(target)


        Assert.AreEqual(val, accessor.PropertyType, "Microsoft.VisualStudio.Editors.SettingsDesigner.DesignTimeSettingInstance.Provide" & _
                "rPropertyDescriptor.PropertyType was not set correctly.")
    End Sub

    '''<summary>
    '''A test for SetValue(ByVal Microsoft.VisualStudio.Editors.SettingsDesigner.DesignTimeSettingInstance, ByVal Object)
    '''</summary>
    <DeploymentItem("Microsoft.VisualStudio.Editors.dll"), _
     TestMethod()> _
    Public Sub SetValueTest()
        Dim settingsTarget As Component = Microsoft_VisualStudio_Editors_SettingsDesigner_DesignTimeSettingsAccessor.CreatePrivate()
        Dim settingsAccessor As New Microsoft_VisualStudio_Editors_SettingsDesigner_DesignTimeSettingsAccessor(settingsTarget)

        Dim owner As Microsoft_VisualStudio_Editors_SettingsDesigner_DesignTimeSettingInstanceAccessor = settingsAccessor.AddNew(GetType(String).FullName, "Bar", False)


        Dim target As PropertyDescriptor = Microsoft_VisualStudio_Editors_SettingsDesigner_DesignTimeSettingInstance_ProviderPropertyDescriptorAccessor.CreatePrivate(owner)

        Dim accessor As Microsoft_VisualStudio_Editors_SettingsDesigner_DesignTimeSettingInstance_ProviderPropertyDescriptorAccessor = New Microsoft_VisualStudio_Editors_SettingsDesigner_DesignTimeSettingInstance_ProviderPropertyDescriptorAccessor(target)

        Dim component As Microsoft_VisualStudio_Editors_SettingsDesigner_DesignTimeSettingInstanceAccessor = owner

        Dim value As Object = "CustomProvider"

        accessor.SetValue(component, value)

        Assert.AreEqual(component.m_provider, value, "Failed to set provider through property descriptor")
    End Sub

End Class
'''<summary>
'''This is a test class for Microsoft.VisualStudio.Editors.SettingsDesigner.DesignTimeSettingInstance.RoamingPropertyDescriptor and is intended
'''to contain all Microsoft.VisualStudio.Editors.SettingsDesigner.DesignTimeSettingInstance.RoamingPropertyDescriptor Unit Tests
'''</summary>
<TestClass()> _
Public Class RoamingPropertyDescriptorTest


    Private testContextInstance As TestContext

    '''<summary>
    '''Gets or sets the test context which provides
    '''information about and functionality for the current test run.
    '''</summary>
    Public Property TestContext() As TestContext
        Get
            Return testContextInstance
        End Get
        Set(ByVal value As TestContext)
            testContextInstance = value
        End Set
    End Property
#Region "Additional test attributes"
    '
    'You can use the following additional attributes as you write your tests:
    '
    'Use ClassInitialize to run code before running the first test in the class
    '
    '<ClassInitialize()>  _
    'Public Shared Sub MyClassInitialize(ByVal testContext As TestContext)
    'End Sub
    '
    'Use ClassCleanup to run code after all tests in a class have run
    '
    '<ClassCleanup()>  _
    'Public Shared Sub MyClassCleanup()
    'End Sub
    '
    'Use TestInitialize to run code before running each test
    '
    '<TestInitialize()>  _
    'Public Sub MyTestInitialize()
    'End Sub
    '
    'Use TestCleanup to run code after each test has run
    '
    '<TestCleanup()>  _
    'Public Sub MyTestCleanup()
    'End Sub
    '
#End Region


    '''<summary>
    '''A test for GetValue(ByVal Microsoft.VisualStudio.Editors.SettingsDesigner.DesignTimeSettingInstance)
    '''</summary>
    <DeploymentItem("Microsoft.VisualStudio.Editors.dll"), _
     TestMethod()> _
    Public Sub GetValueTest()
        Dim settingsTarget As Component = Microsoft_VisualStudio_Editors_SettingsDesigner_DesignTimeSettingsAccessor.CreatePrivate()
        Dim settingsAccessor As New Microsoft_VisualStudio_Editors_SettingsDesigner_DesignTimeSettingsAccessor(settingsTarget)

        Dim owner As Microsoft_VisualStudio_Editors_SettingsDesigner_DesignTimeSettingInstanceAccessor = settingsAccessor.AddNew(GetType(String).FullName, "Bar", False)

        Dim target As PropertyDescriptor = Microsoft_VisualStudio_Editors_SettingsDesigner_DesignTimeSettingInstance_RoamingPropertyDescriptorAccessor.CreatePrivate(owner)

        Dim accessor As Microsoft_VisualStudio_Editors_SettingsDesigner_DesignTimeSettingInstance_RoamingPropertyDescriptorAccessor = New Microsoft_VisualStudio_Editors_SettingsDesigner_DesignTimeSettingInstance_RoamingPropertyDescriptorAccessor(target)

        Dim component As Microsoft_VisualStudio_Editors_SettingsDesigner_DesignTimeSettingInstanceAccessor = owner

        Dim expected As Object = owner.m_roaming
        Dim actual As Object

        actual = accessor.GetValue(component)

        Assert.AreEqual(expected, actual, "Microsoft.VisualStudio.Editors.SettingsDesigner.DesignTimeSettingInstance.Roaming" & _
                "PropertyDescriptor.GetValue did not return the expected value.")
    End Sub

    '''<summary>
    '''A test for IsReadOnly()
    '''</summary>
    <DeploymentItem("Microsoft.VisualStudio.Editors.dll"), _
     TestMethod()> _
    Public Sub IsReadOnlyTest()
        Dim settingsTarget As Component = Microsoft_VisualStudio_Editors_SettingsDesigner_DesignTimeSettingsAccessor.CreatePrivate()
        Dim settingsAccessor As New Microsoft_VisualStudio_Editors_SettingsDesigner_DesignTimeSettingsAccessor(settingsTarget)

        Dim owner As Microsoft_VisualStudio_Editors_SettingsDesigner_DesignTimeSettingInstanceAccessor = settingsAccessor.AddNew(GetType(String).FullName, "Bar", False)

        Dim target As PropertyDescriptor = Microsoft_VisualStudio_Editors_SettingsDesigner_DesignTimeSettingInstance_RoamingPropertyDescriptorAccessor.CreatePrivate(owner)

        Dim val As Boolean = False

        Dim accessor As Microsoft_VisualStudio_Editors_SettingsDesigner_DesignTimeSettingInstance_RoamingPropertyDescriptorAccessor = New Microsoft_VisualStudio_Editors_SettingsDesigner_DesignTimeSettingInstance_RoamingPropertyDescriptorAccessor(target)


        Assert.AreEqual(val, accessor.IsReadOnly, "Microsoft.VisualStudio.Editors.SettingsDesigner.DesignTimeSettingInstance.Roaming" & _
                "PropertyDescriptor.IsReadOnly was not set correctly.")
    End Sub


    '''<summary>
    '''A test for PropertyType()
    '''</summary>
    <DeploymentItem("Microsoft.VisualStudio.Editors.dll"), _
     TestMethod()> _
    Public Sub PropertyTypeTest()
        Dim settingsTarget As Component = Microsoft_VisualStudio_Editors_SettingsDesigner_DesignTimeSettingsAccessor.CreatePrivate()
        Dim settingsAccessor As New Microsoft_VisualStudio_Editors_SettingsDesigner_DesignTimeSettingsAccessor(settingsTarget)

        Dim owner As Microsoft_VisualStudio_Editors_SettingsDesigner_DesignTimeSettingInstanceAccessor = settingsAccessor.AddNew(GetType(String).FullName, "Bar", False)

        Dim target As PropertyDescriptor = Microsoft_VisualStudio_Editors_SettingsDesigner_DesignTimeSettingInstance_RoamingPropertyDescriptorAccessor.CreatePrivate(owner)

        Dim val As Type = GetType(Boolean)

        Dim accessor As Microsoft_VisualStudio_Editors_SettingsDesigner_DesignTimeSettingInstance_RoamingPropertyDescriptorAccessor = New Microsoft_VisualStudio_Editors_SettingsDesigner_DesignTimeSettingInstance_RoamingPropertyDescriptorAccessor(target)


        Assert.AreEqual(val, accessor.PropertyType, "Microsoft.VisualStudio.Editors.SettingsDesigner.DesignTimeSettingInstance.Roaming" & _
                "PropertyDescriptor.PropertyType was not set correctly.")
    End Sub

    '''<summary>
    '''A test for SetValue(ByVal Microsoft.VisualStudio.Editors.SettingsDesigner.DesignTimeSettingInstance, ByVal Object)
    '''</summary>
    <DeploymentItem("Microsoft.VisualStudio.Editors.dll"), _
     TestMethod()> _
    Public Sub SetValueTest()
        Dim settingsTarget As Component = Microsoft_VisualStudio_Editors_SettingsDesigner_DesignTimeSettingsAccessor.CreatePrivate()
        Dim settingsAccessor As New Microsoft_VisualStudio_Editors_SettingsDesigner_DesignTimeSettingsAccessor(settingsTarget)

        Dim container As New Mockisar.MockContainer()
        TryCast(settingsTarget, IComponent).Site = New Mockisar.MockSiteWithName(settingsTarget, "", container)

        Dim owner As Microsoft_VisualStudio_Editors_SettingsDesigner_DesignTimeSettingInstanceAccessor = settingsAccessor.AddNew(GetType(String).FullName, "Bar", False)

        Dim target As PropertyDescriptor = Microsoft_VisualStudio_Editors_SettingsDesigner_DesignTimeSettingInstance_RoamingPropertyDescriptorAccessor.CreatePrivate(owner)

        Dim accessor As Microsoft_VisualStudio_Editors_SettingsDesigner_DesignTimeSettingInstance_RoamingPropertyDescriptorAccessor = New Microsoft_VisualStudio_Editors_SettingsDesigner_DesignTimeSettingInstance_RoamingPropertyDescriptorAccessor(target)

        Dim component As Microsoft_VisualStudio_Editors_SettingsDesigner_DesignTimeSettingInstanceAccessor = owner

        Dim value As Object = Not owner.m_roaming

        accessor.SetValue(component, value)

        Assert.AreEqual(value, owner.m_roaming, "Failed to set roaming property through property descriptor")
    End Sub


End Class
'''<summary>
'''This is a test class for Microsoft.VisualStudio.Editors.SettingsDesigner.DesignTimeSettingInstance.ScopePropertyDescriptor and is intended
'''to contain all Microsoft.VisualStudio.Editors.SettingsDesigner.DesignTimeSettingInstance.ScopePropertyDescriptor Unit Tests
'''</summary>
<TestClass()> _
Public Class ScopePropertyDescriptorTest


    Private testContextInstance As TestContext

    '''<summary>
    '''Gets or sets the test context which provides
    '''information about and functionality for the current test run.
    '''</summary>
    Public Property TestContext() As TestContext
        Get
            Return testContextInstance
        End Get
        Set(ByVal value As TestContext)
            testContextInstance = value
        End Set
    End Property
#Region "Additional test attributes"
    '
    'You can use the following additional attributes as you write your tests:
    '
    'Use ClassInitialize to run code before running the first test in the class
    '
    '<ClassInitialize()>  _
    'Public Shared Sub MyClassInitialize(ByVal testContext As TestContext)
    'End Sub
    '
    'Use ClassCleanup to run code after all tests in a class have run
    '
    '<ClassCleanup()>  _
    'Public Shared Sub MyClassCleanup()
    'End Sub
    '
    'Use TestInitialize to run code before running each test
    '
    '<TestInitialize()>  _
    'Public Sub MyTestInitialize()
    'End Sub
    '
    'Use TestCleanup to run code after each test has run
    '
    '<TestCleanup()>  _
    'Public Sub MyTestCleanup()
    'End Sub
    '
#End Region


    '''<summary>
    '''A test for GetValue(ByVal Microsoft.VisualStudio.Editors.SettingsDesigner.DesignTimeSettingInstance)
    '''</summary>
    <DeploymentItem("Microsoft.VisualStudio.Editors.dll"), _
     TestMethod()> _
    Public Sub GetValueTest()
        Dim settingsTarget As Component = Microsoft_VisualStudio_Editors_SettingsDesigner_DesignTimeSettingsAccessor.CreatePrivate()
        Dim settingsAccessor As New Microsoft_VisualStudio_Editors_SettingsDesigner_DesignTimeSettingsAccessor(settingsTarget)

        Dim owner As Microsoft_VisualStudio_Editors_SettingsDesigner_DesignTimeSettingInstanceAccessor = settingsAccessor.AddNew(GetType(String).FullName, "Bar", False)
        Dim accessor As Microsoft_VisualStudio_Editors_SettingsDesigner_DesignTimeSettingInstance_ScopePropertyDescriptorAccessor = owner.m_scopePropertyDescriptor

        Dim component As Microsoft_VisualStudio_Editors_SettingsDesigner_DesignTimeSettingInstanceAccessor = owner

        Dim expected As Object = Microsoft_VisualStudio_Editors_SettingsDesigner_DesignTimeSettingInstance_SettingScopeAccessor.User.Target
        Dim actual As Object

        actual = accessor.GetValue(component)

        Assert.AreEqual(expected, actual, "Microsoft.VisualStudio.Editors.SettingsDesigner.DesignTimeSettingInstance.Provide" & _
                "rPropertyDescriptor.GetValue did not return the expected value.")
    End Sub

    '''<summary>
    '''A test for IsReadOnly()
    '''</summary>
    <DeploymentItem("Microsoft.VisualStudio.Editors.dll"), _
     TestMethod()> _
    Public Sub IsReadOnlyTest()
        Dim settingsTarget As Component = Microsoft_VisualStudio_Editors_SettingsDesigner_DesignTimeSettingsAccessor.CreatePrivate()
        Dim settingsAccessor As New Microsoft_VisualStudio_Editors_SettingsDesigner_DesignTimeSettingsAccessor(settingsTarget)

        Dim owner As Microsoft_VisualStudio_Editors_SettingsDesigner_DesignTimeSettingInstanceAccessor = settingsAccessor.AddNew(GetType(String).FullName, "Bar", False)

        Dim target As PropertyDescriptor = Microsoft_VisualStudio_Editors_SettingsDesigner_DesignTimeSettingInstance_ScopePropertyDescriptorAccessor.CreatePrivate(owner)

        Dim val As Boolean = False

        Dim accessor As Microsoft_VisualStudio_Editors_SettingsDesigner_DesignTimeSettingInstance_ScopePropertyDescriptorAccessor = New Microsoft_VisualStudio_Editors_SettingsDesigner_DesignTimeSettingInstance_ScopePropertyDescriptorAccessor(target)


        Assert.AreEqual(val, accessor.IsReadOnly, "Microsoft.VisualStudio.Editors.SettingsDesigner.DesignTimeSettingInstance.ScopePr" & _
                "opertyDescriptor.IsReadOnly was not set correctly.")
    End Sub

    '''<summary>
    '''A test for IsReadOnly()
    '''</summary>
    <DeploymentItem("Microsoft.VisualStudio.Editors.dll"), _
     TestMethod()> _
    Public Sub IsReadOnlyTest_ConnectionString()
        Dim settingsTarget As Component = Microsoft_VisualStudio_Editors_SettingsDesigner_DesignTimeSettingsAccessor.CreatePrivate()
        Dim settingsAccessor As New Microsoft_VisualStudio_Editors_SettingsDesigner_DesignTimeSettingsAccessor(settingsTarget)

        Dim owner As Microsoft_VisualStudio_Editors_SettingsDesigner_DesignTimeSettingInstanceAccessor = settingsAccessor.AddNew("(Connection string)", "Bar", False)

        Dim target As PropertyDescriptor = Microsoft_VisualStudio_Editors_SettingsDesigner_DesignTimeSettingInstance_ScopePropertyDescriptorAccessor.CreatePrivate(owner)

        Dim val As Boolean = True

        Dim accessor As Microsoft_VisualStudio_Editors_SettingsDesigner_DesignTimeSettingInstance_ScopePropertyDescriptorAccessor = New Microsoft_VisualStudio_Editors_SettingsDesigner_DesignTimeSettingInstance_ScopePropertyDescriptorAccessor(target)


        Assert.AreEqual(val, accessor.IsReadOnly, "Microsoft.VisualStudio.Editors.SettingsDesigner.DesignTimeSettingInstance.ScopePr" & _
                "opertyDescriptor.IsReadOnly was not set correctly.")
    End Sub


    '''<summary>
    '''A test for PropertyType()
    '''</summary>
    <DeploymentItem("Microsoft.VisualStudio.Editors.dll"), _
     TestMethod()> _
    Public Sub PropertyTypeTest()
        Dim settingsTarget As Component = Microsoft_VisualStudio_Editors_SettingsDesigner_DesignTimeSettingsAccessor.CreatePrivate()
        Dim settingsAccessor As New Microsoft_VisualStudio_Editors_SettingsDesigner_DesignTimeSettingsAccessor(settingsTarget)

        Dim owner As Microsoft_VisualStudio_Editors_SettingsDesigner_DesignTimeSettingInstanceAccessor = settingsAccessor.AddNew(GetType(String).FullName, "Bar", False)
        Dim target As PropertyDescriptor = Microsoft_VisualStudio_Editors_SettingsDesigner_DesignTimeSettingInstance_ScopePropertyDescriptorAccessor.CreatePrivate(owner)

        Dim val As Type = Microsoft_VisualStudio_Editors_SettingsDesigner_DesignTimeSettingInstance_SettingScopeAccessor.Application.Target.GetType()

        Dim accessor As Microsoft_VisualStudio_Editors_SettingsDesigner_DesignTimeSettingInstance_ScopePropertyDescriptorAccessor = New Microsoft_VisualStudio_Editors_SettingsDesigner_DesignTimeSettingInstance_ScopePropertyDescriptorAccessor(target)


        Assert.AreEqual(val, accessor.PropertyType, "Microsoft.VisualStudio.Editors.SettingsDesigner.DesignTimeSettingInstance.ScopePr" & _
                "opertyDescriptor.PropertyType was not set correctly.")
    End Sub

    '''<summary>
    '''A test for SetValue(ByVal Microsoft.VisualStudio.Editors.SettingsDesigner.DesignTimeSettingInstance, ByVal Object)
    '''</summary>
    <DeploymentItem("Microsoft.VisualStudio.Editors.dll"), _
     TestMethod()> _
    Public Sub SetValueTest()
        Dim settingsTarget As Component = Microsoft_VisualStudio_Editors_SettingsDesigner_DesignTimeSettingsAccessor.CreatePrivate()
        Dim settingsAccessor As New Microsoft_VisualStudio_Editors_SettingsDesigner_DesignTimeSettingsAccessor(settingsTarget)

        Dim owner As Microsoft_VisualStudio_Editors_SettingsDesigner_DesignTimeSettingInstanceAccessor = settingsAccessor.AddNew(GetType(String).FullName, "Bar", False)

        Dim target As PropertyDescriptor = Microsoft_VisualStudio_Editors_SettingsDesigner_DesignTimeSettingInstance_ScopePropertyDescriptorAccessor.CreatePrivate(owner)

        Dim accessor As Microsoft_VisualStudio_Editors_SettingsDesigner_DesignTimeSettingInstance_ScopePropertyDescriptorAccessor = New Microsoft_VisualStudio_Editors_SettingsDesigner_DesignTimeSettingInstance_ScopePropertyDescriptorAccessor(target)

        Dim component As Microsoft_VisualStudio_Editors_SettingsDesigner_DesignTimeSettingInstanceAccessor = owner

        Dim value As Object = Microsoft_VisualStudio_Editors_SettingsDesigner_DesignTimeSettingInstance_SettingScopeAccessor.Application.Target

        accessor.SetValue(component, value)

        Assert.AreEqual(value, owner.m_settingScope.Target, "Failed to set roaming property through property descriptor")
    End Sub

    '''<summary>
    '''A test for SetValue(ByVal Microsoft.VisualStudio.Editors.SettingsDesigner.DesignTimeSettingInstance, ByVal Object)
    '''</summary>
    <DeploymentItem("Microsoft.VisualStudio.Editors.dll"), _
     TestMethod()> _
    Public Sub SetValueTest_ComponentChanges()
        Dim settingsTarget As Component = Microsoft_VisualStudio_Editors_SettingsDesigner_DesignTimeSettingsAccessor.CreatePrivate()
        Dim settingsAccessor As New Microsoft_VisualStudio_Editors_SettingsDesigner_DesignTimeSettingsAccessor(settingsTarget)

        Dim mockContainer As New Mockisar.MockContainer()
        Dim mockSettingsSite As New Mockisar.MockSiteWithName(settingsTarget, "", mockContainer)


        Dim owner As Microsoft_VisualStudio_Editors_SettingsDesigner_DesignTimeSettingInstanceAccessor = settingsAccessor.AddNew(GetType(String).FullName, "Bar", False)
        Dim ownerSite As New Mockisar.MockSiteWithName(TryCast(owner.Target, System.ComponentModel.IComponent), "", mockContainer)

        Dim target As PropertyDescriptor = Microsoft_VisualStudio_Editors_SettingsDesigner_DesignTimeSettingInstance_ScopePropertyDescriptorAccessor.CreatePrivate(owner)

        Dim accessor As Microsoft_VisualStudio_Editors_SettingsDesigner_DesignTimeSettingInstance_ScopePropertyDescriptorAccessor = New Microsoft_VisualStudio_Editors_SettingsDesigner_DesignTimeSettingInstance_ScopePropertyDescriptorAccessor(target)

        Dim component As Microsoft_VisualStudio_Editors_SettingsDesigner_DesignTimeSettingInstanceAccessor = owner

        Dim value As Object = Microsoft_VisualStudio_Editors_SettingsDesigner_DesignTimeSettingInstance_SettingScopeAccessor.Application.Target

        Dim changeRecorder As New TestHelperClasses.ComponentChangeRecorder(mockContainer)
        Dim typeName As String = component.Target.GetType().FullName
        changeRecorder.AddComponentChanging(typeName, "Scope")
        changeRecorder.AddComponentChanged(typeName, "Scope", Microsoft_VisualStudio_Editors_SettingsDesigner_DesignTimeSettingInstance_SettingScopeAccessor.User.Target, value)

        target.SetValue(component.Target, value)

        Assert.AreEqual(value, owner.m_settingScope.Target, "Failed to set roaming property through property descriptor")
        Assert.IsTrue(changeRecorder.IsDone)
    End Sub

    '''<summary>
    '''A test for SetValue(ByVal Microsoft.VisualStudio.Editors.SettingsDesigner.DesignTimeSettingInstance, ByVal Object)
    '''</summary>
    <DeploymentItem("Microsoft.VisualStudio.Editors.dll"), _
     TestMethod()> _
    Public Sub SetValueTest_ComponentChanges_NoChangeBecauseSameValue()
        Dim settingsTarget As Component = Microsoft_VisualStudio_Editors_SettingsDesigner_DesignTimeSettingsAccessor.CreatePrivate()
        Dim settingsAccessor As New Microsoft_VisualStudio_Editors_SettingsDesigner_DesignTimeSettingsAccessor(settingsTarget)

        Dim mockContainer As New Mockisar.MockContainer()
        Dim mockSettingsSite As New Mockisar.MockSiteWithName(settingsTarget, "", mockContainer)


        Dim owner As Microsoft_VisualStudio_Editors_SettingsDesigner_DesignTimeSettingInstanceAccessor = settingsAccessor.AddNew(GetType(String).FullName, "Bar", False)
        Dim ownerSite As New Mockisar.MockSiteWithName(TryCast(owner.Target, System.ComponentModel.IComponent), "", mockContainer)

        Dim target As PropertyDescriptor = Microsoft_VisualStudio_Editors_SettingsDesigner_DesignTimeSettingInstance_ScopePropertyDescriptorAccessor.CreatePrivate(owner)

        Dim accessor As Microsoft_VisualStudio_Editors_SettingsDesigner_DesignTimeSettingInstance_ScopePropertyDescriptorAccessor = New Microsoft_VisualStudio_Editors_SettingsDesigner_DesignTimeSettingInstance_ScopePropertyDescriptorAccessor(target)

        Dim component As Microsoft_VisualStudio_Editors_SettingsDesigner_DesignTimeSettingInstanceAccessor = owner

        Dim value As Object = Microsoft_VisualStudio_Editors_SettingsDesigner_DesignTimeSettingInstance_SettingScopeAccessor.User.Target

        Dim changeRecorder As New TestHelperClasses.ComponentChangeRecorder(mockContainer)
        Dim typeName As String = component.Target.GetType().FullName

        target.SetValue(component.Target, value)

        Assert.AreEqual(value, owner.m_settingScope.Target, "Failed to set roaming property through property descriptor")
        Assert.IsTrue(changeRecorder.IsDone)
    End Sub

End Class
'''<summary>
'''This is a test class for Microsoft.VisualStudio.Editors.SettingsDesigner.DesignTimeSettingInstance.SerializedValuePropertyDescriptor and is intended
'''to contain all Microsoft.VisualStudio.Editors.SettingsDesigner.DesignTimeSettingInstance.SerializedValuePropertyDescriptor Unit Tests
'''</summary>
<TestClass()> _
Public Class SerializedValuePropertyDescriptorTest


    Private testContextInstance As TestContext

    '''<summary>
    '''Gets or sets the test context which provides
    '''information about and functionality for the current test run.
    '''</summary>
    Public Property TestContext() As TestContext
        Get
            Return testContextInstance
        End Get
        Set(ByVal value As TestContext)
            testContextInstance = value
        End Set
    End Property
#Region "Additional test attributes"
    '
    'You can use the following additional attributes as you write your tests:
    '
    'Use ClassInitialize to run code before running the first test in the class
    '
    '<ClassInitialize()>  _
    'Public Shared Sub MyClassInitialize(ByVal testContext As TestContext)
    'End Sub
    '
    'Use ClassCleanup to run code after all tests in a class have run
    '
    '<ClassCleanup()>  _
    'Public Shared Sub MyClassCleanup()
    'End Sub
    '
    'Use TestInitialize to run code before running each test
    '
    '<TestInitialize()>  _
    'Public Sub MyTestInitialize()
    'End Sub
    '
    'Use TestCleanup to run code after each test has run
    '
    '<TestCleanup()>  _
    'Public Sub MyTestCleanup()
    'End Sub
    '
#End Region


    '''<summary>
    '''A test for FillAttributes(ByVal System.Collections.IList)
    '''</summary>
    <DeploymentItem("Microsoft.VisualStudio.Editors.dll"), _
     TestMethod()> _
    Public Sub FillAttributesTest()
        Dim settingsTarget As Component = Microsoft_VisualStudio_Editors_SettingsDesigner_DesignTimeSettingsAccessor.CreatePrivate()
        Dim settingsAccessor As New Microsoft_VisualStudio_Editors_SettingsDesigner_DesignTimeSettingsAccessor(settingsTarget)

        Dim owner As Microsoft_VisualStudio_Editors_SettingsDesigner_DesignTimeSettingInstanceAccessor = settingsAccessor.AddNew(GetType(String).FullName, "Bar", False)

        Dim target As PropertyDescriptor = owner.SerializedValueProperty

        Dim accessor As Microsoft_VisualStudio_Editors_SettingsDesigner_DesignTimeSettingInstance_SerializedValuePropertyDescriptorAccessor = New Microsoft_VisualStudio_Editors_SettingsDesigner_DesignTimeSettingInstance_SerializedValuePropertyDescriptorAccessor(target)

        Dim attributeList As IList = New System.Collections.Generic.List(Of System.Attribute)

        accessor.FillAttributes(attributeList)

        Dim browsableFalseAttributeFound As Boolean = False
        For Each attr As Attribute In attributeList
            Dim bAttr As BrowsableAttribute = TryCast(attr, BrowsableAttribute)
            If bAttr IsNot Nothing AndAlso bAttr.Browsable = False Then
                browsableFalseAttributeFound = True
            End If
        Next
        Assert.IsTrue(browsableFalseAttributeFound, "This property shouldn't be browsable!")
    End Sub

    '''<summary>
    '''A test for GetValue(ByVal Microsoft.VisualStudio.Editors.SettingsDesigner.DesignTimeSettingInstance)
    '''</summary>
    <DeploymentItem("Microsoft.VisualStudio.Editors.dll"), _
     TestMethod()> _
    Public Sub GetValueTest()
        Dim settingsTarget As Component = Microsoft_VisualStudio_Editors_SettingsDesigner_DesignTimeSettingsAccessor.CreatePrivate()
        Dim settingsAccessor As New Microsoft_VisualStudio_Editors_SettingsDesigner_DesignTimeSettingsAccessor(settingsTarget)

        Dim owner As Microsoft_VisualStudio_Editors_SettingsDesigner_DesignTimeSettingInstanceAccessor = settingsAccessor.AddNew(GetType(String).FullName, "Bar", False)

        Dim target As PropertyDescriptor = owner.SerializedValueProperty

        Dim accessor As Microsoft_VisualStudio_Editors_SettingsDesigner_DesignTimeSettingInstance_SerializedValuePropertyDescriptorAccessor = New Microsoft_VisualStudio_Editors_SettingsDesigner_DesignTimeSettingInstance_SerializedValuePropertyDescriptorAccessor(target)

        Dim component As Microsoft_VisualStudio_Editors_SettingsDesigner_DesignTimeSettingInstanceAccessor = owner

        owner.m_serializedValue = "Funky value"
        Dim expected As Object = owner.m_serializedValue
        Dim actual As Object

        actual = accessor.GetValue(component)

        Assert.AreEqual(expected, actual, "Microsoft.VisualStudio.Editors.SettingsDesigner.DesignTimeSettingInstance.Seriali" & _
                "zedValuePropertyDescriptor.GetValue did not return the expected value.")
    End Sub

    '''<summary>
    '''A test for IsReadOnly()
    '''</summary>
    <DeploymentItem("Microsoft.VisualStudio.Editors.dll"), _
     TestMethod()> _
    Public Sub IsReadOnlyTest()
        Dim settingsTarget As Component = Microsoft_VisualStudio_Editors_SettingsDesigner_DesignTimeSettingsAccessor.CreatePrivate()
        Dim settingsAccessor As New Microsoft_VisualStudio_Editors_SettingsDesigner_DesignTimeSettingsAccessor(settingsTarget)

        Dim owner As Microsoft_VisualStudio_Editors_SettingsDesigner_DesignTimeSettingInstanceAccessor = settingsAccessor.AddNew(GetType(String).FullName, "Bar", False)

        Dim target As PropertyDescriptor = Microsoft_VisualStudio_Editors_SettingsDesigner_DesignTimeSettingInstance_SerializedValuePropertyDescriptorAccessor.CreatePrivate(owner)

        Dim val As Boolean = False

        Dim accessor As Microsoft_VisualStudio_Editors_SettingsDesigner_DesignTimeSettingInstance_SerializedValuePropertyDescriptorAccessor = New Microsoft_VisualStudio_Editors_SettingsDesigner_DesignTimeSettingInstance_SerializedValuePropertyDescriptorAccessor(target)


        Assert.AreEqual(val, accessor.IsReadOnly, "Microsoft.VisualStudio.Editors.SettingsDesigner.DesignTimeSettingInstance.Seriali" & _
                "zedValuePropertyDescriptor.IsReadOnly was not set correctly.")
    End Sub

    '''<summary>
    '''A test for PropertyType()
    '''</summary>
    <DeploymentItem("Microsoft.VisualStudio.Editors.dll"), _
     TestMethod()> _
    Public Sub PropertyTypeTest()
        Dim settingsTarget As Component = Microsoft_VisualStudio_Editors_SettingsDesigner_DesignTimeSettingsAccessor.CreatePrivate()
        Dim settingsAccessor As New Microsoft_VisualStudio_Editors_SettingsDesigner_DesignTimeSettingsAccessor(settingsTarget)

        Dim owner As Microsoft_VisualStudio_Editors_SettingsDesigner_DesignTimeSettingInstanceAccessor = settingsAccessor.AddNew(GetType(String).FullName, "Bar", False)

        Dim target As PropertyDescriptor = Microsoft_VisualStudio_Editors_SettingsDesigner_DesignTimeSettingInstance_SerializedValuePropertyDescriptorAccessor.CreatePrivate(owner)

        Dim val As Type = GetType(String)

        Dim accessor As Microsoft_VisualStudio_Editors_SettingsDesigner_DesignTimeSettingInstance_SerializedValuePropertyDescriptorAccessor = New Microsoft_VisualStudio_Editors_SettingsDesigner_DesignTimeSettingInstance_SerializedValuePropertyDescriptorAccessor(target)


        Assert.AreEqual(val, accessor.PropertyType, "Microsoft.VisualStudio.Editors.SettingsDesigner.DesignTimeSettingInstance.Seriali" & _
                "zedValuePropertyDescriptor.PropertyType was not set correctly.")
    End Sub

    '''<summary>
    '''A test for SetValue(ByVal Microsoft.VisualStudio.Editors.SettingsDesigner.DesignTimeSettingInstance, ByVal Object)
    '''</summary>
    <DeploymentItem("Microsoft.VisualStudio.Editors.dll"), _
     TestMethod()> _
    Public Sub SetValueTest()
        Dim settingsTarget As Component = Microsoft_VisualStudio_Editors_SettingsDesigner_DesignTimeSettingsAccessor.CreatePrivate()
        Dim settingsAccessor As New Microsoft_VisualStudio_Editors_SettingsDesigner_DesignTimeSettingsAccessor(settingsTarget)

        Dim owner As Microsoft_VisualStudio_Editors_SettingsDesigner_DesignTimeSettingInstanceAccessor = settingsAccessor.AddNew(GetType(String).FullName, "Bar", False)

        Dim target As PropertyDescriptor = Microsoft_VisualStudio_Editors_SettingsDesigner_DesignTimeSettingInstance_SerializedValuePropertyDescriptorAccessor.CreatePrivate(owner)

        Dim accessor As Microsoft_VisualStudio_Editors_SettingsDesigner_DesignTimeSettingInstance_SerializedValuePropertyDescriptorAccessor = New Microsoft_VisualStudio_Editors_SettingsDesigner_DesignTimeSettingInstance_SerializedValuePropertyDescriptorAccessor(target)

        Dim component As Microsoft_VisualStudio_Editors_SettingsDesigner_DesignTimeSettingInstanceAccessor = owner

        Dim value As Object = "Test"

        accessor.SetValue(component, value)

        Assert.AreEqual(value, owner.m_serializedValue, "Failed to set roaming property through property descriptor")
    End Sub

End Class
'''<summary>
'''This is a test class for Microsoft.VisualStudio.Editors.SettingsDesigner.DesignTimeSettingInstance.NamePropertyDescriptor and is intended
'''to contain all Microsoft.VisualStudio.Editors.SettingsDesigner.DesignTimeSettingInstance.NamePropertyDescriptor Unit Tests
'''</summary>
<TestClass()> _
Public Class NamePropertyDescriptorTest


    Private testContextInstance As TestContext

    '''<summary>
    '''Gets or sets the test context which provides
    '''information about and functionality for the current test run.
    '''</summary>
    Public Property TestContext() As TestContext
        Get
            Return testContextInstance
        End Get
        Set(ByVal value As TestContext)
            testContextInstance = value
        End Set
    End Property
#Region "Additional test attributes"
    '
    'You can use the following additional attributes as you write your tests:
    '
    'Use ClassInitialize to run code before running the first test in the class
    '
    '<ClassInitialize()>  _
    'Public Shared Sub MyClassInitialize(ByVal testContext As TestContext)
    'End Sub
    '
    'Use ClassCleanup to run code after all tests in a class have run
    '
    '<ClassCleanup()>  _
    'Public Shared Sub MyClassCleanup()
    'End Sub
    '
    'Use TestInitialize to run code before running each test
    '
    '<TestInitialize()>  _
    'Public Sub MyTestInitialize()
    'End Sub
    '
    'Use TestCleanup to run code after each test has run
    '
    '<TestCleanup()>  _
    'Public Sub MyTestCleanup()
    'End Sub
    '
#End Region


    '''<summary>
    '''A test for SetValue(ByVal Microsoft.VisualStudio.Editors.SettingsDesigner.DesignTimeSettingInstance, ByVal Object)
    '''</summary>
    <DeploymentItem("Microsoft.VisualStudio.Editors.dll"), _
     TestMethod()> _
    Public Sub SetValueTest()
        Dim settingsTarget As Component = Microsoft_VisualStudio_Editors_SettingsDesigner_DesignTimeSettingsAccessor.CreatePrivate()
        Dim settingsAccessor As New Microsoft_VisualStudio_Editors_SettingsDesigner_DesignTimeSettingsAccessor(settingsTarget)

        Dim owner As Microsoft_VisualStudio_Editors_SettingsDesigner_DesignTimeSettingInstanceAccessor = settingsAccessor.AddNew(GetType(String).FullName, "Bar", False)

        Dim target As PropertyDescriptor = Microsoft_VisualStudio_Editors_SettingsDesigner_DesignTimeSettingInstance_NamePropertyDescriptorAccessor.CreatePrivate(owner)

        Dim accessor As Microsoft_VisualStudio_Editors_SettingsDesigner_DesignTimeSettingInstance_NamePropertyDescriptorAccessor = New Microsoft_VisualStudio_Editors_SettingsDesigner_DesignTimeSettingInstance_NamePropertyDescriptorAccessor(target)

        Dim component As Microsoft_VisualStudio_Editors_SettingsDesigner_DesignTimeSettingInstanceAccessor = owner

        Dim value As Object = "Zoo"

        accessor.SetValue(component, value)

        Assert.AreEqual(owner.m_name, value, "Failed to set value")
    End Sub

    '''<summary>
    '''A test for SetValue(ByVal Microsoft.VisualStudio.Editors.SettingsDesigner.DesignTimeSettingInstance, ByVal Object)
    '''</summary>
    <DeploymentItem("Microsoft.VisualStudio.Editors.dll"), _
     ExpectedException(GetType(System.ArgumentException)), _
     TestMethod()> _
    Public Sub SetValueTest_DuplicateName()
        Dim settingsTarget As Component = Microsoft_VisualStudio_Editors_SettingsDesigner_DesignTimeSettingsAccessor.CreatePrivate()
        Dim settingsAccessor As New Microsoft_VisualStudio_Editors_SettingsDesigner_DesignTimeSettingsAccessor(settingsTarget)

        Dim container As New Mockisar.MockContainer
        Dim SettingsSite As New Mockisar.MockSiteWithName(settingsTarget, "", container)

        Dim existingSetting As Microsoft_VisualStudio_Editors_SettingsDesigner_DesignTimeSettingInstanceAccessor = settingsAccessor.AddNew(GetType(String).FullName, "Bar1", False)
        Dim ExistingSettingSite As New Mockisar.MockSiteWithName(DirectCast(existingSetting.Target, IComponent), existingSetting.Name, container)
        Dim owner As Microsoft_VisualStudio_Editors_SettingsDesigner_DesignTimeSettingInstanceAccessor = settingsAccessor.AddNew(GetType(String).FullName, "Bar2", False)
        Dim ownerSite As New Mockisar.MockSiteWithName(DirectCast(owner.Target, Component), existingSetting.Name, container)

        Dim target As PropertyDescriptor = Microsoft_VisualStudio_Editors_SettingsDesigner_DesignTimeSettingInstance_NamePropertyDescriptorAccessor.CreatePrivate(owner)

        Dim accessor As Microsoft_VisualStudio_Editors_SettingsDesigner_DesignTimeSettingInstance_NamePropertyDescriptorAccessor = New Microsoft_VisualStudio_Editors_SettingsDesigner_DesignTimeSettingInstance_NamePropertyDescriptorAccessor(target)

        Dim component As Microsoft_VisualStudio_Editors_SettingsDesigner_DesignTimeSettingInstanceAccessor = owner

        Dim value As Object = "Bar1"

        accessor.SetValue(component, value)

        Assert.Fail()
    End Sub

    '''<summary>
    '''A test for SetValue(ByVal Microsoft.VisualStudio.Editors.SettingsDesigner.DesignTimeSettingInstance, ByVal Object)
    '''</summary>
    <DeploymentItem("Microsoft.VisualStudio.Editors.dll"), _
     ExpectedException(GetType(System.ArgumentException)), _
     TestMethod()> _
    Public Sub SetValueTest_EmptyName()
        Dim settingsTarget As Component = Microsoft_VisualStudio_Editors_SettingsDesigner_DesignTimeSettingsAccessor.CreatePrivate()
        Dim settingsAccessor As New Microsoft_VisualStudio_Editors_SettingsDesigner_DesignTimeSettingsAccessor(settingsTarget)
        Dim Site As New Mockisar.MockSiteWithName(settingsTarget, "", New Mockisar.MockContainer)

        Dim owner As Microsoft_VisualStudio_Editors_SettingsDesigner_DesignTimeSettingInstanceAccessor = settingsAccessor.AddNew(GetType(String).FullName, "Bar2", False)
        Dim target As PropertyDescriptor = Microsoft_VisualStudio_Editors_SettingsDesigner_DesignTimeSettingInstance_NamePropertyDescriptorAccessor.CreatePrivate(owner)

        Dim accessor As Microsoft_VisualStudio_Editors_SettingsDesigner_DesignTimeSettingInstance_NamePropertyDescriptorAccessor = New Microsoft_VisualStudio_Editors_SettingsDesigner_DesignTimeSettingInstance_NamePropertyDescriptorAccessor(target)

        Dim component As Microsoft_VisualStudio_Editors_SettingsDesigner_DesignTimeSettingInstanceAccessor = owner

        Dim value As Object = ""

        accessor.SetValue(component, value)

        Assert.Fail()
    End Sub

End Class
