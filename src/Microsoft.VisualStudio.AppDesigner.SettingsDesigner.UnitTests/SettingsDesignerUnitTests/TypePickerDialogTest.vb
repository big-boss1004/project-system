'The following code was generated by Microsoft Visual Studio 2005.
'The test owner should check each test for validity.
Imports Microsoft.VisualStudio.TestTools.UnitTesting
Imports System
Imports System.Text
Imports System.Collections.Generic
Imports SettingsDesignerUnitTests
Imports System.Windows.Forms
Imports Microsoft.VisualStudio.Shell.Interop
Imports Microsoft.VSDesigner

'''<summary>
'''This is a test class for Microsoft.VisualStudio.Editors.SettingsDesigner.TypePickerDialog and is intended
'''to contain all Microsoft.VisualStudio.Editors.SettingsDesigner.TypePickerDialog Unit Tests
'''</summary>
<TestClass()> _
Public Class TypePickerDialogTest


    Private testContextInstance As TestContext

    '''<summary>
    '''Gets or sets the test context which provides
    '''information about and functionality for the current test run.
    '''</summary>
    Public Property TestContext() As TestContext
        Get
            Return testContextInstance
        End Get
        Set(ByVal value As TestContext)
            testContextInstance = value
        End Set
    End Property
#Region "Additional test attributes"
    '
    'You can use the following additional attributes as you write your tests:
    '
    'Use ClassInitialize to run code before running the first test in the class
    '
    '<ClassInitialize()>  _
    'Public Shared Sub MyClassInitialize(ByVal testContext As TestContext)
    'End Sub
    '
    'Use ClassCleanup to run code after all tests in a class have run
    '
    '<ClassCleanup()>  _
    'Public Shared Sub MyClassCleanup()
    'End Sub
    '
    'Use TestInitialize to run code before running each test
    '
    '<TestInitialize()>  _
    'Public Sub MyTestInitialize()
    'End Sub
    '
    'Use TestCleanup to run code after each test has run
    '
    '<TestCleanup()>  _
    'Public Sub MyTestCleanup()
    'End Sub
    '
#End Region

    '''<summary>
    '''A test for QueryClose()
    '''</summary>
    <DeploymentItem("Microsoft.VisualStudio.Editors.dll"), _
     TestMethod()> _
    Public Sub QueryCloseTest_CaseInsensitive()
        Dim sp As New Mockisar.MockServiceProvider()

        Dim languageGuid As String = EnvDTE.CodeModelLanguageConstants.vsCMLanguageVB
        Dim caseSensitive As Boolean = False
        Dim tn As Object = Microsoft_VisualStudio_Editors_SettingsDesigner_SettingTypeNameResolutionServiceAccessor.CreatePrivate(languageGuid, caseSensitive)
        sp.AddService(tn.GetType(), tn)

        Dim VsHierarchy As IVsHierarchy = New Mockisar.MockIVsHierarchy
        Dim typeResolutionService As System.ComponentModel.Design.ITypeResolutionService = New Mockisar.MockITypeResolutionService(True, GetType(System.String))
        Dim typeCache As Object = Microsoft_VisualStudio_Editors_SettingsDesigner_SettingsTypeCacheAccessor.CreatePrivate(VsHierarchy, 0, typeResolutionService, caseSensitive)
        sp.AddService(typeCache.GetType(), typeCache)

        Dim tds As New Mockisar.MockITypeDiscoveryService(True)
        Dim target As Form = Microsoft_VisualStudio_Editors_SettingsDesigner_TypePickerDialogAccessor.CreatePrivate(sp, vsHierarchy, 0)

        sp.AddService(GetType(Microsoft.VisualStudio.Shell.Interop.IVsUIShell), New Mockisar.MockIVsUiShell)
        Dim accessor As Microsoft_VisualStudio_Editors_SettingsDesigner_TypePickerDialogAccessor = New Microsoft_VisualStudio_Editors_SettingsDesigner_TypePickerDialogAccessor(target)
        accessor.TypeName = "String"

        Dim actual As Boolean

        actual = accessor.QueryClose
        Assert.IsTrue(actual, "Microsoft.VisualStudio.Editors.SettingsDesigner.TypePickerDialog.QueryClose did n" & _
                "ot return the expected value.")

        accessor.TypeName = "string"
        actual = accessor.QueryClose
        Assert.IsTrue(actual, "Microsoft.VisualStudio.Editors.SettingsDesigner.TypePickerDialog.QueryClose did n" & _
                "ot return the expected value.")

    End Sub

    '''<summary>
    '''A test for QueryClose()
    '''</summary>
    <DeploymentItem("Microsoft.VisualStudio.Editors.dll"), _
     TestMethod()> _
    Public Sub QueryCloseTest_CaseSensitive()
        Dim sp As New Mockisar.MockServiceProvider()

        Dim languageGuid As String = EnvDTE.CodeModelLanguageConstants.vsCMLanguageVB
        Dim caseSensitive As Boolean = True
        Dim tn As Object = Microsoft_VisualStudio_Editors_SettingsDesigner_SettingTypeNameResolutionServiceAccessor.CreatePrivate(languageGuid, caseSensitive)
        sp.AddService(tn.GetType(), tn)
        sp.AddService(GetType(Microsoft.VisualStudio.Shell.Interop.IVsUIShell), New Mockisar.MockIVsUiShell())

        Dim VsHierarchy As IVsHierarchy = New Mockisar.MockIVsHierarchy
        Dim typeResolutionService As System.ComponentModel.Design.ITypeResolutionService = New Mockisar.MockITypeResolutionService(True, GetType(System.String))
        Dim typeCache As Object = Microsoft_VisualStudio_Editors_SettingsDesigner_SettingsTypeCacheAccessor.CreatePrivate(VsHierarchy, 0, typeResolutionService, True)
        sp.AddService(typeCache.GetType(), typeCache)

        sp.AddService(GetType(Microsoft.VisualStudio.Shell.Interop.IVsUIShell), New Mockisar.MockIVsUiShell)

        Dim tds As New Mockisar.MockITypeDiscoveryService(True)
        Dim target As Form = Microsoft_VisualStudio_Editors_SettingsDesigner_TypePickerDialogAccessor.CreatePrivate(sp, vsHierarchy, 0)

        Dim accessor As Microsoft_VisualStudio_Editors_SettingsDesigner_TypePickerDialogAccessor = New Microsoft_VisualStudio_Editors_SettingsDesigner_TypePickerDialogAccessor(target)
        accessor.TypeName = "String"

        Dim actual As Boolean

        actual = accessor.QueryClose
        Assert.IsTrue(actual, "Microsoft.VisualStudio.Editors.SettingsDesigner.TypePickerDialog.QueryClose did n" & _
                "ot return the expected value.")

        accessor.TypeName = "string"
        actual = accessor.QueryClose
        Assert.IsFalse(actual, "Microsoft.VisualStudio.Editors.SettingsDesigner.TypePickerDialog.QueryClose did n" & _
                "ot return the expected value.")

    End Sub

    '''<summary>
    '''A test for ResolveTypeName(ByVal String)
    '''</summary>
    <DeploymentItem("Microsoft.VisualStudio.Editors.dll"), _
     TestMethod()> _
    Public Sub NormalizeTypeNameTest()
        Dim sp As New Mockisar.MockServiceProvider()

        Dim languageGuid As String = EnvDTE.CodeModelLanguageConstants.vsCMLanguageVB
        Dim caseSensitive As Boolean = False
        Dim tn As Object = Microsoft_VisualStudio_Editors_SettingsDesigner_SettingTypeNameResolutionServiceAccessor.CreatePrivate(languageGuid, caseSensitive)
        sp.AddService(tn.GetType(), tn)

        Dim vsHierarchy As IVsHierarchy = New Mockisar.MockIVsHierarchy

        Dim tds As New Mockisar.MockITypeDiscoveryService(True)

        Dim target As Form = Microsoft_VisualStudio_Editors_SettingsDesigner_TypePickerDialogAccessor.CreatePrivate(sp, vsHierarchy, 0)

        Dim accessor As Microsoft_VisualStudio_Editors_SettingsDesigner_TypePickerDialogAccessor = New Microsoft_VisualStudio_Editors_SettingsDesigner_TypePickerDialogAccessor(target)

        Dim displayName As String = "String"

        Dim expected As String = GetType(String).FullName
        Dim actual As String

        actual = accessor.NormalizeTypeName(displayName)

        Assert.AreEqual(expected, actual, "Microsoft.VisualStudio.Editors.SettingsDesigner.TypePickerDialog.ResolveTypeName " & _
                "did not return the expected value.")
    End Sub

End Class
