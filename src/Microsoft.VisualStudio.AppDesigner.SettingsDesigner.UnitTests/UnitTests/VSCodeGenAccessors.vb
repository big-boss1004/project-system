Imports Microsoft.VisualStudio.TestTools.UnitTesting

'------------------------------------------------------------------------------
'<autogenerated>
'        This code was generated by Microsoft Visual Studio Team System 2005.
'
'        Changes to this file may cause incorrect behavior and will be lost if
'        the code is regenerated.
'</autogenerated>
'------------------------------------------------------------------------------

<System.Diagnostics.DebuggerStepThrough(),  _
 System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TestTools.UnitTestGeneration", "1.0.0.0")>  _
Friend Class BaseAccessor
    
    Protected m_privateObject As Microsoft.VisualStudio.TestTools.UnitTesting.PrivateObject
    
    Protected Sub New(ByVal target As Object, ByVal type As Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType)
        MyBase.New
        m_privateObject = New Microsoft.VisualStudio.TestTools.UnitTesting.PrivateObject(target, type)
    End Sub
    
    Protected Sub New(ByVal type As Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType)
        Me.New(Nothing, type)
    End Sub
    
    Friend Overridable ReadOnly Property Target() As Object
        Get
            Return m_privateObject.Target
        End Get
    End Property
    
    Public Overrides Function ToString() As String
        Return Me.Target.ToString
    End Function
    
    Public Overloads Overrides Function Equals(ByVal obj As Object) As Boolean
        If GetType(BaseAccessor).IsInstanceOfType(obj) Then
            obj = CType(obj,BaseAccessor).Target
        End If
        Return Me.Target.Equals(obj)
    End Function
    
    Public Overrides Function GetHashCode() As Integer
        Return Me.Target.GetHashCode
    End Function
End Class

































<System.Diagnostics.DebuggerStepThrough(),  _
 System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TestTools.UnitTestGeneration", "1.0.0.0")>  _
Friend Class Microsoft_VisualStudio_Editors_SettingsDesigner_TypePickerDialogAccessor
    Inherits BaseAccessor
    
    Protected Shared m_privateType As Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType = New Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType("Microsoft.VisualStudio.Editors", "Microsoft.VisualStudio.Editors.SettingsDesigner.TypePickerDialog")
    
    Friend Sub New(ByVal target As Object)
        MyBase.New(target, m_privateType)
    End Sub
    
    Friend Shared Property previousSize() As Global.System.Drawing.Size
        Get
            Dim ret As Global.System.Drawing.Size = CType(m_privateType.GetStaticFieldOrProperty("previousSize"),Global.System.Drawing.Size)
            Return ret
        End Get
        Set
            m_privateType.SetStaticFieldOrProperty("previousSize", value)
        End Set
    End Property
    
    Friend Property TypeTextBox() As Global.System.Windows.Forms.TextBox
        Get
            Dim ret As Global.System.Windows.Forms.TextBox = CType(m_privateObject.GetFieldOrProperty("TypeTextBox"),Global.System.Windows.Forms.TextBox)
            Return ret
        End Get
        Set
            m_privateObject.SetFieldOrProperty("TypeTextBox", value)
        End Set
    End Property
    
    Friend Property m_CancelButton() As Global.System.Windows.Forms.Button
        Get
            Dim ret As Global.System.Windows.Forms.Button = CType(m_privateObject.GetFieldOrProperty("m_CancelButton"),Global.System.Windows.Forms.Button)
            Return ret
        End Get
        Set
            m_privateObject.SetFieldOrProperty("m_CancelButton", value)
        End Set
    End Property
    
    Friend Property m_OkButton() As Global.System.Windows.Forms.Button
        Get
            Dim ret As Global.System.Windows.Forms.Button = CType(m_privateObject.GetFieldOrProperty("m_OkButton"),Global.System.Windows.Forms.Button)
            Return ret
        End Get
        Set
            m_privateObject.SetFieldOrProperty("m_OkButton", value)
        End Set
    End Property
    
    Friend Property TreeViewPanel() As Global.System.Windows.Forms.Panel
        Get
            Dim ret As Global.System.Windows.Forms.Panel = CType(m_privateObject.GetFieldOrProperty("TreeViewPanel"),Global.System.Windows.Forms.Panel)
            Return ret
        End Get
        Set
            m_privateObject.SetFieldOrProperty("TreeViewPanel", value)
        End Set
    End Property
    
    Friend Property SelectedTypeLabel() As Global.System.Windows.Forms.Label
        Get
            Dim ret As Global.System.Windows.Forms.Label = CType(m_privateObject.GetFieldOrProperty("SelectedTypeLabel"),Global.System.Windows.Forms.Label)
            Return ret
        End Get
        Set
            m_privateObject.SetFieldOrProperty("SelectedTypeLabel", value)
        End Set
    End Property
    
    Friend Property okCancelTableLayoutPanel() As Global.System.Windows.Forms.TableLayoutPanel
        Get
            Dim ret As Global.System.Windows.Forms.TableLayoutPanel = CType(m_privateObject.GetFieldOrProperty("okCancelTableLayoutPanel"),Global.System.Windows.Forms.TableLayoutPanel)
            Return ret
        End Get
        Set
            m_privateObject.SetFieldOrProperty("okCancelTableLayoutPanel", value)
        End Set
    End Property
    
    Friend Property overarchingTableLayoutPanel() As Global.System.Windows.Forms.TableLayoutPanel
        Get
            Dim ret As Global.System.Windows.Forms.TableLayoutPanel = CType(m_privateObject.GetFieldOrProperty("overarchingTableLayoutPanel"),Global.System.Windows.Forms.TableLayoutPanel)
            Return ret
        End Get
        Set
            m_privateObject.SetFieldOrProperty("overarchingTableLayoutPanel", value)
        End Set
    End Property
    
    Friend Property components() As Global.System.ComponentModel.IContainer
        Get
            Dim ret As Global.System.ComponentModel.IContainer = CType(m_privateObject.GetFieldOrProperty("components"),Global.System.ComponentModel.IContainer)
            Return ret
        End Get
        Set
            m_privateObject.SetFieldOrProperty("components", value)
        End Set
    End Property
    
    Friend Property TypeTreeView() As Global.SettingsDesignerUnitTests.Microsoft_VisualStudio_Editors_SettingsDesigner_TypePickerDialog_TypeTVAccessor
        Get
            Dim _ret_val As Object = m_privateObject.GetFieldOrProperty("TypeTreeView")
            Dim _ret As Global.SettingsDesignerUnitTests.Microsoft_VisualStudio_Editors_SettingsDesigner_TypePickerDialog_TypeTVAccessor = Nothing
            If (Not (_ret_val) Is Nothing) Then
                _ret = New Global.SettingsDesignerUnitTests.Microsoft_VisualStudio_Editors_SettingsDesigner_TypePickerDialog_TypeTVAccessor(_ret_val)
            End If
            Dim ret As Global.SettingsDesignerUnitTests.Microsoft_VisualStudio_Editors_SettingsDesigner_TypePickerDialog_TypeTVAccessor = _ret
            Return ret
        End Get
        Set(ByVal value As Global.SettingsDesignerUnitTests.Microsoft_VisualStudio_Editors_SettingsDesigner_TypePickerDialog_TypeTVAccessor)
            m_privateObject.SetFieldOrProperty("TypeTreeView", value)
        End Set
    End Property

    Friend Property TypeName() As String
        Get
            Dim ret As String = CType(m_privateObject.GetProperty("TypeName"), String)
            Return ret
        End Get
        Set(ByVal value As String)
            m_privateObject.SetProperty("TypeName", value)
        End Set
    End Property

    Friend ReadOnly Property AvailableTypes() As Global.System.Windows.Forms.AutoCompleteStringCollection
        Get
            Dim ret As Global.System.Windows.Forms.AutoCompleteStringCollection = CType(m_privateObject.GetProperty("AvailableTypes"), Global.System.Windows.Forms.AutoCompleteStringCollection)
            Return ret
        End Get
    End Property

    Friend Overloads Shared Function CreatePrivate(ByVal ServiceProvider As Global.System.IServiceProvider) As Global.System.Windows.Forms.Form
        Dim args() As Object = New Object() {ServiceProvider}
        Dim priv_obj As Microsoft.VisualStudio.TestTools.UnitTesting.PrivateObject = New Microsoft.VisualStudio.TestTools.UnitTesting.PrivateObject("Microsoft.VisualStudio.Editors", "Microsoft.VisualStudio.Editors.SettingsDesigner.TypePickerDialog", New System.Type() {GetType(Global.System.IServiceProvider)}, args)
        Return CType(priv_obj.Target, Global.System.Windows.Forms.Form)
    End Function

    Friend Overloads Shared Function CreatePrivate() As Global.System.Windows.Forms.Form
        Dim args(-1) As Object
        Dim priv_obj As Microsoft.VisualStudio.TestTools.UnitTesting.PrivateObject = New Microsoft.VisualStudio.TestTools.UnitTesting.PrivateObject("Microsoft.VisualStudio.Editors", "Microsoft.VisualStudio.Editors.SettingsDesigner.TypePickerDialog", New System.Type(-1) {}, args)
        Return CType(priv_obj.Target, Global.System.Windows.Forms.Form)
    End Function

    Friend Sub Dispose(ByVal disposing As Boolean)
        Dim args() As Object = New Object() {disposing}
        m_privateObject.Invoke("Dispose", New System.Type() {GetType(Boolean)}, args)
    End Sub

    Friend Sub InitializeComponent()
        Dim args(-1) As Object
        m_privateObject.Invoke("InitializeComponent", New System.Type(-1) {}, args)
    End Sub

    Friend Sub TypeTreeViewAfterSelectHandler(ByVal sender As Object, ByVal e As Global.System.Windows.Forms.TreeViewEventArgs)
        Dim args() As Object = New Object() {sender, e}
        m_privateObject.Invoke("TypeTreeViewAfterSelectHandler", New System.Type() {GetType(Object), GetType(Global.System.Windows.Forms.TreeViewEventArgs)}, args)
    End Sub

    Friend Sub SetServiceProvider(ByVal Provider As Global.System.IServiceProvider)
        Dim args() As Object = New Object() {Provider}
        m_privateObject.Invoke("SetServiceProvider", New System.Type() {GetType(Global.System.IServiceProvider)}, args)
    End Sub

    Friend Sub SetAvailableTypes(ByVal types As System.Collections.Generic.IEnumerable(Of System.Type))
        Dim args() As Object = New Object() {types}
        m_privateObject.Invoke("SetAvailableTypes", New System.Type() {GetType(System.Collections.Generic.IEnumerable(Of System.Type))}, args)
    End Sub

    Friend Sub m_OkButton_Click(ByVal sender As Object, ByVal e As Global.System.EventArgs)
        Dim args() As Object = New Object() {sender, e}
        m_privateObject.Invoke("m_OkButton_Click", New System.Type() {GetType(Object), GetType(Global.System.EventArgs)}, args)
    End Sub

    Friend Function QueryClose() As Boolean
        Dim args(-1) As Object
        Dim ret As Boolean = CType(m_privateObject.Invoke("QueryClose", New System.Type(-1) {}, args), Boolean)
        Return ret
    End Function

    Friend Function NormalizeTypeName(ByVal displayName As String) As String
        Dim args() As Object = New Object() {displayName}
        Dim ret As String = CType(m_privateObject.Invoke("NormalizeTypeName", New System.Type() {GetType(String)}, args), String)
        Return ret
    End Function

    Friend Function GetProjectImports() As System.Collections.Generic.List(Of String)
        Dim args(-1) As Object
        Dim ret As System.Collections.Generic.List(Of String) = CType(m_privateObject.Invoke("GetProjectImports", New System.Type(-1) {}, args), System.Collections.Generic.List(Of String))
        Return ret
    End Function

    Friend Sub TypePickerDialog_FormClosed(ByVal sender As Object, ByVal e As Global.System.Windows.Forms.FormClosedEventArgs)
        Dim args() As Object = New Object() {sender, e}
        m_privateObject.Invoke("TypePickerDialog_FormClosed", New System.Type() {GetType(Object), GetType(Global.System.Windows.Forms.FormClosedEventArgs)}, args)
    End Sub

    Friend Sub TypePickerDialog_HelpButtonClicked(ByVal sender As Object, ByVal e As Global.System.ComponentModel.CancelEventArgs)
        Dim args() As Object = New Object() {sender, e}
        m_privateObject.Invoke("TypePickerDialog_HelpButtonClicked", New System.Type() {GetType(Object), GetType(Global.System.ComponentModel.CancelEventArgs)}, args)
    End Sub
End Class
<System.Diagnostics.DebuggerStepThrough(), _
 System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TestTools.UnitTestGeneration", "1.0.0.0")> _
Friend Class Microsoft_VisualStudio_Editors_SettingsDesigner_TypePickerDialog_TypeTVAccessor
    Inherits BaseAccessor

    Protected Shared m_privateType As Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType = New Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType("Microsoft.VisualStudio.Editors", "Microsoft.VisualStudio.Editors.SettingsDesigner.TypePickerDialog+TypeTV")

    Friend Sub New(ByVal target As Object)
        MyBase.New(target, m_privateType)
    End Sub

    Friend Shared Function CreatePrivate() As Global.System.Windows.Forms.TreeView
        Dim args(-1) As Object
        Dim priv_obj As Microsoft.VisualStudio.TestTools.UnitTesting.PrivateObject = New Microsoft.VisualStudio.TestTools.UnitTesting.PrivateObject("Microsoft.VisualStudio.Editors", "Microsoft.VisualStudio.Editors.SettingsDesigner.TypePickerDialog+TypeTV", New System.Type(-1) {}, args)
        Return CType(priv_obj.Target, Global.System.Windows.Forms.TreeView)
    End Function

    Friend Sub OnBeforeExpand(ByVal e As Global.System.Windows.Forms.TreeViewCancelEventArgs)
        Dim args() As Object = New Object() {e}
        m_privateObject.Invoke("OnBeforeExpand", New System.Type() {GetType(Global.System.Windows.Forms.TreeViewCancelEventArgs)}, args)
    End Sub

    Friend Sub AddPath(ByVal Parent As Global.SettingsDesignerUnitTests.Microsoft_VisualStudio_Editors_SettingsDesigner_TypePickerDialog_TypeTVNodeAccessor, ByVal Path As String)
        Dim Parent_val_target As Object = Nothing
        If (Not (Parent) Is Nothing) Then
            Parent_val_target = Parent.Target
        End If
        Dim args() As Object = New Object() {Parent_val_target, Path}
        Dim target As Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType = New Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType("Microsoft.VisualStudio.Editors", "Microsoft.VisualStudio.Editors.SettingsDesigner.TypePickerDialog+TypeTVNode")
        m_privateObject.Invoke("AddPath", New System.Type() {target.ReferencedType, GetType(String)}, args)
    End Sub
End Class
<System.Diagnostics.DebuggerStepThrough(), _
 System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TestTools.UnitTestGeneration", "1.0.0.0")> _
Friend Class Microsoft_VisualStudio_Editors_SettingsDesigner_TypePickerDialog_TypeTVNodeAccessor
    Inherits BaseAccessor

    Protected Shared m_privateType As Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType = New Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType("Microsoft.VisualStudio.Editors", "Microsoft.VisualStudio.Editors.SettingsDesigner.TypePickerDialog+TypeTVNode")

    Friend Sub New(ByVal target As Object)
        MyBase.New(target, m_privateType)
    End Sub

    Friend Property m_childStrings() As System.Collections.Generic.List(Of String)
        Get
            Dim ret As System.Collections.Generic.List(Of String) = CType(m_privateObject.GetFieldOrProperty("m_childStrings"), System.Collections.Generic.List(Of String))
            Return ret
        End Get
        Set(ByVal value As System.Collections.Generic.List(Of String))
            m_privateObject.SetFieldOrProperty("m_childStrings", value)
        End Set
    End Property

    Friend Property DUMMY_ITEM_TEXT() As String
        Get
            Dim ret As String = CType(m_privateObject.GetFieldOrProperty("DUMMY_ITEM_TEXT"), String)
            Return ret
        End Get
        Set(ByVal value As String)
            m_privateObject.SetFieldOrProperty("DUMMY_ITEM_TEXT", value)
        End Set
    End Property

    Friend ReadOnly Property IsLeafNode() As Boolean
        Get
            Dim ret As Boolean = CType(m_privateObject.GetProperty("IsLeafNode"), Boolean)
            Return ret
        End Get
    End Property

    Friend Sub EnsureChildrenAdded()
        Dim args(-1) As Object
        m_privateObject.Invoke("EnsureChildrenAdded", New System.Type(-1) {}, args)
    End Sub

    Friend Sub AddChildNode(ByVal Path As String)
        Dim args() As Object = New Object() {Path}
        m_privateObject.Invoke("AddChildNode", New System.Type() {GetType(String)}, args)
    End Sub

    Friend Shared Function ExtractName(ByVal Path As String) As String
        Dim args() As Object = New Object() {Path}
        Dim ret As String = CType(m_privateType.InvokeStatic("ExtractName", New System.Type() {GetType(String)}, args), String)
        Return ret
    End Function

    Friend Shared Function ExtractChildPath(ByVal Path As String) As String
        Dim args() As Object = New Object() {Path}
        Dim ret As String = CType(m_privateType.InvokeStatic("ExtractChildPath", New System.Type() {GetType(String)}, args), String)
        Return ret
    End Function

    Friend Shared Function CreatePrivate() As Global.System.Windows.Forms.TreeNode
        Dim priv_obj As Microsoft.VisualStudio.TestTools.UnitTesting.PrivateObject = New Microsoft.VisualStudio.TestTools.UnitTesting.PrivateObject("Microsoft.VisualStudio.Editors", "Microsoft.VisualStudio.Editors.SettingsDesigner.TypePickerDialog+TypeTVNode", New Object(-1) {})
        Return CType(priv_obj.Target, Global.System.Windows.Forms.TreeNode)
    End Function
End Class

<System.Diagnostics.DebuggerStepThrough(), _
 System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TestTools.UnitTestGeneration", "1.0.0.0")> _
Friend Class Microsoft_VisualStudio_Editors_SettingsDesigner_SettingTypeNameResolutionServiceAccessor
    Inherits BaseAccessor

    Protected Shared m_privateType As Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType = New Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType("Microsoft.VisualStudio.Editors", "Microsoft.VisualStudio.Editors.SettingsDesigner.SettingTypeNameResolutionService")

    Friend Sub New(ByVal target As Object)
        MyBase.New(target, m_privateType)
    End Sub

    Friend Property m_LanguageSpecificToFxTypeName() As System.Collections.Generic.Dictionary(Of String, String)
        Get
            Dim ret As System.Collections.Generic.Dictionary(Of String, String) = CType(m_privateObject.GetFieldOrProperty("m_LanguageSpecificToFxTypeName"), System.Collections.Generic.Dictionary(Of String, String))
            Return ret
        End Get
        Set(ByVal value As System.Collections.Generic.Dictionary(Of String, String))
            m_privateObject.SetFieldOrProperty("m_LanguageSpecificToFxTypeName", value)
        End Set
    End Property

    Friend Property m_FxTypeNameToLanguageSpecific() As System.Collections.Generic.Dictionary(Of String, String)
        Get
            Dim ret As System.Collections.Generic.Dictionary(Of String, String) = CType(m_privateObject.GetFieldOrProperty("m_FxTypeNameToLanguageSpecific"), System.Collections.Generic.Dictionary(Of String, String))
            Return ret
        End Get
        Set(ByVal value As System.Collections.Generic.Dictionary(Of String, String))
            m_privateObject.SetFieldOrProperty("m_FxTypeNameToLanguageSpecific", value)
        End Set
    End Property

    Friend Property m_caseSensitive() As Boolean
        Get
            Dim ret As Boolean = CType(m_privateObject.GetFieldOrProperty("m_caseSensitive"), Boolean)
            Return ret
        End Get
        Set(ByVal value As Boolean)
            m_privateObject.SetFieldOrProperty("m_caseSensitive", value)
        End Set
    End Property

    Friend ReadOnly Property IsCaseSensitive() As Boolean
        Get
            Dim ret As Boolean = CType(m_privateObject.GetProperty("IsCaseSensitive"), Boolean)
            Return ret
        End Get
    End Property

    Friend Shared Function CreatePrivate(ByVal languageGuid As String, ByVal caseSensitive As Boolean) As Object
        Dim args() As Object = New Object() {languageGuid, caseSensitive}
        Dim priv_obj As Microsoft.VisualStudio.TestTools.UnitTesting.PrivateObject = New Microsoft.VisualStudio.TestTools.UnitTesting.PrivateObject("Microsoft.VisualStudio.Editors", "Microsoft.VisualStudio.Editors.SettingsDesigner.SettingTypeNameResolutionService", New System.Type() {GetType(String), GetType(Boolean)}, args)
        Return priv_obj.Target
    End Function

    Friend Function PersistedSettingTypeNameToTypeDisplayName(ByVal typeName As String) As String
        Dim args() As Object = New Object() {typeName}
        Dim ret As String = CType(m_privateObject.Invoke("PersistedSettingTypeNameToTypeDisplayName", New System.Type() {GetType(String)}, args), String)
        Return ret
    End Function

    Friend Function PersistedSettingTypeNameToFxTypeName(ByVal typeName As String) As String
        Dim args() As Object = New Object() {typeName}
        Dim ret As String = CType(m_privateObject.Invoke("PersistedSettingTypeNameToFxTypeName", New System.Type() {GetType(String)}, args), String)
        Return ret
    End Function

    Friend Function TypeDisplayNameToPersistedSettingTypeName(ByVal typeName As String) As String
        Dim args() As Object = New Object() {typeName}
        Dim ret As String = CType(m_privateObject.Invoke("TypeDisplayNameToPersistedSettingTypeName", New System.Type() {GetType(String)}, args), String)
        Return ret
    End Function

    Friend Sub AddEntry(ByVal FxName As String, ByVal languageSpecificName As String)
        Dim args() As Object = New Object() {FxName, languageSpecificName}
        m_privateObject.Invoke("AddEntry", New System.Type() {GetType(String), GetType(String)}, args)
    End Sub
End Class


<System.Diagnostics.DebuggerStepThrough(), _
 System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TestTools.UnitTestGeneration", "1.0.0.0")> _
Friend Class Microsoft_VisualStudio_Editors_SettingsDesigner_SettingsTypeCacheAccessor
    Inherits BaseAccessor

    Protected Shared m_privateType As Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType = New Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType("Microsoft.VisualStudio.Editors", "Microsoft.VisualStudio.Editors.SettingsDesigner.SettingsTypeCache")

    Friend Sub New(ByVal target As Object)
        MyBase.New(target, m_privateType)
    End Sub

    Friend Property m_typeResolutionService() As Global.System.ComponentModel.Design.ITypeResolutionService
        Get
            Dim ret As Global.System.ComponentModel.Design.ITypeResolutionService = CType(m_privateObject.GetFieldOrProperty("m_typeResolutionService"), Global.System.ComponentModel.Design.ITypeResolutionService)
            Return ret
        End Get
        Set(ByVal value As Global.System.ComponentModel.Design.ITypeResolutionService)
            m_privateObject.SetFieldOrProperty("m_typeResolutionService", value)
        End Set
    End Property

    Friend Property m_cachedSettingTypes() As System.Collections.Generic.Dictionary(Of String, System.Type)
        Get
            Dim ret As System.Collections.Generic.Dictionary(Of String, System.Type) = CType(m_privateObject.GetFieldOrProperty("m_cachedSettingTypes"), System.Collections.Generic.Dictionary(Of String, System.Type))
            Return ret
        End Get
        Set(ByVal value As System.Collections.Generic.Dictionary(Of String, System.Type))
            m_privateObject.SetFieldOrProperty("m_cachedSettingTypes", value)
        End Set
    End Property

    Friend Property m_caseSensitive() As Boolean
        Get
            Dim ret As Boolean = CType(m_privateObject.GetFieldOrProperty("m_caseSensitive"), Boolean)
            Return ret
        End Get
        Set(ByVal value As Boolean)
            m_privateObject.SetFieldOrProperty("m_caseSensitive", value)
        End Set
    End Property

    Friend Property m_wellKnownTypes() As Global.System.Type()
        Get
            Dim ret() As Global.System.Type = CType(m_privateObject.GetFieldOrProperty("m_wellKnownTypes"), Global.System.Type())
            Return ret
        End Get
        Set(ByVal value As Global.System.Type())
            m_privateObject.SetFieldOrProperty("m_wellKnownTypes", value)
        End Set
    End Property

    Friend Shared Function CreatePrivate(ByVal typeResolutionService As Global.System.ComponentModel.Design.ITypeResolutionService, ByVal caseSensitive As Boolean) As Object
        Dim args() As Object = New Object() {typeResolutionService, caseSensitive}
        Dim priv_obj As Microsoft.VisualStudio.TestTools.UnitTesting.PrivateObject = New Microsoft.VisualStudio.TestTools.UnitTesting.PrivateObject("Microsoft.VisualStudio.Editors", "Microsoft.VisualStudio.Editors.SettingsDesigner.SettingsTypeCache", New System.Type() {GetType(Global.System.ComponentModel.Design.ITypeResolutionService), GetType(Boolean)}, args)
        Return priv_obj.Target
    End Function

    Friend Function GetSettingType(ByVal typeName As String) As Global.System.Type
        Dim args() As Object = New Object() {typeName}
        Dim ret As Global.System.Type = CType(m_privateObject.Invoke("GetSettingType", New System.Type() {GetType(String)}, args), Global.System.Type)
        Return ret
    End Function

    Friend Function GetWellKnownTypes() As Global.System.Type()
        Dim args(-1) As Object
        Dim ret() As Global.System.Type = CType(m_privateObject.Invoke("GetWellKnownTypes", New System.Type(-1) {}, args), Global.System.Type())
        Return ret
    End Function

    Friend Function IsWellKnownType(ByVal type As Global.System.Type) As Boolean
        Dim args() As Object = New Object() {type}
        Dim ret As Boolean = CType(m_privateObject.Invoke("IsWellKnownType", New System.Type() {GetType(Global.System.Type)}, args), Boolean)
        Return ret
    End Function

    Friend Function ResolveType(ByVal persistedSettingTypeName As String, ByVal caseSensitive As Boolean) As Global.System.Type
        Dim args() As Object = New Object() {persistedSettingTypeName, caseSensitive}
        Dim ret As Global.System.Type = CType(m_privateObject.Invoke("ResolveType", New System.Type() {GetType(String), GetType(Boolean)}, args), Global.System.Type)
        Return ret
    End Function
End Class
<System.Diagnostics.DebuggerStepThrough(), _
 System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TestTools.UnitTestGeneration", "1.0.0.0")> _
Friend Class Microsoft_VisualStudio_Editors_SettingsDesigner_SettingsValueSerializerAccessor
    Inherits BaseAccessor

    Protected Shared m_privateType As Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType = New Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType("Microsoft.VisualStudio.Editors", "Microsoft.VisualStudio.Editors.SettingsDesigner.SettingsValueSerializer")

    Friend Sub New(ByVal target As Object)
        MyBase.New(target, m_privateType)
    End Sub

    Friend Function Deserialize(ByVal ValueType As Global.System.Type, ByVal serializedValue As String, ByVal culture As Global.System.Globalization.CultureInfo) As Object
        Dim args() As Object = New Object() {ValueType, serializedValue, culture}
        Dim ret As Object = CType(m_privateObject.Invoke("Deserialize", New System.Type() {GetType(Global.System.Type), GetType(String), GetType(Global.System.Globalization.CultureInfo)}, args), Object)
        Return ret
    End Function

    Friend Function Serialize(ByVal value As Object, ByVal culture As Global.System.Globalization.CultureInfo) As String
        Dim args() As Object = New Object() {value, culture}
        Dim ret As String = CType(m_privateObject.Invoke("Serialize", New System.Type() {GetType(Object), GetType(Global.System.Globalization.CultureInfo)}, args), String)
        Return ret
    End Function

    Friend Function Normalize(ByVal serializedValue As String, ByVal type As Global.System.Type) As String
        Dim args() As Object = New Object() {serializedValue, type}
        Dim ret As String = CType(m_privateObject.Invoke("Normalize", New System.Type() {GetType(String), GetType(Global.System.Type)}, args), String)
        Return ret
    End Function

    Friend Shared Function CreatePrivate() As Object
        Dim priv_obj As Microsoft.VisualStudio.TestTools.UnitTesting.PrivateObject = New Microsoft.VisualStudio.TestTools.UnitTesting.PrivateObject("Microsoft.VisualStudio.Editors", "Microsoft.VisualStudio.Editors.SettingsDesigner.SettingsValueSerializer", New Object(-1) {})
        Return priv_obj.Target
    End Function
End Class
<System.Diagnostics.DebuggerStepThrough(), _
 System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TestTools.UnitTestGeneration", "1.0.0.0")> _
Friend Class Microsoft_VisualStudio_Editors_SettingsDesigner_SettingTypeDiscoveryServiceAccessor
    Inherits BaseAccessor

    Protected Shared m_privateType As Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType = New Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType("Microsoft.VisualStudio.Editors", "Microsoft.VisualStudio.Editors.SettingsDesigner.SettingTypeDiscoveryService")

    Friend Sub New(ByVal target As Object)
        MyBase.New(target, m_privateType)
    End Sub

    Friend Property m_typeDiscoveryService() As Global.System.ComponentModel.Design.ITypeDiscoveryService
        Get
            Dim ret As Global.System.ComponentModel.Design.ITypeDiscoveryService = CType(m_privateObject.GetFieldOrProperty("m_typeDiscoveryService"), Global.System.ComponentModel.Design.ITypeDiscoveryService)
            Return ret
        End Get
        Set(ByVal value As Global.System.ComponentModel.Design.ITypeDiscoveryService)
            m_privateObject.SetFieldOrProperty("m_typeDiscoveryService", value)
        End Set
    End Property

    Friend Shared Function CreatePrivate(ByVal typeDiscoveryService As Global.System.ComponentModel.Design.ITypeDiscoveryService) As Object
        Dim args() As Object = New Object() {typeDiscoveryService}
        Dim priv_obj As Microsoft.VisualStudio.TestTools.UnitTesting.PrivateObject = New Microsoft.VisualStudio.TestTools.UnitTesting.PrivateObject("Microsoft.VisualStudio.Editors", "Microsoft.VisualStudio.Editors.SettingsDesigner.SettingTypeDiscoveryService", New System.Type() {GetType(Global.System.ComponentModel.Design.ITypeDiscoveryService)}, args)
        Return priv_obj.Target
    End Function

    Friend Function GetAllValidSettingTypes() As System.Collections.Generic.List(Of System.Type)
        Dim args(-1) As Object
        Dim ret As System.Collections.Generic.List(Of System.Type) = CType(m_privateObject.Invoke("GetAllValidSettingTypes", New System.Type(-1) {}, args), System.Collections.Generic.List(Of System.Type))
        Return ret
    End Function
End Class











<System.Diagnostics.DebuggerStepThrough(), _
 System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TestTools.UnitTestGeneration", "1.0.0.0")> _
Friend Class Microsoft_VisualStudio_Editors_SettingsDesigner_DesignTimeSettingsAccessor
    Inherits BaseAccessor

    Protected Shared m_privateType As Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType = New Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType("Microsoft.VisualStudio.Editors", "Microsoft.VisualStudio.Editors.SettingsDesigner.DesignTimeSettings")

    Friend Sub New(ByVal target As Object)
        MyBase.New(target, m_privateType)
    End Sub

    Friend Property m_hierarchy() As Global.Microsoft.VisualStudio.Shell.Interop.IVsHierarchy
        Get
            Dim ret As Global.Microsoft.VisualStudio.Shell.Interop.IVsHierarchy = CType(m_privateObject.GetFieldOrProperty("m_hierarchy"), Global.Microsoft.VisualStudio.Shell.Interop.IVsHierarchy)
            Return ret
        End Get
        Set(ByVal value As Global.Microsoft.VisualStudio.Shell.Interop.IVsHierarchy)
            m_privateObject.SetFieldOrProperty("m_hierarchy", value)
        End Set
    End Property

    Friend Property m_itemId() As UInteger
        Get
            Dim ret As UInteger = CType(m_privateObject.GetFieldOrProperty("m_itemId"), UInteger)
            Return ret
        End Get
        Set(ByVal value As UInteger)
            m_privateObject.SetFieldOrProperty("m_itemId", value)
        End Set
    End Property

    Friend Property m_persistedNamespace() As String
        Get
            Dim ret As String = CType(m_privateObject.GetFieldOrProperty("m_persistedNamespace"), String)
            Return ret
        End Get
        Set(ByVal value As String)
            m_privateObject.SetFieldOrProperty("m_persistedNamespace", value)
        End Set
    End Property

    Friend Property m_useSpecialClassName() As Boolean
        Get
            Dim ret As Boolean = CType(m_privateObject.GetFieldOrProperty("m_useSpecialClassName"), Boolean)
            Return ret
        End Get
        Set(ByVal value As Boolean)
            m_privateObject.SetFieldOrProperty("m_useSpecialClassName", value)
        End Set
    End Property

    Friend ReadOnly Property Count() As Integer
        Get
            Dim ret As Integer = CType(m_privateObject.GetProperty("Count"), Integer)
            Return ret
        End Get
    End Property

    Friend Property UseSpecialClassName() As Boolean
        Get
            Dim ret As Boolean = CType(m_privateObject.GetProperty("UseSpecialClassName"), Boolean)
            Return ret
        End Get
        Set(ByVal value As Boolean)
            m_privateObject.SetProperty("UseSpecialClassName", value)
        End Set
    End Property

    Friend Property PersistedNamespace() As String
        Get
            Dim ret As String = CType(m_privateObject.GetProperty("PersistedNamespace"), String)
            Return ret
        End Get
        Set(ByVal value As String)
            m_privateObject.SetProperty("PersistedNamespace", value)
        End Set
    End Property

    Friend ReadOnly Property CodeProvider() As Global.System.CodeDom.Compiler.CodeDomProvider
        Get
            Dim ret As Global.System.CodeDom.Compiler.CodeDomProvider = CType(m_privateObject.GetProperty("CodeProvider"), Global.System.CodeDom.Compiler.CodeDomProvider)
            Return ret
        End Get
    End Property

    Friend Function IEnumerable_GetEnumerator() As Global.System.Collections.IEnumerator
        Dim args(-1) As Object
        Dim ret As Global.System.Collections.IEnumerator = CType(m_privateObject.Invoke("IEnumerable_GetEnumerator", New System.Type(-1) {}, args), Global.System.Collections.IEnumerator)
        Return ret
    End Function

    Friend Overloads Shared Function CreatePrivate() As Global.System.ComponentModel.Component
        Dim args(-1) As Object
        Dim priv_obj As Microsoft.VisualStudio.TestTools.UnitTesting.PrivateObject = New Microsoft.VisualStudio.TestTools.UnitTesting.PrivateObject("Microsoft.VisualStudio.Editors", "Microsoft.VisualStudio.Editors.SettingsDesigner.DesignTimeSettings", New System.Type(-1) {}, args)
        Return CType(priv_obj.Target, Global.System.ComponentModel.Component)
    End Function

    Friend Overloads Shared Function CreatePrivate(ByVal hierarchy As Global.Microsoft.VisualStudio.Shell.Interop.IVsHierarchy, ByVal itemId As UInteger) As Global.System.ComponentModel.Component
        Dim args() As Object = New Object() {hierarchy, itemId}
        Dim priv_obj As Microsoft.VisualStudio.TestTools.UnitTesting.PrivateObject = New Microsoft.VisualStudio.TestTools.UnitTesting.PrivateObject("Microsoft.VisualStudio.Editors", "Microsoft.VisualStudio.Editors.SettingsDesigner.DesignTimeSettings", New System.Type() {GetType(Global.Microsoft.VisualStudio.Shell.Interop.IVsHierarchy), GetType(UInteger)}, args)
        Return CType(priv_obj.Target, Global.System.ComponentModel.Component)
    End Function

    Friend Function IsValidName(ByVal Name As String, ByVal ignoreUniqueness As Boolean, ByVal instanceToIgnore As Global.SettingsDesignerUnitTests.Microsoft_VisualStudio_Editors_SettingsDesigner_DesignTimeSettingInstanceAccessor) As Boolean
        Dim instanceToIgnore_val_target As Object = Nothing
        If (Not (instanceToIgnore) Is Nothing) Then
            instanceToIgnore_val_target = instanceToIgnore.Target
        End If
        Dim args() As Object = New Object() {Name, ignoreUniqueness, instanceToIgnore_val_target}
        Dim target As Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType = New Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType("Microsoft.VisualStudio.Editors", "Microsoft.VisualStudio.Editors.SettingsDesigner.DesignTimeSettingInstance")
        Dim ret As Boolean = CType(m_privateObject.Invoke("IsValidName", New System.Type() {GetType(String), GetType(Boolean), target.ReferencedType}, args), Boolean)
        Return ret
    End Function

    Friend Function IsUniqueName(ByVal Name As String, ByVal IgnoreThisInstance As Global.SettingsDesignerUnitTests.Microsoft_VisualStudio_Editors_SettingsDesigner_DesignTimeSettingInstanceAccessor) As Boolean
        Dim IgnoreThisInstance_val_target As Object = Nothing
        If (Not (IgnoreThisInstance) Is Nothing) Then
            IgnoreThisInstance_val_target = IgnoreThisInstance.Target
        End If
        Dim args() As Object = New Object() {Name, IgnoreThisInstance_val_target}
        Dim target As Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType = New Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType("Microsoft.VisualStudio.Editors", "Microsoft.VisualStudio.Editors.SettingsDesigner.DesignTimeSettingInstance")
        Dim ret As Boolean = CType(m_privateObject.Invoke("IsUniqueName", New System.Type() {GetType(String), target.ReferencedType}, args), Boolean)
        Return ret
    End Function

    Friend Function IsValidIdentifier(ByVal Name As String) As Boolean
        Dim args() As Object = New Object() {Name}
        Dim ret As Boolean = CType(m_privateObject.Invoke("IsValidIdentifier", New System.Type() {GetType(String)}, args), Boolean)
        Return ret
    End Function

    Friend Shared Function EqualIdentifiers(ByVal Id1 As String, ByVal Id2 As String) As Boolean
        Dim args() As Object = New Object() {Id1, Id2}
        Dim ret As Boolean = CType(m_privateType.InvokeStatic("EqualIdentifiers", New System.Type() {GetType(String), GetType(String)}, args), Boolean)
        Return ret
    End Function

    Friend Function CreateUniqueName(ByVal Base As String) As String
        Dim args() As Object = New Object() {Base}
        Dim ret As String = CType(m_privateObject.Invoke("CreateUniqueName", New System.Type() {GetType(String)}, args), String)
        Return ret
    End Function

    Friend Function MakeValidIdentifier(ByVal name As String) As String
        Dim args() As Object = New Object() {name}
        Dim ret As String = CType(m_privateObject.Invoke("MakeValidIdentifier", New System.Type() {GetType(String)}, args), String)
        Return ret
    End Function

    Friend Function AddNew(ByVal TypeName As String, ByVal SettingName As String, ByVal AllowMakeUnique As Boolean) As Global.SettingsDesignerUnitTests.Microsoft_VisualStudio_Editors_SettingsDesigner_DesignTimeSettingInstanceAccessor
        Dim args() As Object = New Object() {TypeName, SettingName, AllowMakeUnique}
        Dim _ret_val As Object = m_privateObject.Invoke("AddNew", New System.Type() {GetType(String), GetType(String), GetType(Boolean)}, args)
        Dim _ret As Global.SettingsDesignerUnitTests.Microsoft_VisualStudio_Editors_SettingsDesigner_DesignTimeSettingInstanceAccessor = Nothing
        If (Not (_ret_val) Is Nothing) Then
            _ret = New Global.SettingsDesignerUnitTests.Microsoft_VisualStudio_Editors_SettingsDesigner_DesignTimeSettingInstanceAccessor(_ret_val)
        End If
        Dim ret As Global.SettingsDesignerUnitTests.Microsoft_VisualStudio_Editors_SettingsDesigner_DesignTimeSettingInstanceAccessor = _ret
        Return ret
    End Function

    Friend Sub Add(ByVal Instance As Global.SettingsDesignerUnitTests.Microsoft_VisualStudio_Editors_SettingsDesigner_DesignTimeSettingInstanceAccessor, ByVal MakeNameUnique As Boolean)
        Dim Instance_val_target As Object = Nothing
        If (Not (Instance) Is Nothing) Then
            Instance_val_target = Instance.Target
        End If
        Dim args() As Object = New Object() {Instance_val_target, MakeNameUnique}
        Dim target As Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType = New Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType("Microsoft.VisualStudio.Editors", "Microsoft.VisualStudio.Editors.SettingsDesigner.DesignTimeSettingInstance")
        m_privateObject.Invoke("Add", New System.Type() {target.ReferencedType, GetType(Boolean)}, args)
    End Sub

    Friend Sub Remove(ByVal instance As Global.SettingsDesignerUnitTests.Microsoft_VisualStudio_Editors_SettingsDesigner_DesignTimeSettingInstanceAccessor)
        Dim instance_val_target As Object = Nothing
        If (Not (instance) Is Nothing) Then
            instance_val_target = instance.Target
        End If
        Dim args() As Object = New Object() {instance_val_target}
        Dim target As Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType = New Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType("Microsoft.VisualStudio.Editors", "Microsoft.VisualStudio.Editors.SettingsDesigner.DesignTimeSettingInstance")
        m_privateObject.Invoke("Remove", New System.Type() {target.ReferencedType}, args)
    End Sub
End Class











<System.Diagnostics.DebuggerStepThrough(), _
 System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TestTools.UnitTestGeneration", "1.0.0.0")> _
Friend Class Microsoft_VisualStudio_Editors_SettingsDesigner_SettingTypeValidatorAccessor
    Inherits BaseAccessor

    Protected Shared m_privateType As Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType = New Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType("Microsoft.VisualStudio.Editors", "Microsoft.VisualStudio.Editors.SettingsDesigner.SettingTypeValidator")

    Friend Sub New(ByVal target As Object)
        MyBase.New(target, m_privateType)
    End Sub

    Friend Shared Function IsTypeObsolete(ByVal type As Global.System.Type) As Boolean
        Dim args() As Object = New Object() {type}
        Dim ret As Boolean = CType(m_privateType.InvokeStatic("IsTypeObsolete", New System.Type() {GetType(Global.System.Type)}, args), Boolean)
        Return ret
    End Function

    Friend Shared Function IsValidSettingType(ByVal type As Global.System.Type) As Boolean
        Dim args() As Object = New Object() {type}
        Dim ret As Boolean = CType(m_privateType.InvokeStatic("IsValidSettingType", New System.Type() {GetType(Global.System.Type)}, args), Boolean)
        Return ret
    End Function

    Friend Shared Function CanSerializeType(ByVal type As Global.System.Type) As Boolean
        Dim args() As Object = New Object() {type}
        Dim ret As Boolean = CType(m_privateType.InvokeStatic("CanSerializeType", New System.Type() {GetType(Global.System.Type)}, args), Boolean)
        Return ret
    End Function

    Friend Shared Function CreatePrivate() As Object
        Dim priv_obj As Microsoft.VisualStudio.TestTools.UnitTesting.PrivateObject = New Microsoft.VisualStudio.TestTools.UnitTesting.PrivateObject("Microsoft.VisualStudio.Editors", "Microsoft.VisualStudio.Editors.SettingsDesigner.SettingTypeValidator", New Object(-1) {})
        Return priv_obj.Target
    End Function
End Class






















<System.Diagnostics.DebuggerStepThrough(), _
 System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TestTools.UnitTestGeneration", "1.0.0.0")> _
Friend Class Microsoft_VisualStudio_Editors_SettingsDesigner_DesignTimeSettingInstanceAccessor
    Inherits BaseAccessor

    Protected Shared m_privateType As Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType = New Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType("Microsoft.VisualStudio.Editors", "Microsoft.VisualStudio.Editors.SettingsDesigner.DesignTimeSettingInstance")

    Friend Sub New(ByVal target As Object)
        MyBase.New(target, m_privateType)
    End Sub

    Friend Property m_name() As String
        Get
            Dim ret As String = CType(m_privateObject.GetFieldOrProperty("m_name"), String)
            Return ret
        End Get
        Set(ByVal value As String)
            m_privateObject.SetFieldOrProperty("m_name", value)
        End Set
    End Property

    Friend Property m_settingTypeName() As String
        Get
            Dim ret As String = CType(m_privateObject.GetFieldOrProperty("m_settingTypeName"), String)
            Return ret
        End Get
        Set(ByVal value As String)
            m_privateObject.SetFieldOrProperty("m_settingTypeName", value)
        End Set
    End Property

    Friend Property m_settingScope() As Global.SettingsDesignerUnitTests.Microsoft_VisualStudio_Editors_SettingsDesigner_DesignTimeSettingInstance_SettingScopeAccessor
        Get
            Dim _ret_val As Object = m_privateObject.GetFieldOrProperty("m_settingScope")
            Dim _ret As Global.SettingsDesignerUnitTests.Microsoft_VisualStudio_Editors_SettingsDesigner_DesignTimeSettingInstance_SettingScopeAccessor = Nothing
            If (Not (_ret_val) Is Nothing) Then
                _ret = New Global.SettingsDesignerUnitTests.Microsoft_VisualStudio_Editors_SettingsDesigner_DesignTimeSettingInstance_SettingScopeAccessor(_ret_val)
            End If
            Dim ret As Global.SettingsDesignerUnitTests.Microsoft_VisualStudio_Editors_SettingsDesigner_DesignTimeSettingInstance_SettingScopeAccessor = _ret
            Return ret
        End Get
        Set(ByVal value As Global.SettingsDesignerUnitTests.Microsoft_VisualStudio_Editors_SettingsDesigner_DesignTimeSettingInstance_SettingScopeAccessor)
            m_privateObject.SetFieldOrProperty("m_settingScope", value)
        End Set
    End Property

    Friend Property m_roaming() As Boolean
        Get
            Dim ret As Boolean = CType(m_privateObject.GetFieldOrProperty("m_roaming"), Boolean)
            Return ret
        End Get
        Set(ByVal value As Boolean)
            m_privateObject.SetFieldOrProperty("m_roaming", value)
        End Set
    End Property

    Friend Property m_serializedValue() As String
        Get
            Dim ret As String = CType(m_privateObject.GetFieldOrProperty("m_serializedValue"), String)
            Return ret
        End Get
        Set(ByVal value As String)
            m_privateObject.SetFieldOrProperty("m_serializedValue", value)
        End Set
    End Property

    Friend Property m_provider() As String
        Get
            Dim ret As String = CType(m_privateObject.GetFieldOrProperty("m_provider"), String)
            Return ret
        End Get
        Set(ByVal value As String)
            m_privateObject.SetFieldOrProperty("m_provider", value)
        End Set
    End Property

    Friend Property m_description() As String
        Get
            Dim ret As String = CType(m_privateObject.GetFieldOrProperty("m_description"), String)
            Return ret
        End Get
        Set(ByVal value As String)
            m_privateObject.SetFieldOrProperty("m_description", value)
        End Set
    End Property

    Friend Property m_generateDefaultValueInCode() As Boolean
        Get
            Dim ret As Boolean = CType(m_privateObject.GetFieldOrProperty("m_generateDefaultValueInCode"), Boolean)
            Return ret
        End Get
        Set(ByVal value As Boolean)
            m_privateObject.SetFieldOrProperty("m_generateDefaultValueInCode", value)
        End Set
    End Property

    Friend Property m_generateDefaultValueInCodePropertyDescriptor() As Global.SettingsDesignerUnitTests.Microsoft_VisualStudio_Editors_SettingsDesigner_DesignTimeSettingInstance_GenerateDefaultValueInCodePropertyDescriptorAccessor
        Get
            Dim _ret_val As Object = m_privateObject.GetFieldOrProperty("m_generateDefaultValueInCodePropertyDescriptor")
            Dim _ret As Global.SettingsDesignerUnitTests.Microsoft_VisualStudio_Editors_SettingsDesigner_DesignTimeSettingInstance_GenerateDefaultValueInCodePropertyDescriptorAccessor = Nothing
            If (Not (_ret_val) Is Nothing) Then
                _ret = New Global.SettingsDesignerUnitTests.Microsoft_VisualStudio_Editors_SettingsDesigner_DesignTimeSettingInstance_GenerateDefaultValueInCodePropertyDescriptorAccessor(_ret_val)
            End If
            Dim ret As Global.SettingsDesignerUnitTests.Microsoft_VisualStudio_Editors_SettingsDesigner_DesignTimeSettingInstance_GenerateDefaultValueInCodePropertyDescriptorAccessor = _ret
            Return ret
        End Get
        Set(ByVal value As Global.SettingsDesignerUnitTests.Microsoft_VisualStudio_Editors_SettingsDesigner_DesignTimeSettingInstance_GenerateDefaultValueInCodePropertyDescriptorAccessor)
            m_privateObject.SetFieldOrProperty("m_generateDefaultValueInCodePropertyDescriptor", value)
        End Set
    End Property

    Friend Property m_namePropertyDescriptor() As Global.SettingsDesignerUnitTests.Microsoft_VisualStudio_Editors_SettingsDesigner_DesignTimeSettingInstance_NamePropertyDescriptorAccessor
        Get
            Dim _ret_val As Object = m_privateObject.GetFieldOrProperty("m_namePropertyDescriptor")
            Dim _ret As Global.SettingsDesignerUnitTests.Microsoft_VisualStudio_Editors_SettingsDesigner_DesignTimeSettingInstance_NamePropertyDescriptorAccessor = Nothing
            If (Not (_ret_val) Is Nothing) Then
                _ret = New Global.SettingsDesignerUnitTests.Microsoft_VisualStudio_Editors_SettingsDesigner_DesignTimeSettingInstance_NamePropertyDescriptorAccessor(_ret_val)
            End If
            Dim ret As Global.SettingsDesignerUnitTests.Microsoft_VisualStudio_Editors_SettingsDesigner_DesignTimeSettingInstance_NamePropertyDescriptorAccessor = _ret
            Return ret
        End Get
        Set(ByVal value As Global.SettingsDesignerUnitTests.Microsoft_VisualStudio_Editors_SettingsDesigner_DesignTimeSettingInstance_NamePropertyDescriptorAccessor)
            m_privateObject.SetFieldOrProperty("m_namePropertyDescriptor", value)
        End Set
    End Property

    Friend Property m_descriptionPropertyDescriptor() As Global.SettingsDesignerUnitTests.Microsoft_VisualStudio_Editors_SettingsDesigner_DesignTimeSettingInstance_DescriptionPropertyDescriptorAccessor
        Get
            Dim _ret_val As Object = m_privateObject.GetFieldOrProperty("m_descriptionPropertyDescriptor")
            Dim _ret As Global.SettingsDesignerUnitTests.Microsoft_VisualStudio_Editors_SettingsDesigner_DesignTimeSettingInstance_DescriptionPropertyDescriptorAccessor = Nothing
            If (Not (_ret_val) Is Nothing) Then
                _ret = New Global.SettingsDesignerUnitTests.Microsoft_VisualStudio_Editors_SettingsDesigner_DesignTimeSettingInstance_DescriptionPropertyDescriptorAccessor(_ret_val)
            End If
            Dim ret As Global.SettingsDesignerUnitTests.Microsoft_VisualStudio_Editors_SettingsDesigner_DesignTimeSettingInstance_DescriptionPropertyDescriptorAccessor = _ret
            Return ret
        End Get
        Set(ByVal value As Global.SettingsDesignerUnitTests.Microsoft_VisualStudio_Editors_SettingsDesigner_DesignTimeSettingInstance_DescriptionPropertyDescriptorAccessor)
            m_privateObject.SetFieldOrProperty("m_descriptionPropertyDescriptor", value)
        End Set
    End Property

    Friend Property m_providerPropertyDescriptor() As Global.SettingsDesignerUnitTests.Microsoft_VisualStudio_Editors_SettingsDesigner_DesignTimeSettingInstance_ProviderPropertyDescriptorAccessor
        Get
            Dim _ret_val As Object = m_privateObject.GetFieldOrProperty("m_providerPropertyDescriptor")
            Dim _ret As Global.SettingsDesignerUnitTests.Microsoft_VisualStudio_Editors_SettingsDesigner_DesignTimeSettingInstance_ProviderPropertyDescriptorAccessor = Nothing
            If (Not (_ret_val) Is Nothing) Then
                _ret = New Global.SettingsDesignerUnitTests.Microsoft_VisualStudio_Editors_SettingsDesigner_DesignTimeSettingInstance_ProviderPropertyDescriptorAccessor(_ret_val)
            End If
            Dim ret As Global.SettingsDesignerUnitTests.Microsoft_VisualStudio_Editors_SettingsDesigner_DesignTimeSettingInstance_ProviderPropertyDescriptorAccessor = _ret
            Return ret
        End Get
        Set(ByVal value As Global.SettingsDesignerUnitTests.Microsoft_VisualStudio_Editors_SettingsDesigner_DesignTimeSettingInstance_ProviderPropertyDescriptorAccessor)
            m_privateObject.SetFieldOrProperty("m_providerPropertyDescriptor", value)
        End Set
    End Property

    Friend Property m_roamingPropertyDescriptor() As Global.SettingsDesignerUnitTests.Microsoft_VisualStudio_Editors_SettingsDesigner_DesignTimeSettingInstance_RoamingPropertyDescriptorAccessor
        Get
            Dim _ret_val As Object = m_privateObject.GetFieldOrProperty("m_roamingPropertyDescriptor")
            Dim _ret As Global.SettingsDesignerUnitTests.Microsoft_VisualStudio_Editors_SettingsDesigner_DesignTimeSettingInstance_RoamingPropertyDescriptorAccessor = Nothing
            If (Not (_ret_val) Is Nothing) Then
                _ret = New Global.SettingsDesignerUnitTests.Microsoft_VisualStudio_Editors_SettingsDesigner_DesignTimeSettingInstance_RoamingPropertyDescriptorAccessor(_ret_val)
            End If
            Dim ret As Global.SettingsDesignerUnitTests.Microsoft_VisualStudio_Editors_SettingsDesigner_DesignTimeSettingInstance_RoamingPropertyDescriptorAccessor = _ret
            Return ret
        End Get
        Set(ByVal value As Global.SettingsDesignerUnitTests.Microsoft_VisualStudio_Editors_SettingsDesigner_DesignTimeSettingInstance_RoamingPropertyDescriptorAccessor)
            m_privateObject.SetFieldOrProperty("m_roamingPropertyDescriptor", value)
        End Set
    End Property

    Friend Property m_scopePropertyDescriptor() As Global.SettingsDesignerUnitTests.Microsoft_VisualStudio_Editors_SettingsDesigner_DesignTimeSettingInstance_ScopePropertyDescriptorAccessor
        Get
            Dim _ret_val As Object = m_privateObject.GetFieldOrProperty("m_scopePropertyDescriptor")
            Dim _ret As Global.SettingsDesignerUnitTests.Microsoft_VisualStudio_Editors_SettingsDesigner_DesignTimeSettingInstance_ScopePropertyDescriptorAccessor = Nothing
            If (Not (_ret_val) Is Nothing) Then
                _ret = New Global.SettingsDesignerUnitTests.Microsoft_VisualStudio_Editors_SettingsDesigner_DesignTimeSettingInstance_ScopePropertyDescriptorAccessor(_ret_val)
            End If
            Dim ret As Global.SettingsDesignerUnitTests.Microsoft_VisualStudio_Editors_SettingsDesigner_DesignTimeSettingInstance_ScopePropertyDescriptorAccessor = _ret
            Return ret
        End Get
        Set(ByVal value As Global.SettingsDesignerUnitTests.Microsoft_VisualStudio_Editors_SettingsDesigner_DesignTimeSettingInstance_ScopePropertyDescriptorAccessor)
            m_privateObject.SetFieldOrProperty("m_scopePropertyDescriptor", value)
        End Set
    End Property

    Friend Property m_serializedValuePropertyDescriptor() As Global.SettingsDesignerUnitTests.Microsoft_VisualStudio_Editors_SettingsDesigner_DesignTimeSettingInstance_SerializedValuePropertyDescriptorAccessor
        Get
            Dim _ret_val As Object = m_privateObject.GetFieldOrProperty("m_serializedValuePropertyDescriptor")
            Dim _ret As Global.SettingsDesignerUnitTests.Microsoft_VisualStudio_Editors_SettingsDesigner_DesignTimeSettingInstance_SerializedValuePropertyDescriptorAccessor = Nothing
            If (Not (_ret_val) Is Nothing) Then
                _ret = New Global.SettingsDesignerUnitTests.Microsoft_VisualStudio_Editors_SettingsDesigner_DesignTimeSettingInstance_SerializedValuePropertyDescriptorAccessor(_ret_val)
            End If
            Dim ret As Global.SettingsDesignerUnitTests.Microsoft_VisualStudio_Editors_SettingsDesigner_DesignTimeSettingInstance_SerializedValuePropertyDescriptorAccessor = _ret
            Return ret
        End Get
        Set(ByVal value As Global.SettingsDesignerUnitTests.Microsoft_VisualStudio_Editors_SettingsDesigner_DesignTimeSettingInstance_SerializedValuePropertyDescriptorAccessor)
            m_privateObject.SetFieldOrProperty("m_serializedValuePropertyDescriptor", value)
        End Set
    End Property

    Friend Property m_settingTypeNamePropertyDescriptor() As Global.SettingsDesignerUnitTests.Microsoft_VisualStudio_Editors_SettingsDesigner_DesignTimeSettingInstance_SettingTypeNamePropertyDescriptorAccessor
        Get
            Dim _ret_val As Object = m_privateObject.GetFieldOrProperty("m_settingTypeNamePropertyDescriptor")
            Dim _ret As Global.SettingsDesignerUnitTests.Microsoft_VisualStudio_Editors_SettingsDesigner_DesignTimeSettingInstance_SettingTypeNamePropertyDescriptorAccessor = Nothing
            If (Not (_ret_val) Is Nothing) Then
                _ret = New Global.SettingsDesignerUnitTests.Microsoft_VisualStudio_Editors_SettingsDesigner_DesignTimeSettingInstance_SettingTypeNamePropertyDescriptorAccessor(_ret_val)
            End If
            Dim ret As Global.SettingsDesignerUnitTests.Microsoft_VisualStudio_Editors_SettingsDesigner_DesignTimeSettingInstance_SettingTypeNamePropertyDescriptorAccessor = _ret
            Return ret
        End Get
        Set(ByVal value As Global.SettingsDesignerUnitTests.Microsoft_VisualStudio_Editors_SettingsDesigner_DesignTimeSettingInstance_SettingTypeNamePropertyDescriptorAccessor)
            m_privateObject.SetFieldOrProperty("m_settingTypeNamePropertyDescriptor", value)
        End Set
    End Property

    Friend ReadOnly Property NameProperty() As Global.System.ComponentModel.PropertyDescriptor
        Get
            Dim ret As Global.System.ComponentModel.PropertyDescriptor = CType(m_privateObject.GetProperty("NameProperty"), Global.System.ComponentModel.PropertyDescriptor)
            Return ret
        End Get
    End Property

    Friend ReadOnly Property Name() As String
        Get
            Dim ret As String = CType(m_privateObject.GetProperty("Name"), String)
            Return ret
        End Get
    End Property

    Friend ReadOnly Property ScopeProperty() As Global.System.ComponentModel.PropertyDescriptor
        Get
            Dim ret As Global.System.ComponentModel.PropertyDescriptor = CType(m_privateObject.GetProperty("ScopeProperty"), Global.System.ComponentModel.PropertyDescriptor)
            Return ret
        End Get
    End Property

    Friend ReadOnly Property Scope() As Global.SettingsDesignerUnitTests.Microsoft_VisualStudio_Editors_SettingsDesigner_DesignTimeSettingInstance_SettingScopeAccessor
        Get
            Dim _ret_val As Object = m_privateObject.GetProperty("Scope")
            Dim _ret As Global.SettingsDesignerUnitTests.Microsoft_VisualStudio_Editors_SettingsDesigner_DesignTimeSettingInstance_SettingScopeAccessor = Nothing
            If (Not (_ret_val) Is Nothing) Then
                _ret = New Global.SettingsDesignerUnitTests.Microsoft_VisualStudio_Editors_SettingsDesigner_DesignTimeSettingInstance_SettingScopeAccessor(_ret_val)
            End If
            Dim ret As Global.SettingsDesignerUnitTests.Microsoft_VisualStudio_Editors_SettingsDesigner_DesignTimeSettingInstance_SettingScopeAccessor = _ret
            Return ret
        End Get
    End Property

    Friend ReadOnly Property TypeNameProperty() As Global.System.ComponentModel.PropertyDescriptor
        Get
            Dim ret As Global.System.ComponentModel.PropertyDescriptor = CType(m_privateObject.GetProperty("TypeNameProperty"), Global.System.ComponentModel.PropertyDescriptor)
            Return ret
        End Get
    End Property

    Friend ReadOnly Property SettingTypeName() As String
        Get
            Dim ret As String = CType(m_privateObject.GetProperty("SettingTypeName"), String)
            Return ret
        End Get
    End Property

    Friend ReadOnly Property SerializedValueProperty() As Global.System.ComponentModel.PropertyDescriptor
        Get
            Dim ret As Global.System.ComponentModel.PropertyDescriptor = CType(m_privateObject.GetProperty("SerializedValueProperty"), Global.System.ComponentModel.PropertyDescriptor)
            Return ret
        End Get
    End Property

    Friend ReadOnly Property SerializedValue() As String
        Get
            Dim ret As String = CType(m_privateObject.GetProperty("SerializedValue"), String)
            Return ret
        End Get
    End Property

    Friend ReadOnly Property Roaming() As Boolean
        Get
            Dim ret As Boolean = CType(m_privateObject.GetProperty("Roaming"), Boolean)
            Return ret
        End Get
    End Property

    Friend ReadOnly Property Description() As String
        Get
            Dim ret As String = CType(m_privateObject.GetProperty("Description"), String)
            Return ret
        End Get
    End Property

    Friend ReadOnly Property Provider() As String
        Get
            Dim ret As String = CType(m_privateObject.GetProperty("Provider"), String)
            Return ret
        End Get
    End Property

    Friend ReadOnly Property GenerateDefaultValueInCode() As Boolean
        Get
            Dim ret As Boolean = CType(m_privateObject.GetProperty("GenerateDefaultValueInCode"), Boolean)
            Return ret
        End Get
    End Property

    Friend ReadOnly Property ValueProperty() As Global.System.ComponentModel.PropertyDescriptor
        Get
            Dim ret As Global.System.ComponentModel.PropertyDescriptor = CType(m_privateObject.GetProperty("ValueProperty"), Global.System.ComponentModel.PropertyDescriptor)
            Return ret
        End Get
    End Property

    Friend Property SERIALIZATION_DESCRIPTION() As String
        Get
            Dim ret As String = CType(m_privateObject.GetFieldOrProperty("SERIALIZATION_DESCRIPTION"), String)
            Return ret
        End Get
        Set(ByVal value As String)
            m_privateObject.SetFieldOrProperty("SERIALIZATION_DESCRIPTION", value)
        End Set
    End Property

    Friend Property SERIALIZATION_GENERATE_DEFAULT_VALUE_IN_CODE() As String
        Get
            Dim ret As String = CType(m_privateObject.GetFieldOrProperty("SERIALIZATION_GENERATE_DEFAULT_VALUE_IN_CODE"), String)
            Return ret
        End Get
        Set(ByVal value As String)
            m_privateObject.SetFieldOrProperty("SERIALIZATION_GENERATE_DEFAULT_VALUE_IN_CODE", value)
        End Set
    End Property

    Friend Property SERIALIZATION_IS_ROAMING() As String
        Get
            Dim ret As String = CType(m_privateObject.GetFieldOrProperty("SERIALIZATION_IS_ROAMING"), String)
            Return ret
        End Get
        Set(ByVal value As String)
            m_privateObject.SetFieldOrProperty("SERIALIZATION_IS_ROAMING", value)
        End Set
    End Property

    Friend Property SERIALIZATION_NAME() As String
        Get
            Dim ret As String = CType(m_privateObject.GetFieldOrProperty("SERIALIZATION_NAME"), String)
            Return ret
        End Get
        Set(ByVal value As String)
            m_privateObject.SetFieldOrProperty("SERIALIZATION_NAME", value)
        End Set
    End Property

    Friend Property SERIALIZATION_PROVIDER() As String
        Get
            Dim ret As String = CType(m_privateObject.GetFieldOrProperty("SERIALIZATION_PROVIDER"), String)
            Return ret
        End Get
        Set(ByVal value As String)
            m_privateObject.SetFieldOrProperty("SERIALIZATION_PROVIDER", value)
        End Set
    End Property

    Friend Property SERIALIZATION_TYPE() As String
        Get
            Dim ret As String = CType(m_privateObject.GetFieldOrProperty("SERIALIZATION_TYPE"), String)
            Return ret
        End Get
        Set(ByVal value As String)
            m_privateObject.SetFieldOrProperty("SERIALIZATION_TYPE", value)
        End Set
    End Property

    Friend Property SERIALIZATION_VALUE() As String
        Get
            Dim ret As String = CType(m_privateObject.GetFieldOrProperty("SERIALIZATION_VALUE"), String)
            Return ret
        End Get
        Set(ByVal value As String)
            m_privateObject.SetFieldOrProperty("SERIALIZATION_VALUE", value)
        End Set
    End Property

    Friend Property SERIALIZATION_SCOPE() As String
        Get
            Dim ret As String = CType(m_privateObject.GetFieldOrProperty("SERIALIZATION_SCOPE"), String)
            Return ret
        End Get
        Set(ByVal value As String)
            m_privateObject.SetFieldOrProperty("SERIALIZATION_SCOPE", value)
        End Set
    End Property

    Friend Overloads Shared Function CreatePrivate() As Global.System.ComponentModel.Component
        Dim args(-1) As Object
        Dim priv_obj As Microsoft.VisualStudio.TestTools.UnitTesting.PrivateObject = New Microsoft.VisualStudio.TestTools.UnitTesting.PrivateObject("Microsoft.VisualStudio.Editors", "Microsoft.VisualStudio.Editors.SettingsDesigner.DesignTimeSettingInstance", New System.Type(-1) {}, args)
        Return CType(priv_obj.Target, Global.System.ComponentModel.Component)
    End Function

    Friend Function GetAttributes() As Global.System.ComponentModel.AttributeCollection
        Dim args(-1) As Object
        Dim ret As Global.System.ComponentModel.AttributeCollection = CType(m_privateObject.Invoke("GetAttributes", New System.Type(-1) {}, args), Global.System.ComponentModel.AttributeCollection)
        Return ret
    End Function

    Friend Function GetClassName() As String
        Dim args(-1) As Object
        Dim ret As String = CType(m_privateObject.Invoke("GetClassName", New System.Type(-1) {}, args), String)
        Return ret
    End Function

    Friend Function GetComponentName() As String
        Dim args(-1) As Object
        Dim ret As String = CType(m_privateObject.Invoke("GetComponentName", New System.Type(-1) {}, args), String)
        Return ret
    End Function

    Friend Function GetConverter() As Global.System.ComponentModel.TypeConverter
        Dim args(-1) As Object
        Dim ret As Global.System.ComponentModel.TypeConverter = CType(m_privateObject.Invoke("GetConverter", New System.Type(-1) {}, args), Global.System.ComponentModel.TypeConverter)
        Return ret
    End Function

    Friend Function GetDefaultEvent() As Global.System.ComponentModel.EventDescriptor
        Dim args(-1) As Object
        Dim ret As Global.System.ComponentModel.EventDescriptor = CType(m_privateObject.Invoke("GetDefaultEvent", New System.Type(-1) {}, args), Global.System.ComponentModel.EventDescriptor)
        Return ret
    End Function

    Friend Function GetDefaultProperty() As Global.System.ComponentModel.PropertyDescriptor
        Dim args(-1) As Object
        Dim ret As Global.System.ComponentModel.PropertyDescriptor = CType(m_privateObject.Invoke("GetDefaultProperty", New System.Type(-1) {}, args), Global.System.ComponentModel.PropertyDescriptor)
        Return ret
    End Function

    Friend Function GetEditor(ByVal editorBaseType As Global.System.Type) As Object
        Dim args() As Object = New Object() {editorBaseType}
        Dim ret As Object = CType(m_privateObject.Invoke("GetEditor", New System.Type() {GetType(Global.System.Type)}, args), Object)
        Return ret
    End Function

    Friend Overloads Function GetEvents() As Global.System.ComponentModel.EventDescriptorCollection
        Dim args(-1) As Object
        Dim ret As Global.System.ComponentModel.EventDescriptorCollection = CType(m_privateObject.Invoke("GetEvents", New System.Type(-1) {}, args), Global.System.ComponentModel.EventDescriptorCollection)
        Return ret
    End Function

    Friend Overloads Function GetEvents(ByVal attributes() As Global.System.Attribute) As Global.System.ComponentModel.EventDescriptorCollection
        Dim args() As Object = New Object() {attributes}
        Dim ret As Global.System.ComponentModel.EventDescriptorCollection = CType(m_privateObject.Invoke("GetEvents", New System.Type() {GetType(Global.System.Attribute).MakeArrayType}, args), Global.System.ComponentModel.EventDescriptorCollection)
        Return ret
    End Function

    Friend Overloads Function GetProperties() As Global.System.ComponentModel.PropertyDescriptorCollection
        Dim args(-1) As Object
        Dim ret As Global.System.ComponentModel.PropertyDescriptorCollection = CType(m_privateObject.Invoke("GetProperties", New System.Type(-1) {}, args), Global.System.ComponentModel.PropertyDescriptorCollection)
        Return ret
    End Function

    Friend Overloads Function GetProperties(ByVal attributes() As Global.System.Attribute) As Global.System.ComponentModel.PropertyDescriptorCollection
        Dim args() As Object = New Object() {attributes}
        Dim ret As Global.System.ComponentModel.PropertyDescriptorCollection = CType(m_privateObject.Invoke("GetProperties", New System.Type() {GetType(Global.System.Attribute).MakeArrayType}, args), Global.System.ComponentModel.PropertyDescriptorCollection)
        Return ret
    End Function

    Friend Function GetPropertyOwner(ByVal pd As Global.System.ComponentModel.PropertyDescriptor) As Object
        Dim args() As Object = New Object() {pd}
        Dim ret As Object = CType(m_privateObject.Invoke("GetPropertyOwner", New System.Type() {GetType(Global.System.ComponentModel.PropertyDescriptor)}, args), Object)
        Return ret
    End Function

    Friend Sub SetName(ByVal value As String)
        Dim args() As Object = New Object() {value}
        m_privateObject.Invoke("SetName", New System.Type() {GetType(String)}, args)
    End Sub

    Friend Sub SetScope(ByVal value As Global.SettingsDesignerUnitTests.Microsoft_VisualStudio_Editors_SettingsDesigner_DesignTimeSettingInstance_SettingScopeAccessor)
        Dim value_val_target As Object = Nothing
        If (Not (value) Is Nothing) Then
            value_val_target = value.Target
        End If
        Dim args() As Object = New Object() {value_val_target}
        Dim target As Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType = New Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType("Microsoft.VisualStudio.Editors", "Microsoft.VisualStudio.Editors.SettingsDesigner.DesignTimeSettingInstance+Setting" & _
                "Scope")
        m_privateObject.Invoke("SetScope", New System.Type() {target.ReferencedType}, args)
    End Sub

    Friend Sub SetSettingTypeName(ByVal value As String)
        Dim args() As Object = New Object() {value}
        m_privateObject.Invoke("SetSettingTypeName", New System.Type() {GetType(String)}, args)
    End Sub

    Friend Sub SetSerializedValue(ByVal value As String)
        Dim args() As Object = New Object() {value}
        m_privateObject.Invoke("SetSerializedValue", New System.Type() {GetType(String)}, args)
    End Sub

    Friend Sub SetRoaming(ByVal value As Boolean)
        Dim args() As Object = New Object() {value}
        m_privateObject.Invoke("SetRoaming", New System.Type() {GetType(Boolean)}, args)
    End Sub

    Friend Sub SetDescription(ByVal value As String)
        Dim args() As Object = New Object() {value}
        m_privateObject.Invoke("SetDescription", New System.Type() {GetType(String)}, args)
    End Sub

    Friend Sub SetProvider(ByVal value As String)
        Dim args() As Object = New Object() {value}
        m_privateObject.Invoke("SetProvider", New System.Type() {GetType(String)}, args)
    End Sub

    Friend Sub SetGenerateDefaultValueInCode(ByVal value As Boolean)
        Dim args() As Object = New Object() {value}
        m_privateObject.Invoke("SetGenerateDefaultValueInCode", New System.Type() {GetType(Boolean)}, args)
    End Sub

    Friend Overloads Shared Function CreatePrivate(ByVal Info As Global.System.Runtime.Serialization.SerializationInfo, ByVal Context As Global.System.Runtime.Serialization.StreamingContext) As Global.System.ComponentModel.Component
        Dim args() As Object = New Object() {Info, Context}
        Dim priv_obj As Microsoft.VisualStudio.TestTools.UnitTesting.PrivateObject = New Microsoft.VisualStudio.TestTools.UnitTesting.PrivateObject("Microsoft.VisualStudio.Editors", "Microsoft.VisualStudio.Editors.SettingsDesigner.DesignTimeSettingInstance", New System.Type() {GetType(Global.System.Runtime.Serialization.SerializationInfo), GetType(Global.System.Runtime.Serialization.StreamingContext)}, args)
        Return CType(priv_obj.Target, Global.System.ComponentModel.Component)
    End Function

    Friend Sub GetObjectData(ByVal Info As Global.System.Runtime.Serialization.SerializationInfo, ByVal Context As Global.System.Runtime.Serialization.StreamingContext)
        Dim args() As Object = New Object() {Info, Context}
        m_privateObject.Invoke("GetObjectData", New System.Type() {GetType(Global.System.Runtime.Serialization.SerializationInfo), GetType(Global.System.Runtime.Serialization.StreamingContext)}, args)
    End Sub
End Class
<System.Diagnostics.DebuggerStepThrough(), _
 System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TestTools.UnitTestGeneration", "1.0.0.0")> _
Friend Class Microsoft_VisualStudio_Editors_SettingsDesigner_DesignTimeSettingInstance_SettingScopeAccessor
    Inherits BaseAccessor

    Protected Shared m_privateType As Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType = New Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType("Microsoft.VisualStudio.Editors", "Microsoft.VisualStudio.Editors.SettingsDesigner.DesignTimeSettingInstance+Setting" & _
            "Scope")

    Friend Sub New(ByVal target As Object)
        MyBase.New(target, m_privateType)
    End Sub

    Friend Shared ReadOnly Property User() As Global.SettingsDesignerUnitTests.Microsoft_VisualStudio_Editors_SettingsDesigner_DesignTimeSettingInstance_SettingScopeAccessor
        Get
            Dim _ret_val As Object = m_privateType.GetStaticFieldOrProperty("User")
            Dim _ret As Global.SettingsDesignerUnitTests.Microsoft_VisualStudio_Editors_SettingsDesigner_DesignTimeSettingInstance_SettingScopeAccessor = Nothing
            If (Not (_ret_val) Is Nothing) Then
                _ret = New Global.SettingsDesignerUnitTests.Microsoft_VisualStudio_Editors_SettingsDesigner_DesignTimeSettingInstance_SettingScopeAccessor(_ret_val)
            End If
            Dim ret As Global.SettingsDesignerUnitTests.Microsoft_VisualStudio_Editors_SettingsDesigner_DesignTimeSettingInstance_SettingScopeAccessor = _ret
            Return ret
        End Get
    End Property

    Friend Shared ReadOnly Property Application() As Global.SettingsDesignerUnitTests.Microsoft_VisualStudio_Editors_SettingsDesigner_DesignTimeSettingInstance_SettingScopeAccessor
        Get
            Dim _ret_val As Object = m_privateType.GetStaticFieldOrProperty("Application")
            Dim _ret As Global.SettingsDesignerUnitTests.Microsoft_VisualStudio_Editors_SettingsDesigner_DesignTimeSettingInstance_SettingScopeAccessor = Nothing
            If (Not (_ret_val) Is Nothing) Then
                _ret = New Global.SettingsDesignerUnitTests.Microsoft_VisualStudio_Editors_SettingsDesigner_DesignTimeSettingInstance_SettingScopeAccessor(_ret_val)
            End If
            Dim ret As Global.SettingsDesignerUnitTests.Microsoft_VisualStudio_Editors_SettingsDesigner_DesignTimeSettingInstance_SettingScopeAccessor = _ret
            Return ret
        End Get
    End Property
End Class
<System.Diagnostics.DebuggerStepThrough(), _
 System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TestTools.UnitTestGeneration", "1.0.0.0")> _
Friend Class Microsoft_VisualStudio_Editors_SettingsDesigner_DesignTimeSettingInstance_GenerateDefaultValueInCodePropertyDescriptorAccessor
    Inherits BaseAccessor

    Protected Shared m_privateType As Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType = New Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType("Microsoft.VisualStudio.Editors", "Microsoft.VisualStudio.Editors.SettingsDesigner.DesignTimeSettingInstance+Generat" & _
            "eDefaultValueInCodePropertyDescriptor")

    Friend Sub New(ByVal target As Object)
        MyBase.New(target, m_privateType)
    End Sub

    Friend ReadOnly Property IsReadOnly() As Boolean
        Get
            Dim ret As Boolean = CType(m_privateObject.GetProperty("IsReadOnly"), Boolean)
            Return ret
        End Get
    End Property

    Friend ReadOnly Property PropertyType() As Global.System.Type
        Get
            Dim ret As Global.System.Type = CType(m_privateObject.GetProperty("PropertyType"), Global.System.Type)
            Return ret
        End Get
    End Property

    Friend ReadOnly Property UndoDescription() As String
        Get
            Dim ret As String = CType(m_privateObject.GetProperty("UndoDescription"), String)
            Return ret
        End Get
    End Property

    Friend ReadOnly Property DescriptionAttributeText() As String
        Get
            Dim ret As String = CType(m_privateObject.GetProperty("DescriptionAttributeText"), String)
            Return ret
        End Get
    End Property

    Friend Shared Function CreatePrivate(ByVal owner As Global.SettingsDesignerUnitTests.Microsoft_VisualStudio_Editors_SettingsDesigner_DesignTimeSettingInstanceAccessor) As Global.System.ComponentModel.PropertyDescriptor
        Dim owner_val_target As Object = Nothing
        If (Not (owner) Is Nothing) Then
            owner_val_target = owner.Target
        End If
        Dim args() As Object = New Object() {owner_val_target}
        Dim target As Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType = New Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType("Microsoft.VisualStudio.Editors", "Microsoft.VisualStudio.Editors.SettingsDesigner.DesignTimeSettingInstance")
        Dim priv_obj As Microsoft.VisualStudio.TestTools.UnitTesting.PrivateObject = New Microsoft.VisualStudio.TestTools.UnitTesting.PrivateObject("Microsoft.VisualStudio.Editors", "Microsoft.VisualStudio.Editors.SettingsDesigner.DesignTimeSettingInstance+Generat" & _
                "eDefaultValueInCodePropertyDescriptor", New System.Type() {target.ReferencedType}, args)
        Return CType(priv_obj.Target, Global.System.ComponentModel.PropertyDescriptor)
    End Function

    Friend Function GetValue(ByVal component As Global.SettingsDesignerUnitTests.Microsoft_VisualStudio_Editors_SettingsDesigner_DesignTimeSettingInstanceAccessor) As Object
        Dim component_val_target As Object = Nothing
        If (Not (component) Is Nothing) Then
            component_val_target = component.Target
        End If
        Dim args() As Object = New Object() {component_val_target}
        Dim target As Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType = New Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType("Microsoft.VisualStudio.Editors", "Microsoft.VisualStudio.Editors.SettingsDesigner.DesignTimeSettingInstance")
        Dim ret As Object = CType(m_privateObject.Invoke("GetValue", New System.Type() {target.ReferencedType}, args), Object)
        Return ret
    End Function

    Friend Sub SetValue(ByVal component As Global.SettingsDesignerUnitTests.Microsoft_VisualStudio_Editors_SettingsDesigner_DesignTimeSettingInstanceAccessor, ByVal value As Object)
        Dim component_val_target As Object = Nothing
        If (Not (component) Is Nothing) Then
            component_val_target = component.Target
        End If
        Dim args() As Object = New Object() {component_val_target, value}
        Dim target As Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType = New Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType("Microsoft.VisualStudio.Editors", "Microsoft.VisualStudio.Editors.SettingsDesigner.DesignTimeSettingInstance")
        m_privateObject.Invoke("SetValue", New System.Type() {target.ReferencedType, GetType(Object)}, args)
    End Sub
End Class
<System.Diagnostics.DebuggerStepThrough(), _
 System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TestTools.UnitTestGeneration", "1.0.0.0")> _
Friend Class Microsoft_VisualStudio_Editors_SettingsDesigner_DesignTimeSettingInstance_NamePropertyDescriptorAccessor
    Inherits BaseAccessor

    Protected Shared m_privateType As Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType = New Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType("Microsoft.VisualStudio.Editors", "Microsoft.VisualStudio.Editors.SettingsDesigner.DesignTimeSettingInstance+NamePro" & _
            "pertyDescriptor")

    Friend Sub New(ByVal target As Object)
        MyBase.New(target, m_privateType)
    End Sub

    Friend ReadOnly Property IsReadOnly() As Boolean
        Get
            Dim ret As Boolean = CType(m_privateObject.GetProperty("IsReadOnly"), Boolean)
            Return ret
        End Get
    End Property

    Friend ReadOnly Property PropertyType() As Global.System.Type
        Get
            Dim ret As Global.System.Type = CType(m_privateObject.GetProperty("PropertyType"), Global.System.Type)
            Return ret
        End Get
    End Property

    Friend ReadOnly Property UndoDescription() As String
        Get
            Dim ret As String = CType(m_privateObject.GetProperty("UndoDescription"), String)
            Return ret
        End Get
    End Property

    Friend ReadOnly Property DescriptionAttributeText() As String
        Get
            Dim ret As String = CType(m_privateObject.GetProperty("DescriptionAttributeText"), String)
            Return ret
        End Get
    End Property

    Friend Shared Function CreatePrivate(ByVal owner As Global.SettingsDesignerUnitTests.Microsoft_VisualStudio_Editors_SettingsDesigner_DesignTimeSettingInstanceAccessor) As Global.System.ComponentModel.PropertyDescriptor
        Dim owner_val_target As Object = Nothing
        If (Not (owner) Is Nothing) Then
            owner_val_target = owner.Target
        End If
        Dim args() As Object = New Object() {owner_val_target}
        Dim target As Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType = New Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType("Microsoft.VisualStudio.Editors", "Microsoft.VisualStudio.Editors.SettingsDesigner.DesignTimeSettingInstance")
        Dim priv_obj As Microsoft.VisualStudio.TestTools.UnitTesting.PrivateObject = New Microsoft.VisualStudio.TestTools.UnitTesting.PrivateObject("Microsoft.VisualStudio.Editors", "Microsoft.VisualStudio.Editors.SettingsDesigner.DesignTimeSettingInstance+NamePro" & _
                "pertyDescriptor", New System.Type() {target.ReferencedType}, args)
        Return CType(priv_obj.Target, Global.System.ComponentModel.PropertyDescriptor)
    End Function

    Friend Function CanResetValue(ByVal component As Object) As Boolean
        Dim args() As Object = New Object() {component}
        Dim ret As Boolean = CType(m_privateObject.Invoke("CanResetValue", New System.Type() {GetType(Object)}, args), Boolean)
        Return ret
    End Function

    Friend Function GetValue(ByVal component As Global.SettingsDesignerUnitTests.Microsoft_VisualStudio_Editors_SettingsDesigner_DesignTimeSettingInstanceAccessor) As Object
        Dim component_val_target As Object = Nothing
        If (Not (component) Is Nothing) Then
            component_val_target = component.Target
        End If
        Dim args() As Object = New Object() {component_val_target}
        Dim target As Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType = New Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType("Microsoft.VisualStudio.Editors", "Microsoft.VisualStudio.Editors.SettingsDesigner.DesignTimeSettingInstance")
        Dim ret As Object = CType(m_privateObject.Invoke("GetValue", New System.Type() {target.ReferencedType}, args), Object)
        Return ret
    End Function

    Friend Sub SetValue(ByVal component As Global.SettingsDesignerUnitTests.Microsoft_VisualStudio_Editors_SettingsDesigner_DesignTimeSettingInstanceAccessor, ByVal value As Object)
        Dim component_val_target As Object = Nothing
        If (Not (component) Is Nothing) Then
            component_val_target = component.Target
        End If
        Dim args() As Object = New Object() {component_val_target, value}
        Dim target As Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType = New Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType("Microsoft.VisualStudio.Editors", "Microsoft.VisualStudio.Editors.SettingsDesigner.DesignTimeSettingInstance")
        m_privateObject.Invoke("SetValue", New System.Type() {target.ReferencedType, GetType(Object)}, args)
    End Sub
End Class
<System.Diagnostics.DebuggerStepThrough(), _
 System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TestTools.UnitTestGeneration", "1.0.0.0")> _
Friend Class Microsoft_VisualStudio_Editors_SettingsDesigner_DesignTimeSettingInstance_DescriptionPropertyDescriptorAccessor
    Inherits BaseAccessor

    Protected Shared m_privateType As Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType = New Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType("Microsoft.VisualStudio.Editors", "Microsoft.VisualStudio.Editors.SettingsDesigner.DesignTimeSettingInstance+Descrip" & _
            "tionPropertyDescriptor")

    Friend Sub New(ByVal target As Object)
        MyBase.New(target, m_privateType)
    End Sub

    Friend ReadOnly Property IsReadOnly() As Boolean
        Get
            Dim ret As Boolean = CType(m_privateObject.GetProperty("IsReadOnly"), Boolean)
            Return ret
        End Get
    End Property

    Friend ReadOnly Property PropertyType() As Global.System.Type
        Get
            Dim ret As Global.System.Type = CType(m_privateObject.GetProperty("PropertyType"), Global.System.Type)
            Return ret
        End Get
    End Property

    Friend ReadOnly Property UndoDescription() As String
        Get
            Dim ret As String = CType(m_privateObject.GetProperty("UndoDescription"), String)
            Return ret
        End Get
    End Property

    Friend ReadOnly Property DescriptionAttributeText() As String
        Get
            Dim ret As String = CType(m_privateObject.GetProperty("DescriptionAttributeText"), String)
            Return ret
        End Get
    End Property

    Friend Shared Function CreatePrivate(ByVal owner As Global.SettingsDesignerUnitTests.Microsoft_VisualStudio_Editors_SettingsDesigner_DesignTimeSettingInstanceAccessor) As Global.System.ComponentModel.PropertyDescriptor
        Dim owner_val_target As Object = Nothing
        If (Not (owner) Is Nothing) Then
            owner_val_target = owner.Target
        End If
        Dim args() As Object = New Object() {owner_val_target}
        Dim target As Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType = New Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType("Microsoft.VisualStudio.Editors", "Microsoft.VisualStudio.Editors.SettingsDesigner.DesignTimeSettingInstance")
        Dim priv_obj As Microsoft.VisualStudio.TestTools.UnitTesting.PrivateObject = New Microsoft.VisualStudio.TestTools.UnitTesting.PrivateObject("Microsoft.VisualStudio.Editors", "Microsoft.VisualStudio.Editors.SettingsDesigner.DesignTimeSettingInstance+Descrip" & _
                "tionPropertyDescriptor", New System.Type() {target.ReferencedType}, args)
        Return CType(priv_obj.Target, Global.System.ComponentModel.PropertyDescriptor)
    End Function

    Friend Function GetValue(ByVal component As Global.SettingsDesignerUnitTests.Microsoft_VisualStudio_Editors_SettingsDesigner_DesignTimeSettingInstanceAccessor) As Object
        Dim component_val_target As Object = Nothing
        If (Not (component) Is Nothing) Then
            component_val_target = component.Target
        End If
        Dim args() As Object = New Object() {component_val_target}
        Dim target As Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType = New Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType("Microsoft.VisualStudio.Editors", "Microsoft.VisualStudio.Editors.SettingsDesigner.DesignTimeSettingInstance")
        Dim ret As Object = CType(m_privateObject.Invoke("GetValue", New System.Type() {target.ReferencedType}, args), Object)
        Return ret
    End Function

    Friend Sub SetValue(ByVal component As Global.SettingsDesignerUnitTests.Microsoft_VisualStudio_Editors_SettingsDesigner_DesignTimeSettingInstanceAccessor, ByVal value As Object)
        Dim component_val_target As Object = Nothing
        If (Not (component) Is Nothing) Then
            component_val_target = component.Target
        End If
        Dim args() As Object = New Object() {component_val_target, value}
        Dim target As Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType = New Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType("Microsoft.VisualStudio.Editors", "Microsoft.VisualStudio.Editors.SettingsDesigner.DesignTimeSettingInstance")
        m_privateObject.Invoke("SetValue", New System.Type() {target.ReferencedType, GetType(Object)}, args)
    End Sub
End Class
<System.Diagnostics.DebuggerStepThrough(), _
 System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TestTools.UnitTestGeneration", "1.0.0.0")> _
Friend Class Microsoft_VisualStudio_Editors_SettingsDesigner_DesignTimeSettingInstance_ProviderPropertyDescriptorAccessor
    Inherits BaseAccessor

    Protected Shared m_privateType As Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType = New Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType("Microsoft.VisualStudio.Editors", "Microsoft.VisualStudio.Editors.SettingsDesigner.DesignTimeSettingInstance+Provide" & _
            "rPropertyDescriptor")

    Friend Sub New(ByVal target As Object)
        MyBase.New(target, m_privateType)
    End Sub

    Friend ReadOnly Property IsReadOnly() As Boolean
        Get
            Dim ret As Boolean = CType(m_privateObject.GetProperty("IsReadOnly"), Boolean)
            Return ret
        End Get
    End Property

    Friend ReadOnly Property PropertyType() As Global.System.Type
        Get
            Dim ret As Global.System.Type = CType(m_privateObject.GetProperty("PropertyType"), Global.System.Type)
            Return ret
        End Get
    End Property

    Friend ReadOnly Property UndoDescription() As String
        Get
            Dim ret As String = CType(m_privateObject.GetProperty("UndoDescription"), String)
            Return ret
        End Get
    End Property

    Friend ReadOnly Property DescriptionAttributeText() As String
        Get
            Dim ret As String = CType(m_privateObject.GetProperty("DescriptionAttributeText"), String)
            Return ret
        End Get
    End Property

    Friend Shared Function CreatePrivate(ByVal owner As Global.SettingsDesignerUnitTests.Microsoft_VisualStudio_Editors_SettingsDesigner_DesignTimeSettingInstanceAccessor) As Global.System.ComponentModel.PropertyDescriptor
        Dim owner_val_target As Object = Nothing
        If (Not (owner) Is Nothing) Then
            owner_val_target = owner.Target
        End If
        Dim args() As Object = New Object() {owner_val_target}
        Dim target As Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType = New Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType("Microsoft.VisualStudio.Editors", "Microsoft.VisualStudio.Editors.SettingsDesigner.DesignTimeSettingInstance")
        Dim priv_obj As Microsoft.VisualStudio.TestTools.UnitTesting.PrivateObject = New Microsoft.VisualStudio.TestTools.UnitTesting.PrivateObject("Microsoft.VisualStudio.Editors", "Microsoft.VisualStudio.Editors.SettingsDesigner.DesignTimeSettingInstance+Provide" & _
                "rPropertyDescriptor", New System.Type() {target.ReferencedType}, args)
        Return CType(priv_obj.Target, Global.System.ComponentModel.PropertyDescriptor)
    End Function

    Friend Function GetValue(ByVal component As Global.SettingsDesignerUnitTests.Microsoft_VisualStudio_Editors_SettingsDesigner_DesignTimeSettingInstanceAccessor) As Object
        Dim component_val_target As Object = Nothing
        If (Not (component) Is Nothing) Then
            component_val_target = component.Target
        End If
        Dim args() As Object = New Object() {component_val_target}
        Dim target As Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType = New Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType("Microsoft.VisualStudio.Editors", "Microsoft.VisualStudio.Editors.SettingsDesigner.DesignTimeSettingInstance")
        Dim ret As Object = CType(m_privateObject.Invoke("GetValue", New System.Type() {target.ReferencedType}, args), Object)
        Return ret
    End Function

    Friend Sub SetValue(ByVal component As Global.SettingsDesignerUnitTests.Microsoft_VisualStudio_Editors_SettingsDesigner_DesignTimeSettingInstanceAccessor, ByVal value As Object)
        Dim component_val_target As Object = Nothing
        If (Not (component) Is Nothing) Then
            component_val_target = component.Target
        End If
        Dim args() As Object = New Object() {component_val_target, value}
        Dim target As Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType = New Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType("Microsoft.VisualStudio.Editors", "Microsoft.VisualStudio.Editors.SettingsDesigner.DesignTimeSettingInstance")
        m_privateObject.Invoke("SetValue", New System.Type() {target.ReferencedType, GetType(Object)}, args)
    End Sub
End Class
<System.Diagnostics.DebuggerStepThrough(), _
 System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TestTools.UnitTestGeneration", "1.0.0.0")> _
Friend Class Microsoft_VisualStudio_Editors_SettingsDesigner_DesignTimeSettingInstance_RoamingPropertyDescriptorAccessor
    Inherits BaseAccessor

    Protected Shared m_privateType As Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType = New Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType("Microsoft.VisualStudio.Editors", "Microsoft.VisualStudio.Editors.SettingsDesigner.DesignTimeSettingInstance+Roaming" & _
            "PropertyDescriptor")

    Friend Sub New(ByVal target As Object)
        MyBase.New(target, m_privateType)
    End Sub

    Friend ReadOnly Property IsReadOnly() As Boolean
        Get
            Dim ret As Boolean = CType(m_privateObject.GetProperty("IsReadOnly"), Boolean)
            Return ret
        End Get
    End Property

    Friend ReadOnly Property PropertyType() As Global.System.Type
        Get
            Dim ret As Global.System.Type = CType(m_privateObject.GetProperty("PropertyType"), Global.System.Type)
            Return ret
        End Get
    End Property

    Friend ReadOnly Property UndoDescription() As String
        Get
            Dim ret As String = CType(m_privateObject.GetProperty("UndoDescription"), String)
            Return ret
        End Get
    End Property

    Friend ReadOnly Property DescriptionAttributeText() As String
        Get
            Dim ret As String = CType(m_privateObject.GetProperty("DescriptionAttributeText"), String)
            Return ret
        End Get
    End Property

    Friend Shared Function CreatePrivate(ByVal owner As Global.SettingsDesignerUnitTests.Microsoft_VisualStudio_Editors_SettingsDesigner_DesignTimeSettingInstanceAccessor) As Global.System.ComponentModel.PropertyDescriptor
        Dim owner_val_target As Object = Nothing
        If (Not (owner) Is Nothing) Then
            owner_val_target = owner.Target
        End If
        Dim args() As Object = New Object() {owner_val_target}
        Dim target As Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType = New Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType("Microsoft.VisualStudio.Editors", "Microsoft.VisualStudio.Editors.SettingsDesigner.DesignTimeSettingInstance")
        Dim priv_obj As Microsoft.VisualStudio.TestTools.UnitTesting.PrivateObject = New Microsoft.VisualStudio.TestTools.UnitTesting.PrivateObject("Microsoft.VisualStudio.Editors", "Microsoft.VisualStudio.Editors.SettingsDesigner.DesignTimeSettingInstance+Roaming" & _
                "PropertyDescriptor", New System.Type() {target.ReferencedType}, args)
        Return CType(priv_obj.Target, Global.System.ComponentModel.PropertyDescriptor)
    End Function

    Friend Function GetValue(ByVal component As Global.SettingsDesignerUnitTests.Microsoft_VisualStudio_Editors_SettingsDesigner_DesignTimeSettingInstanceAccessor) As Object
        Dim component_val_target As Object = Nothing
        If (Not (component) Is Nothing) Then
            component_val_target = component.Target
        End If
        Dim args() As Object = New Object() {component_val_target}
        Dim target As Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType = New Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType("Microsoft.VisualStudio.Editors", "Microsoft.VisualStudio.Editors.SettingsDesigner.DesignTimeSettingInstance")
        Dim ret As Object = CType(m_privateObject.Invoke("GetValue", New System.Type() {target.ReferencedType}, args), Object)
        Return ret
    End Function

    Friend Sub SetValue(ByVal component As Global.SettingsDesignerUnitTests.Microsoft_VisualStudio_Editors_SettingsDesigner_DesignTimeSettingInstanceAccessor, ByVal value As Object)
        Dim component_val_target As Object = Nothing
        If (Not (component) Is Nothing) Then
            component_val_target = component.Target
        End If
        Dim args() As Object = New Object() {component_val_target, value}
        Dim target As Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType = New Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType("Microsoft.VisualStudio.Editors", "Microsoft.VisualStudio.Editors.SettingsDesigner.DesignTimeSettingInstance")
        m_privateObject.Invoke("SetValue", New System.Type() {target.ReferencedType, GetType(Object)}, args)
    End Sub
End Class
<System.Diagnostics.DebuggerStepThrough(), _
 System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TestTools.UnitTestGeneration", "1.0.0.0")> _
Friend Class Microsoft_VisualStudio_Editors_SettingsDesigner_DesignTimeSettingInstance_ScopePropertyDescriptorAccessor
    Inherits BaseAccessor

    Protected Shared m_privateType As Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType = New Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType("Microsoft.VisualStudio.Editors", "Microsoft.VisualStudio.Editors.SettingsDesigner.DesignTimeSettingInstance+ScopePr" & _
            "opertyDescriptor")

    Friend Sub New(ByVal target As Object)
        MyBase.New(target, m_privateType)
    End Sub

    Friend ReadOnly Property IsReadOnly() As Boolean
        Get
            Dim ret As Boolean = CType(m_privateObject.GetProperty("IsReadOnly"), Boolean)
            Return ret
        End Get
    End Property

    Friend ReadOnly Property PropertyType() As Global.System.Type
        Get
            Dim ret As Global.System.Type = CType(m_privateObject.GetProperty("PropertyType"), Global.System.Type)
            Return ret
        End Get
    End Property

    Friend ReadOnly Property UndoDescription() As String
        Get
            Dim ret As String = CType(m_privateObject.GetProperty("UndoDescription"), String)
            Return ret
        End Get
    End Property

    Friend ReadOnly Property DescriptionAttributeText() As String
        Get
            Dim ret As String = CType(m_privateObject.GetProperty("DescriptionAttributeText"), String)
            Return ret
        End Get
    End Property

    Friend Shared Function CreatePrivate(ByVal owner As Global.SettingsDesignerUnitTests.Microsoft_VisualStudio_Editors_SettingsDesigner_DesignTimeSettingInstanceAccessor) As Global.System.ComponentModel.PropertyDescriptor
        Dim owner_val_target As Object = Nothing
        If (Not (owner) Is Nothing) Then
            owner_val_target = owner.Target
        End If
        Dim args() As Object = New Object() {owner_val_target}
        Dim target As Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType = New Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType("Microsoft.VisualStudio.Editors", "Microsoft.VisualStudio.Editors.SettingsDesigner.DesignTimeSettingInstance")
        Dim priv_obj As Microsoft.VisualStudio.TestTools.UnitTesting.PrivateObject = New Microsoft.VisualStudio.TestTools.UnitTesting.PrivateObject("Microsoft.VisualStudio.Editors", "Microsoft.VisualStudio.Editors.SettingsDesigner.DesignTimeSettingInstance+ScopePr" & _
                "opertyDescriptor", New System.Type() {target.ReferencedType}, args)
        Return CType(priv_obj.Target, Global.System.ComponentModel.PropertyDescriptor)
    End Function

    Friend Function GetValue(ByVal component As Global.SettingsDesignerUnitTests.Microsoft_VisualStudio_Editors_SettingsDesigner_DesignTimeSettingInstanceAccessor) As Object
        Dim component_val_target As Object = Nothing
        If (Not (component) Is Nothing) Then
            component_val_target = component.Target
        End If
        Dim args() As Object = New Object() {component_val_target}
        Dim target As Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType = New Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType("Microsoft.VisualStudio.Editors", "Microsoft.VisualStudio.Editors.SettingsDesigner.DesignTimeSettingInstance")
        Dim ret As Object = CType(m_privateObject.Invoke("GetValue", New System.Type() {target.ReferencedType}, args), Object)
        Return ret
    End Function

    Friend Sub SetValue(ByVal component As Global.SettingsDesignerUnitTests.Microsoft_VisualStudio_Editors_SettingsDesigner_DesignTimeSettingInstanceAccessor, ByVal value As Object)
        Dim component_val_target As Object = Nothing
        If (Not (component) Is Nothing) Then
            component_val_target = component.Target
        End If
        Dim args() As Object = New Object() {component_val_target, value}
        Dim target As Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType = New Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType("Microsoft.VisualStudio.Editors", "Microsoft.VisualStudio.Editors.SettingsDesigner.DesignTimeSettingInstance")
        m_privateObject.Invoke("SetValue", New System.Type() {target.ReferencedType, GetType(Object)}, args)
    End Sub
End Class
<System.Diagnostics.DebuggerStepThrough(), _
 System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TestTools.UnitTestGeneration", "1.0.0.0")> _
Friend Class Microsoft_VisualStudio_Editors_SettingsDesigner_DesignTimeSettingInstance_ValuePropertyDescriptorAccessor
    Inherits BaseAccessor

    Protected Shared m_privateType As Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType = New Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType("Microsoft.VisualStudio.Editors", "Microsoft.VisualStudio.Editors.SettingsDesigner.DesignTimeSettingInstance+ValuePr" & _
            "opertyDescriptor")

    Friend Sub New(ByVal target As Object)
        MyBase.New(target, m_privateType)
    End Sub

    Friend ReadOnly Property Converter() As Global.System.ComponentModel.TypeConverter
        Get
            Dim ret As Global.System.ComponentModel.TypeConverter = CType(m_privateObject.GetProperty("Converter"), Global.System.ComponentModel.TypeConverter)
            Return ret
        End Get
    End Property

    Friend ReadOnly Property IsReadOnly() As Boolean
        Get
            Dim ret As Boolean = CType(m_privateObject.GetProperty("IsReadOnly"), Boolean)
            Return ret
        End Get
    End Property

    Friend ReadOnly Property PropertyType() As Global.System.Type
        Get
            Dim ret As Global.System.Type = CType(m_privateObject.GetProperty("PropertyType"), Global.System.Type)
            Return ret
        End Get
    End Property

    Friend ReadOnly Property DescriptionAttributeText() As String
        Get
            Dim ret As String = CType(m_privateObject.GetProperty("DescriptionAttributeText"), String)
            Return ret
        End Get
    End Property

    Friend Shared Function CreatePrivate(ByVal owner As Global.SettingsDesignerUnitTests.Microsoft_VisualStudio_Editors_SettingsDesigner_DesignTimeSettingInstanceAccessor) As Global.System.ComponentModel.PropertyDescriptor
        Dim owner_val_target As Object = Nothing
        If (Not (owner) Is Nothing) Then
            owner_val_target = owner.Target
        End If
        Dim args() As Object = New Object() {owner_val_target}
        Dim target As Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType = New Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType("Microsoft.VisualStudio.Editors", "Microsoft.VisualStudio.Editors.SettingsDesigner.DesignTimeSettingInstance")
        Dim priv_obj As Microsoft.VisualStudio.TestTools.UnitTesting.PrivateObject = New Microsoft.VisualStudio.TestTools.UnitTesting.PrivateObject("Microsoft.VisualStudio.Editors", "Microsoft.VisualStudio.Editors.SettingsDesigner.DesignTimeSettingInstance+ValuePr" & _
                "opertyDescriptor", New System.Type() {target.ReferencedType}, args)
        Return CType(priv_obj.Target, Global.System.ComponentModel.PropertyDescriptor)
    End Function

    Friend Function GetValue(ByVal component As Global.SettingsDesignerUnitTests.Microsoft_VisualStudio_Editors_SettingsDesigner_DesignTimeSettingInstanceAccessor) As Object
        Dim component_val_target As Object = Nothing
        If (Not (component) Is Nothing) Then
            component_val_target = component.Target
        End If
        Dim args() As Object = New Object() {component_val_target}
        Dim target As Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType = New Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType("Microsoft.VisualStudio.Editors", "Microsoft.VisualStudio.Editors.SettingsDesigner.DesignTimeSettingInstance")
        Dim ret As Object = CType(m_privateObject.Invoke("GetValue", New System.Type() {target.ReferencedType}, args), Object)
        Return ret
    End Function

    Friend Sub SetValue(ByVal component As Object, ByVal value As Object)
        Dim args() As Object = New Object() {component, value}
        m_privateObject.Invoke("SetValue", New System.Type() {GetType(Object), GetType(Object)}, args)
    End Sub

    Friend Shared Function ResolveComponentType(ByVal instance As Global.SettingsDesignerUnitTests.Microsoft_VisualStudio_Editors_SettingsDesigner_DesignTimeSettingInstanceAccessor) As Global.System.Type
        Dim instance_val_target As Object = Nothing
        If (Not (instance) Is Nothing) Then
            instance_val_target = instance.Target
        End If
        Dim args() As Object = New Object() {instance_val_target}
        Dim target As Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType = New Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType("Microsoft.VisualStudio.Editors", "Microsoft.VisualStudio.Editors.SettingsDesigner.DesignTimeSettingInstance")
        Dim ret As Global.System.Type = CType(m_privateType.InvokeStatic("ResolveComponentType", New System.Type() {target.ReferencedType}, args), Global.System.Type)
        Return ret
    End Function
End Class
<System.Diagnostics.DebuggerStepThrough(), _
 System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TestTools.UnitTestGeneration", "1.0.0.0")> _
Friend Class Microsoft_VisualStudio_Editors_SettingsDesigner_DesignTimeSettingInstance_SerializedValuePropertyDescriptorAccessor
    Inherits BaseAccessor

    Protected Shared m_privateType As Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType = New Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType("Microsoft.VisualStudio.Editors", "Microsoft.VisualStudio.Editors.SettingsDesigner.DesignTimeSettingInstance+Seriali" & _
            "zedValuePropertyDescriptor")

    Friend Sub New(ByVal target As Object)
        MyBase.New(target, m_privateType)
    End Sub

    Friend ReadOnly Property IsReadOnly() As Boolean
        Get
            Dim ret As Boolean = CType(m_privateObject.GetProperty("IsReadOnly"), Boolean)
            Return ret
        End Get
    End Property

    Friend ReadOnly Property PropertyType() As Global.System.Type
        Get
            Dim ret As Global.System.Type = CType(m_privateObject.GetProperty("PropertyType"), Global.System.Type)
            Return ret
        End Get
    End Property

    Friend ReadOnly Property UndoDescription() As String
        Get
            Dim ret As String = CType(m_privateObject.GetProperty("UndoDescription"), String)
            Return ret
        End Get
    End Property

    Friend ReadOnly Property DescriptionAttributeText() As String
        Get
            Dim ret As String = CType(m_privateObject.GetProperty("DescriptionAttributeText"), String)
            Return ret
        End Get
    End Property

    Friend Shared Function CreatePrivate(ByVal owner As Global.SettingsDesignerUnitTests.Microsoft_VisualStudio_Editors_SettingsDesigner_DesignTimeSettingInstanceAccessor) As Global.System.ComponentModel.PropertyDescriptor
        Dim owner_val_target As Object = Nothing
        If (Not (owner) Is Nothing) Then
            owner_val_target = owner.Target
        End If
        Dim args() As Object = New Object() {owner_val_target}
        Dim target As Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType = New Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType("Microsoft.VisualStudio.Editors", "Microsoft.VisualStudio.Editors.SettingsDesigner.DesignTimeSettingInstance")
        Dim priv_obj As Microsoft.VisualStudio.TestTools.UnitTesting.PrivateObject = New Microsoft.VisualStudio.TestTools.UnitTesting.PrivateObject("Microsoft.VisualStudio.Editors", "Microsoft.VisualStudio.Editors.SettingsDesigner.DesignTimeSettingInstance+Seriali" & _
                "zedValuePropertyDescriptor", New System.Type() {target.ReferencedType}, args)
        Return CType(priv_obj.Target, Global.System.ComponentModel.PropertyDescriptor)
    End Function

    Friend Function GetValue(ByVal component As Global.SettingsDesignerUnitTests.Microsoft_VisualStudio_Editors_SettingsDesigner_DesignTimeSettingInstanceAccessor) As Object
        Dim component_val_target As Object = Nothing
        If (Not (component) Is Nothing) Then
            component_val_target = component.Target
        End If
        Dim args() As Object = New Object() {component_val_target}
        Dim target As Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType = New Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType("Microsoft.VisualStudio.Editors", "Microsoft.VisualStudio.Editors.SettingsDesigner.DesignTimeSettingInstance")
        Dim ret As Object = CType(m_privateObject.Invoke("GetValue", New System.Type() {target.ReferencedType}, args), Object)
        Return ret
    End Function

    Friend Sub SetValue(ByVal component As Global.SettingsDesignerUnitTests.Microsoft_VisualStudio_Editors_SettingsDesigner_DesignTimeSettingInstanceAccessor, ByVal value As Object)
        Dim component_val_target As Object = Nothing
        If (Not (component) Is Nothing) Then
            component_val_target = component.Target
        End If
        Dim args() As Object = New Object() {component_val_target, value}
        Dim target As Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType = New Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType("Microsoft.VisualStudio.Editors", "Microsoft.VisualStudio.Editors.SettingsDesigner.DesignTimeSettingInstance")
        m_privateObject.Invoke("SetValue", New System.Type() {target.ReferencedType, GetType(Object)}, args)
    End Sub

    Friend Sub FillAttributes(ByVal attributeList As Global.System.Collections.IList)
        Dim args() As Object = New Object() {attributeList}
        m_privateObject.Invoke("FillAttributes", New System.Type() {GetType(Global.System.Collections.IList)}, args)
    End Sub
End Class
<System.Diagnostics.DebuggerStepThrough(), _
 System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TestTools.UnitTestGeneration", "1.0.0.0")> _
Friend Class Microsoft_VisualStudio_Editors_SettingsDesigner_DesignTimeSettingInstance_SettingTypeNamePropertyDescriptorAccessor
    Inherits BaseAccessor

    Protected Shared m_privateType As Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType = New Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType("Microsoft.VisualStudio.Editors", "Microsoft.VisualStudio.Editors.SettingsDesigner.DesignTimeSettingInstance+Setting" & _
            "TypeNamePropertyDescriptor")

    Friend Sub New(ByVal target As Object)
        MyBase.New(target, m_privateType)
    End Sub

    Friend ReadOnly Property IsReadOnly() As Boolean
        Get
            Dim ret As Boolean = CType(m_privateObject.GetProperty("IsReadOnly"), Boolean)
            Return ret
        End Get
    End Property

    Friend ReadOnly Property PropertyType() As Global.System.Type
        Get
            Dim ret As Global.System.Type = CType(m_privateObject.GetProperty("PropertyType"), Global.System.Type)
            Return ret
        End Get
    End Property

    Friend ReadOnly Property UndoDescription() As String
        Get
            Dim ret As String = CType(m_privateObject.GetProperty("UndoDescription"), String)
            Return ret
        End Get
    End Property

    Friend ReadOnly Property DescriptionAttributeText() As String
        Get
            Dim ret As String = CType(m_privateObject.GetProperty("DescriptionAttributeText"), String)
            Return ret
        End Get
    End Property

    Friend Shared Function CreatePrivate(ByVal owner As Global.SettingsDesignerUnitTests.Microsoft_VisualStudio_Editors_SettingsDesigner_DesignTimeSettingInstanceAccessor) As Global.System.ComponentModel.PropertyDescriptor
        Dim owner_val_target As Object = Nothing
        If (Not (owner) Is Nothing) Then
            owner_val_target = owner.Target
        End If
        Dim args() As Object = New Object() {owner_val_target}
        Dim target As Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType = New Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType("Microsoft.VisualStudio.Editors", "Microsoft.VisualStudio.Editors.SettingsDesigner.DesignTimeSettingInstance")
        Dim priv_obj As Microsoft.VisualStudio.TestTools.UnitTesting.PrivateObject = New Microsoft.VisualStudio.TestTools.UnitTesting.PrivateObject("Microsoft.VisualStudio.Editors", "Microsoft.VisualStudio.Editors.SettingsDesigner.DesignTimeSettingInstance+Setting" & _
                "TypeNamePropertyDescriptor", New System.Type() {target.ReferencedType}, args)
        Return CType(priv_obj.Target, Global.System.ComponentModel.PropertyDescriptor)
    End Function

    Friend Function GetValue(ByVal component As Global.SettingsDesignerUnitTests.Microsoft_VisualStudio_Editors_SettingsDesigner_DesignTimeSettingInstanceAccessor) As Object
        Dim component_val_target As Object = Nothing
        If (Not (component) Is Nothing) Then
            component_val_target = component.Target
        End If
        Dim args() As Object = New Object() {component_val_target}
        Dim target As Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType = New Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType("Microsoft.VisualStudio.Editors", "Microsoft.VisualStudio.Editors.SettingsDesigner.DesignTimeSettingInstance")
        Dim ret As Object = CType(m_privateObject.Invoke("GetValue", New System.Type() {target.ReferencedType}, args), Object)
        Return ret
    End Function

    Friend Sub SetValue(ByVal component As Global.SettingsDesignerUnitTests.Microsoft_VisualStudio_Editors_SettingsDesigner_DesignTimeSettingInstanceAccessor, ByVal value As Object)
        Dim component_val_target As Object = Nothing
        If (Not (component) Is Nothing) Then
            component_val_target = component.Target
        End If
        Dim args() As Object = New Object() {component_val_target, value}
        Dim target As Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType = New Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType("Microsoft.VisualStudio.Editors", "Microsoft.VisualStudio.Editors.SettingsDesigner.DesignTimeSettingInstance")
        m_privateObject.Invoke("SetValue", New System.Type() {target.ReferencedType, GetType(Object)}, args)
    End Sub
End Class
