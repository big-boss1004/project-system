'The following code was generated by Microsoft Visual Studio 2005.
'The test owner should check each test for validity.
Imports Microsoft.VisualStudio.TestTools.UnitTesting
Imports System
Imports System.Text
Imports System.Collections.Generic
Imports SettingsDesignerUnitTests
Imports System.ComponentModel
Imports System.CodeDom.Compiler
Imports System.Collections
Imports Microsoft.VisualStudio.Shell.Interop









'''<summary>
'''This is a test class for Microsoft.VisualStudio.Editors.SettingsDesigner.DesignTimeSettings and is intended
'''to contain all Microsoft.VisualStudio.Editors.SettingsDesigner.DesignTimeSettings Unit Tests
'''</summary>
<TestClass()> _
Public Class DesignTimeSettingsTest


    Private testContextInstance As TestContext

    '''<summary>
    '''Gets or sets the test context which provides
    '''information about and functionality for the current test run.
    '''</summary>
    Public Property TestContext() As TestContext
        Get
            Return testContextInstance
        End Get
        Set(ByVal value As TestContext)
            testContextInstance = value
        End Set
    End Property
#Region "Additional test attributes"
    '
    'You can use the following additional attributes as you write your tests:
    '
    'Use ClassInitialize to run code before running the first test in the class
    '
    '<ClassInitialize()>  _
    'Public Shared Sub MyClassInitialize(ByVal testContext As TestContext)
    'End Sub
    '
    'Use ClassCleanup to run code after all tests in a class have run
    '
    '<ClassCleanup()>  _
    'Public Shared Sub MyClassCleanup()
    'End Sub
    '
    'Use TestInitialize to run code before running each test
    '
    '<TestInitialize()>  _
    'Public Sub MyTestInitialize()
    'End Sub
    '
    'Use TestCleanup to run code after each test has run
    '
    '<TestCleanup()>  _
    'Public Sub MyTestCleanup()
    'End Sub
    '
#End Region


    '''<summary>
    '''A test for Add(ByVal Microsoft.VisualStudio.Editors.SettingsDesigner.DesignTimeSettingInstance, ByVal Boolean)
    '''</summary>
    <DeploymentItem("Microsoft.VisualStudio.Editors.dll"), _
     TestMethod()> _
    Public Sub AddTest_DuplicateNameMakeUniqueName()
        Dim target As Component = Microsoft_VisualStudio_Editors_SettingsDesigner_DesignTimeSettingsAccessor.CreatePrivate

        Dim accessor As Microsoft_VisualStudio_Editors_SettingsDesigner_DesignTimeSettingsAccessor = New Microsoft_VisualStudio_Editors_SettingsDesigner_DesignTimeSettingsAccessor(target)

        Dim target1 As Component = Microsoft_VisualStudio_Editors_SettingsDesigner_DesignTimeSettingInstanceAccessor.CreatePrivate()
        Dim InstanceAccessor1 As New Microsoft_VisualStudio_Editors_SettingsDesigner_DesignTimeSettingInstanceAccessor(target1)
        InstanceAccessor1.SetName("Foo")

        Dim target2 As Component = Microsoft_VisualStudio_Editors_SettingsDesigner_DesignTimeSettingInstanceAccessor.CreatePrivate()
        Dim InstanceAccessor2 As New Microsoft_VisualStudio_Editors_SettingsDesigner_DesignTimeSettingInstanceAccessor(target2)
        InstanceAccessor2.SetName("Foo")

        Dim MakeNameUnique As Boolean = True
        accessor.Add(InstanceAccessor1, MakeNameUnique)
        accessor.Add(InstanceAccessor2, MakeNameUnique)

        Assert.AreEqual(accessor.Count, 2)
    End Sub

    '''<summary>
    '''A test for Add(ByVal Microsoft.VisualStudio.Editors.SettingsDesigner.DesignTimeSettingInstance, ByVal Boolean)
    '''</summary>
    <DeploymentItem("Microsoft.VisualStudio.Editors.dll"), _
     ExpectedException(GetType(System.ArgumentException)), _
     TestMethod()> _
    Public Sub AddTest_DuplicateNameFail()
        Dim target As Component = Microsoft_VisualStudio_Editors_SettingsDesigner_DesignTimeSettingsAccessor.CreatePrivate

        Dim accessor As Microsoft_VisualStudio_Editors_SettingsDesigner_DesignTimeSettingsAccessor = New Microsoft_VisualStudio_Editors_SettingsDesigner_DesignTimeSettingsAccessor(target)

        Dim target1 As Component = Microsoft_VisualStudio_Editors_SettingsDesigner_DesignTimeSettingInstanceAccessor.CreatePrivate()
        Dim InstanceAccessor1 As New Microsoft_VisualStudio_Editors_SettingsDesigner_DesignTimeSettingInstanceAccessor(target1)
        InstanceAccessor1.SetName("Foo")

        Dim target2 As Component = Microsoft_VisualStudio_Editors_SettingsDesigner_DesignTimeSettingInstanceAccessor.CreatePrivate()
        Dim InstanceAccessor2 As New Microsoft_VisualStudio_Editors_SettingsDesigner_DesignTimeSettingInstanceAccessor(target2)
        InstanceAccessor2.SetName("Foo")


        Dim MakeNameUnique As Boolean = False

        accessor.Add(InstanceAccessor1, MakeNameUnique)
        accessor.Add(InstanceAccessor2, MakeNameUnique)

        Assert.Fail("Something should have thrown!")
    End Sub

    '''<summary>
    '''A test for Add(ByVal Microsoft.VisualStudio.Editors.SettingsDesigner.DesignTimeSettingInstance, ByVal Boolean)
    '''</summary>
    <DeploymentItem("Microsoft.VisualStudio.Editors.dll"), _
     TestMethod()> _
    Public Sub AddTest()
        Dim target As Component = Microsoft_VisualStudio_Editors_SettingsDesigner_DesignTimeSettingsAccessor.CreatePrivate

        Dim accessor As Microsoft_VisualStudio_Editors_SettingsDesigner_DesignTimeSettingsAccessor = New Microsoft_VisualStudio_Editors_SettingsDesigner_DesignTimeSettingsAccessor(target)

        Dim target1 As Component = Microsoft_VisualStudio_Editors_SettingsDesigner_DesignTimeSettingInstanceAccessor.CreatePrivate()
        Dim InstanceAccessor1 As New Microsoft_VisualStudio_Editors_SettingsDesigner_DesignTimeSettingInstanceAccessor(target1)
        InstanceAccessor1.SetName("Foo")

        Dim MakeNameUnique As Boolean = True
        accessor.Add(InstanceAccessor1, MakeNameUnique)

        Assert.AreEqual(accessor.Count, 1)
    End Sub

    '''<summary>
    '''A test for AddNew(ByVal String, ByVal String, ByVal Boolean)
    '''</summary>
    <DeploymentItem("Microsoft.VisualStudio.Editors.dll"), _
     TestMethod()> _
    Public Sub AddNewTest()
        Dim target As Component = Microsoft_VisualStudio_Editors_SettingsDesigner_DesignTimeSettingsAccessor.CreatePrivate

        Dim accessor As Microsoft_VisualStudio_Editors_SettingsDesigner_DesignTimeSettingsAccessor = New Microsoft_VisualStudio_Editors_SettingsDesigner_DesignTimeSettingsAccessor(target)

        Dim TypeName As String = GetType(System.String).FullName

        Dim SettingName As String = "MySettingName"

        Dim AllowMakeUnique As Boolean = False

        Dim actual As Microsoft_VisualStudio_Editors_SettingsDesigner_DesignTimeSettingInstanceAccessor

        actual = accessor.AddNew(TypeName, SettingName, AllowMakeUnique)

        Assert.AreEqual(SettingName, actual.Name, "Microsoft.VisualStudio.Editors.SettingsDesigner.DesignTimeSettings.AddNew did not" & _
                " return the expected value.")
        Assert.AreEqual(TypeName, actual.SettingTypeName, "Microsoft.VisualStudio.Editors.SettingsDesigner.DesignTimeSettings.AddNew did not" & _
                " return the expected value.")
    End Sub

    '''<summary>
    '''A test for CodeProvider()
    '''</summary>
    <DeploymentItem("Microsoft.VisualStudio.Editors.dll"), _
    Ignore(), _
     TestMethod()> _
    Public Sub CodeProviderTest()
        Dim target As Component = Microsoft_VisualStudio_Editors_SettingsDesigner_DesignTimeSettingsAccessor.CreatePrivate

        Dim val As CodeDomProvider = Nothing 'TODO: Assign to an appropriate value for the property

        Dim accessor As Microsoft_VisualStudio_Editors_SettingsDesigner_DesignTimeSettingsAccessor = New Microsoft_VisualStudio_Editors_SettingsDesigner_DesignTimeSettingsAccessor(target)


        Assert.AreEqual(val, accessor.CodeProvider, "Microsoft.VisualStudio.Editors.SettingsDesigner.DesignTimeSettings.CodeProvider w" & _
                "as not set correctly.")
        Assert.Inconclusive("Verify the correctness of this test method.")
    End Sub

    '''<summary>
    '''A test for Count()
    '''</summary>
    <DeploymentItem("Microsoft.VisualStudio.Editors.dll"), _
     TestMethod()> _
    Public Sub CountTest()
        Dim target As Component = Microsoft_VisualStudio_Editors_SettingsDesigner_DesignTimeSettingsAccessor.CreatePrivate

        Dim val As Integer = 0

        Dim accessor As Microsoft_VisualStudio_Editors_SettingsDesigner_DesignTimeSettingsAccessor = New Microsoft_VisualStudio_Editors_SettingsDesigner_DesignTimeSettingsAccessor(target)


        Assert.AreEqual(val, accessor.Count, "Microsoft.VisualStudio.Editors.SettingsDesigner.DesignTimeSettings.Count was not " & _
                "set correctly.")
    End Sub

    '''<summary>
    '''A test for CreateUniqueName(ByVal String)
    '''</summary>
    <DeploymentItem("Microsoft.VisualStudio.Editors.dll"), _
     TestMethod()> _
    Public Sub CreateUniqueNameTest_NameAlreadyUnique()
        Dim target As Component = Microsoft_VisualStudio_Editors_SettingsDesigner_DesignTimeSettingsAccessor.CreatePrivate

        Dim accessor As Microsoft_VisualStudio_Editors_SettingsDesigner_DesignTimeSettingsAccessor = New Microsoft_VisualStudio_Editors_SettingsDesigner_DesignTimeSettingsAccessor(target)

        Dim Base As String = "Setting"

        Dim expected As String = "Setting"
        Dim actual As String

        actual = accessor.CreateUniqueName(Base)

        Assert.AreEqual(expected, actual, "Microsoft.VisualStudio.Editors.SettingsDesigner.DesignTimeSettings.CreateUniqueNa" & _
                "me did not return the expected value.")
    End Sub


    '''<summary>
    '''A test for CreateUniqueName(ByVal String)
    '''</summary>
    <DeploymentItem("Microsoft.VisualStudio.Editors.dll"), _
     TestMethod()> _
    Public Sub CreateUniqueNameTest_MadeNameUnique()
        Dim target As Component = Microsoft_VisualStudio_Editors_SettingsDesigner_DesignTimeSettingsAccessor.CreatePrivate

        Dim accessor As Microsoft_VisualStudio_Editors_SettingsDesigner_DesignTimeSettingsAccessor = New Microsoft_VisualStudio_Editors_SettingsDesigner_DesignTimeSettingsAccessor(target)

        Dim Base As String = "Setting"

        Dim expected As String = "Setting1"
        Dim actual As String

        accessor.AddNew(GetType(System.String).FullName, Base, False)
        actual = accessor.CreateUniqueName(Base)

        Assert.AreEqual(expected, actual, "Microsoft.VisualStudio.Editors.SettingsDesigner.DesignTimeSettings.CreateUniqueNa" & _
                "me did not return the expected value.")
    End Sub

    '''<summary>
    '''A test for EqualIdentifiers(ByVal String, ByVal String)
    '''</summary>
    <DeploymentItem("Microsoft.VisualStudio.Editors.dll"), _
     TestMethod()> _
    Public Sub EqualIdentifiersTest_True()
        Dim Id1 As String = "Same"

        Dim Id2 As String = "Same"

        Dim expected As Boolean = True
        Dim actual As Boolean

        actual = SettingsDesignerUnitTests.Microsoft_VisualStudio_Editors_SettingsDesigner_DesignTimeSettingsAccessor.EqualIdentifiers(Id1, Id2)

        Assert.AreEqual(expected, actual, "Microsoft.VisualStudio.Editors.SettingsDesigner.DesignTimeSettings.EqualIdentifie" & _
                "rs did not return the expected value.")
    End Sub

    '''<summary>
    '''A test for EqualIdentifiers(ByVal String, ByVal String)
    '''</summary>
    <DeploymentItem("Microsoft.VisualStudio.Editors.dll"), _
     TestMethod()> _
    Public Sub EqualIdentifiersTest_Different()
        Dim Id1 As String = "One"

        Dim Id2 As String = "Two"

        Dim expected As Boolean = False
        Dim actual As Boolean

        actual = SettingsDesignerUnitTests.Microsoft_VisualStudio_Editors_SettingsDesigner_DesignTimeSettingsAccessor.EqualIdentifiers(Id1, Id2)

        Assert.AreEqual(expected, actual, "Microsoft.VisualStudio.Editors.SettingsDesigner.DesignTimeSettings.EqualIdentifie" & _
                "rs did not return the expected value.")
    End Sub

    '''<summary>
    '''A test for EqualIdentifiers(ByVal String, ByVal String)
    '''</summary>
    <DeploymentItem("Microsoft.VisualStudio.Editors.dll"), _
     TestMethod()> _
    Public Sub EqualIdentifiersTest_DifferentOneIsNothing()
        Dim Id1 As String = Nothing

        Dim Id2 As String = "Two"

        Dim expected As Boolean = False
        Dim actual As Boolean

        actual = SettingsDesignerUnitTests.Microsoft_VisualStudio_Editors_SettingsDesigner_DesignTimeSettingsAccessor.EqualIdentifiers(Id1, Id2)

        Assert.AreEqual(expected, actual, "Microsoft.VisualStudio.Editors.SettingsDesigner.DesignTimeSettings.EqualIdentifie" & _
                "rs did not return the expected value.")
    End Sub

    '''<summary>
    '''A test for IsUniqueName(ByVal String, ByVal Microsoft.VisualStudio.Editors.SettingsDesigner.DesignTimeSettingInstance)
    '''</summary>
    <DeploymentItem("Microsoft.VisualStudio.Editors.dll"), _
     TestMethod()> _
    Public Sub IsUniqueNameTest_NotUnique()
        Dim target As Component = Microsoft_VisualStudio_Editors_SettingsDesigner_DesignTimeSettingsAccessor.CreatePrivate

        Dim accessor As Microsoft_VisualStudio_Editors_SettingsDesigner_DesignTimeSettingsAccessor = New Microsoft_VisualStudio_Editors_SettingsDesigner_DesignTimeSettingsAccessor(target)

        Dim Name As String = "Foo"

        Dim IgnoreThisInstance As Microsoft_VisualStudio_Editors_SettingsDesigner_DesignTimeSettingInstanceAccessor = accessor.AddNew(GetType(String).FullName, Name, False)

        Dim expected As Boolean = False
        Dim actual As Boolean

        actual = accessor.IsUniqueName(Name, Nothing)

        Assert.AreEqual(expected, actual, "Microsoft.VisualStudio.Editors.SettingsDesigner.DesignTimeSettings.IsUniqueName d" & _
                "id not return the expected value.")
    End Sub

    '''<summary>
    '''A test for IsUniqueName(ByVal String, ByVal Microsoft.VisualStudio.Editors.SettingsDesigner.DesignTimeSettingInstance)
    '''</summary>
    <DeploymentItem("Microsoft.VisualStudio.Editors.dll"), _
     TestMethod()> _
    Public Sub IsUniqueNameTest()
        Dim target As Component = Microsoft_VisualStudio_Editors_SettingsDesigner_DesignTimeSettingsAccessor.CreatePrivate

        Dim accessor As Microsoft_VisualStudio_Editors_SettingsDesigner_DesignTimeSettingsAccessor = New Microsoft_VisualStudio_Editors_SettingsDesigner_DesignTimeSettingsAccessor(target)

        Dim Name As String = "Foo"

        Dim IgnoreThisInstance As Microsoft_VisualStudio_Editors_SettingsDesigner_DesignTimeSettingInstanceAccessor = accessor.AddNew(GetType(String).FullName, Name, False)

        Dim expected As Boolean = True
        Dim actual As Boolean

        actual = accessor.IsUniqueName(Name, IgnoreThisInstance)

        Assert.AreEqual(expected, actual, "Microsoft.VisualStudio.Editors.SettingsDesigner.DesignTimeSettings.IsUniqueName d" & _
                "id not return the expected value.")
    End Sub


    '''<summary>
    '''A test for IsValidIdentifier(ByVal String)
    '''</summary>
    <DeploymentItem("Microsoft.VisualStudio.Editors.dll"), _
     TestMethod()> _
    Public Sub IsValidIdentifierTest_IsValid()
        Dim target As Component = Microsoft_VisualStudio_Editors_SettingsDesigner_DesignTimeSettingsAccessor.CreatePrivate

        Dim accessor As Microsoft_VisualStudio_Editors_SettingsDesigner_DesignTimeSettingsAccessor = New Microsoft_VisualStudio_Editors_SettingsDesigner_DesignTimeSettingsAccessor(target)

        Dim Name As String = "ValidName"

        Dim expected As Boolean = True
        Dim actual As Boolean

        actual = accessor.IsValidIdentifier(Name)

        Assert.AreEqual(expected, actual, "Microsoft.VisualStudio.Editors.SettingsDesigner.DesignTimeSettings.IsValidIdentif" & _
                "ier did not return the expected value.")
    End Sub

    '''<summary>
    '''A test for IsValidIdentifier(ByVal String)
    '''</summary>
    <DeploymentItem("Microsoft.VisualStudio.Editors.dll"), _
     TestMethod()> _
    Public Sub IsValidIdentifierTest_InvalidEmpty()
        Dim target As Component = Microsoft_VisualStudio_Editors_SettingsDesigner_DesignTimeSettingsAccessor.CreatePrivate

        Dim accessor As Microsoft_VisualStudio_Editors_SettingsDesigner_DesignTimeSettingsAccessor = New Microsoft_VisualStudio_Editors_SettingsDesigner_DesignTimeSettingsAccessor(target)

        Dim Name As String = ""

        Dim expected As Boolean = False
        Dim actual As Boolean

        actual = accessor.IsValidIdentifier(Name)

        Assert.AreEqual(expected, actual, "Microsoft.VisualStudio.Editors.SettingsDesigner.DesignTimeSettings.IsValidIdentif" & _
                "ier did not return the expected value.")
    End Sub

    '''<summary>
    '''A test for IsValidIdentifier(ByVal String)
    '''</summary>
    <DeploymentItem("Microsoft.VisualStudio.Editors.dll"), _
     TestMethod()> _
    Public Sub IsValidIdentifierTest_InvalidBeginsWithNumber()
        Dim target As Component = Microsoft_VisualStudio_Editors_SettingsDesigner_DesignTimeSettingsAccessor.CreatePrivate

        Dim accessor As Microsoft_VisualStudio_Editors_SettingsDesigner_DesignTimeSettingsAccessor = New Microsoft_VisualStudio_Editors_SettingsDesigner_DesignTimeSettingsAccessor(target)

        Dim Name As String = "1InvalidName"

        Dim expected As Boolean = False
        Dim actual As Boolean

        actual = accessor.IsValidIdentifier(Name)

        Assert.AreEqual(expected, actual, "Microsoft.VisualStudio.Editors.SettingsDesigner.DesignTimeSettings.IsValidIdentif" & _
                "ier did not return the expected value.")
    End Sub

    '''<summary>
    '''A test for IsValidName(ByVal String, ByVal Microsoft.VisualStudio.Editors.SettingsDesigner.DesignTimeSettingInstance)
    '''</summary>
    <DeploymentItem("Microsoft.VisualStudio.Editors.dll"), _
     TestMethod()> _
    Public Sub IsValidNameTest()
        Dim target As Component = Microsoft_VisualStudio_Editors_SettingsDesigner_DesignTimeSettingsAccessor.CreatePrivate

        Dim accessor As Microsoft_VisualStudio_Editors_SettingsDesigner_DesignTimeSettingsAccessor = New Microsoft_VisualStudio_Editors_SettingsDesigner_DesignTimeSettingsAccessor(target)

        Dim Name As String = "Foo"

        Dim instanceToIgnore As Microsoft_VisualStudio_Editors_SettingsDesigner_DesignTimeSettingInstanceAccessor = Nothing 'TODO: Initialize to an appropriate value

        Dim expected As Boolean = True
        Dim actual As Boolean

        actual = accessor.IsValidName(Name, False, instanceToIgnore)

        Assert.AreEqual(expected, actual, "Microsoft.VisualStudio.Editors.SettingsDesigner.DesignTimeSettings.IsValidName di" & _
                "d not return the expected value.")
    End Sub

    '''<summary>
    '''A test for IsValidName(ByVal String, ByVal Microsoft.VisualStudio.Editors.SettingsDesigner.DesignTimeSettingInstance)
    '''</summary>
    <DeploymentItem("Microsoft.VisualStudio.Editors.dll"), _
     TestMethod()> _
    Public Sub IsValidNameTest_InvalidName()
        Dim target As Component = Microsoft_VisualStudio_Editors_SettingsDesigner_DesignTimeSettingsAccessor.CreatePrivate

        Dim accessor As Microsoft_VisualStudio_Editors_SettingsDesigner_DesignTimeSettingsAccessor = New Microsoft_VisualStudio_Editors_SettingsDesigner_DesignTimeSettingsAccessor(target)

        Dim Name As String = "123"

        Dim instanceToIgnore As Microsoft_VisualStudio_Editors_SettingsDesigner_DesignTimeSettingInstanceAccessor = Nothing 'TODO: Initialize to an appropriate value

        Dim expected As Boolean = False
        Dim actual As Boolean

        actual = accessor.IsValidName(Name, True, instanceToIgnore)

        Assert.AreEqual(expected, actual, "Microsoft.VisualStudio.Editors.SettingsDesigner.DesignTimeSettings.IsValidName di" & _
                "d not return the expected value.")
    End Sub

    '''<summary>
    '''A test for IsValidName(ByVal String, ByVal Microsoft.VisualStudio.Editors.SettingsDesigner.DesignTimeSettingInstance)
    '''</summary>
    <DeploymentItem("Microsoft.VisualStudio.Editors.dll"), _
     TestMethod()> _
    Public Sub IsValidNameTest_SameNameAsSetting_IgnoreInstanceWithDuplicateName()
        Dim target As Component = Microsoft_VisualStudio_Editors_SettingsDesigner_DesignTimeSettingsAccessor.CreatePrivate

        Dim accessor As Microsoft_VisualStudio_Editors_SettingsDesigner_DesignTimeSettingsAccessor = New Microsoft_VisualStudio_Editors_SettingsDesigner_DesignTimeSettingsAccessor(target)

        Dim container As New Mockisar.MockContainer()
        TryCast(target, IComponent).Site = New Mockisar.MockSiteWithName(target, "", container)
        Dim Name As String = "Foo"

        Dim instanceToIgnore As Microsoft_VisualStudio_Editors_SettingsDesigner_DesignTimeSettingInstanceAccessor = accessor.AddNew(GetType(System.String).FullName, Name, False)

        Dim expected As Boolean = True
        Dim actual As Boolean

        actual = accessor.IsValidName(Name, True, instanceToIgnore)

        Assert.AreEqual(expected, actual, "Microsoft.VisualStudio.Editors.SettingsDesigner.DesignTimeSettings.IsValidName di" & _
                "d not return the expected value.")
    End Sub

    '''<summary>
    '''A test for IsValidName(ByVal String, ByVal Microsoft.VisualStudio.Editors.SettingsDesigner.DesignTimeSettingInstance)
    '''</summary>
    <DeploymentItem("Microsoft.VisualStudio.Editors.dll"), _
     TestMethod()> _
    Public Sub IsValidNameTest_SameNameAsSetting()
        Dim target As Component = Microsoft_VisualStudio_Editors_SettingsDesigner_DesignTimeSettingsAccessor.CreatePrivate

        Dim accessor As Microsoft_VisualStudio_Editors_SettingsDesigner_DesignTimeSettingsAccessor = New Microsoft_VisualStudio_Editors_SettingsDesigner_DesignTimeSettingsAccessor(target)

        Dim container As New Mockisar.MockContainer()
        TryCast(target, IComponent).Site = New Mockisar.MockSiteWithName(target, "", container)
        Dim Name As String = "Foo"

        accessor.AddNew(GetType(System.String).FullName, Name, False)
        Dim instanceToIgnore As Microsoft_VisualStudio_Editors_SettingsDesigner_DesignTimeSettingInstanceAccessor = Nothing

        Dim expected As Boolean = False
        Dim actual As Boolean

        actual = accessor.IsValidName(Name, True, instanceToIgnore)

        Assert.AreEqual(expected, actual, "Microsoft.VisualStudio.Editors.SettingsDesigner.DesignTimeSettings.IsValidName di" & _
                "d not return the expected value.")
    End Sub

    '''<summary>
    '''A test for MakeValidIdentifier(ByVal String)
    '''</summary>
    <DeploymentItem("Microsoft.VisualStudio.Editors.dll"), _
     Ignore(), _
     TestMethod()> _
    Public Sub MakeValidIdentifierTest()
        Dim target As Component = Microsoft_VisualStudio_Editors_SettingsDesigner_DesignTimeSettingsAccessor.CreatePrivate

        Dim accessor As Microsoft_VisualStudio_Editors_SettingsDesigner_DesignTimeSettingsAccessor = New Microsoft_VisualStudio_Editors_SettingsDesigner_DesignTimeSettingsAccessor(target)

        Dim name As String = "a test"

        Dim expected As String = Nothing
        Dim actual As String

        actual = accessor.MakeValidIdentifier(name)

        Assert.AreEqual(expected, actual, "Microsoft.VisualStudio.Editors.SettingsDesigner.DesignTimeSettings.MakeValidIdent" & _
                "ifier did not return the expected value.")
        Assert.Inconclusive("Verify the correctness of this test method.")
    End Sub

    '''<summary>
    '''A test for New()
    '''</summary>
    <DeploymentItem("Microsoft.VisualStudio.Editors.dll"), _
     Ignore(), _
     TestMethod()> _
    Public Sub ConstructorTest()
        Dim target As Component = Microsoft_VisualStudio_Editors_SettingsDesigner_DesignTimeSettingsAccessor.CreatePrivate

        'TODO: Implement code to verify target
        Assert.Inconclusive("TODO: Implement code to verify target")
    End Sub

    '''<summary>
    '''A test for New(ByVal Microsoft.VisualStudio.Shell.Interop.IVsHierarchy, ByVal UInteger)
    '''</summary>
    <DeploymentItem("Microsoft.VisualStudio.Editors.dll"), _
     Ignore(), _
     TestMethod()> _
    Public Sub ConstructorTest_HierarchyItemId()
        Dim hierarchy As IVsHierarchy = Nothing 'TODO: Initialize to an appropriate value

        Dim itemId As UInteger 'TODO: Initialize to an appropriate value

        Dim target As Component = Microsoft_VisualStudio_Editors_SettingsDesigner_DesignTimeSettingsAccessor.CreatePrivate(hierarchy, itemId)

        'TODO: Implement code to verify target
        Assert.Inconclusive("TODO: Implement code to verify target")
    End Sub

    '''<summary>
    '''A test for PersistedNamespace()
    '''</summary>
    <DeploymentItem("Microsoft.VisualStudio.Editors.dll"), _
     TestMethod()> _
    Public Sub PersistedNamespaceTest()
        Dim target As Component = Microsoft_VisualStudio_Editors_SettingsDesigner_DesignTimeSettingsAccessor.CreatePrivate

        Dim val As String = "My.Namespace.To.Test"

        Dim accessor As Microsoft_VisualStudio_Editors_SettingsDesigner_DesignTimeSettingsAccessor = New Microsoft_VisualStudio_Editors_SettingsDesigner_DesignTimeSettingsAccessor(target)

        accessor.PersistedNamespace = val


        Assert.AreEqual(val, accessor.PersistedNamespace, "Microsoft.VisualStudio.Editors.SettingsDesigner.DesignTimeSettings.PersistedNames" & _
                "pace was not set correctly.")
    End Sub

    '''<summary>
    '''A test for Remove(ByVal Microsoft.VisualStudio.Editors.SettingsDesigner.DesignTimeSettingInstance)
    '''</summary>
    <DeploymentItem("Microsoft.VisualStudio.Editors.dll"), _
     TestMethod()> _
    Public Sub RemoveTest()
        Dim target As Component = Microsoft_VisualStudio_Editors_SettingsDesigner_DesignTimeSettingsAccessor.CreatePrivate

        Dim accessor As Microsoft_VisualStudio_Editors_SettingsDesigner_DesignTimeSettingsAccessor = New Microsoft_VisualStudio_Editors_SettingsDesigner_DesignTimeSettingsAccessor(target)

        Dim instance As Microsoft_VisualStudio_Editors_SettingsDesigner_DesignTimeSettingInstanceAccessor = accessor.AddNew(GetType(String).FullName, "Foo", False)
        Dim instance2 As Microsoft_VisualStudio_Editors_SettingsDesigner_DesignTimeSettingInstanceAccessor = accessor.AddNew(GetType(String).FullName, "Bar", False)

        Assert.AreEqual(accessor.Count, 2, "Added two settings, count should be two!")
        accessor.Remove(instance)
        Assert.AreEqual(accessor.Count, 1, "Added two settings, then removed one, count should be one!")

    End Sub

    '''<summary>
    '''A test for UseSpecialClassName()
    '''</summary>
    <DeploymentItem("Microsoft.VisualStudio.Editors.dll"), _
     TestMethod()> _
    Public Sub UseSpecialClassNameTest()
        Dim target As Component = Microsoft_VisualStudio_Editors_SettingsDesigner_DesignTimeSettingsAccessor.CreatePrivate

        Dim val As Boolean = True

        Dim accessor As Microsoft_VisualStudio_Editors_SettingsDesigner_DesignTimeSettingsAccessor = New Microsoft_VisualStudio_Editors_SettingsDesigner_DesignTimeSettingsAccessor(target)

        accessor.UseSpecialClassName = val


        Assert.AreEqual(val, accessor.UseSpecialClassName, "Microsoft.VisualStudio.Editors.SettingsDesigner.DesignTimeSettings.UseSpecialClas" & _
                "sName was not set correctly.")
    End Sub

End Class
