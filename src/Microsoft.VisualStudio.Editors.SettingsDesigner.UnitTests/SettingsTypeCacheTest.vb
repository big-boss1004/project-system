' Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.

'The following code was generated by Microsoft Visual Studio 2005.
'The test owner should check each test for validity.
Imports Microsoft.VisualStudio.TestTools.UnitTesting
Imports System
Imports System.Text
Imports System.Collections.Generic

Imports System.ComponentModel.Design
Imports Microsoft.VisualStudio.Shell.Interop
Imports Microsoft.VSDesigner

'''<summary>
'''This is a test class for Microsoft.VisualStudio.Editors.SettingsDesigner.SettingsTypeCache and is intended
'''to contain all Microsoft.VisualStudio.Editors.SettingsDesigner.SettingsTypeCache Unit Tests
'''</summary>
<TestClass()> _
Public Class SettingsTypeCacheTest


    Private testContextInstance As TestContext

    '''<summary>
    '''Gets or sets the test context which provides
    '''information about and functionality for the current test run.
    '''</summary>
    Public Property TestContext() As TestContext
        Get
            Return testContextInstance
        End Get
        Set(ByVal value As TestContext)
            testContextInstance = value
        End Set
    End Property
#Region "Additional test attributes"
    '
    'You can use the following additional attributes as you write your tests:
    '
    'Use ClassInitialize to run code before running the first test in the class
    '
    '<ClassInitialize()>  _
    'Public Shared Sub MyClassInitialize(ByVal testContext As TestContext)
    'End Sub
    '
    'Use ClassCleanup to run code after all tests in a class have run
    '
    '<ClassCleanup()>  _
    'Public Shared Sub MyClassCleanup()
    'End Sub
    '
    'Use TestInitialize to run code before running each test
    '
    '<TestInitialize()>  _
    'Public Sub MyTestInitialize()
    'End Sub
    '
    'Use TestCleanup to run code after each test has run
    '
    '<TestCleanup()>  _
    'Public Sub MyTestCleanup()
    'End Sub
    '
#End Region


    '''<summary>
    '''A test for GetSettingType(ByVal String)
    '''</summary>
    <DeploymentItem("Microsoft.VisualStudio.Editors.dll"), _
     TestMethod()> _
    Public Sub GetSettingTypeTest_Success()
        Dim VsHierarchy As IVsHierarchy = New Mockisar.MockIVsHierarchy

        Dim expected As Type = GetType(System.String)

        Dim typeResolutionService As ITypeResolutionService = New Mockisar.MockITypeResolutionService(True, expected)

        Dim target As Object = Microsoft_VisualStudio_Editors_SettingsDesigner_SettingsTypeCacheAccessor.CreatePrivate(VsHierarchy, 0, typeResolutionService, True)

        Dim accessor As Microsoft_VisualStudio_Editors_SettingsDesigner_SettingsTypeCacheAccessor = New Microsoft_VisualStudio_Editors_SettingsDesigner_SettingsTypeCacheAccessor(target)

        Dim typeName As String = expected.FullName

        Dim actual As Type

        actual = accessor.GetSettingType(typeName)

        Assert.AreEqual(expected, actual, "Microsoft.VisualStudio.Editors.SettingsDesigner.SettingsTypeCache.GetSettingType " & _
                "did not return the expected value.")
    End Sub

    '''<summary>
    '''A test for GetSettingType(ByVal String)
    '''</summary>
    <DeploymentItem("Microsoft.VisualStudio.Editors.dll"), _
     TestMethod()> _
    Public Sub GetSettingTypeTest_Fail()
        Dim VsHierarchy As IVsHierarchy = New Mockisar.MockIVsHierarchy

        Dim typeResolutionService As ITypeResolutionService = New Mockisar.MockITypeResolutionService(True)

        Dim target As Object = Microsoft_VisualStudio_Editors_SettingsDesigner_SettingsTypeCacheAccessor.CreatePrivate(VsHierarchy, 0, typeResolutionService, True)

        Dim accessor As Microsoft_VisualStudio_Editors_SettingsDesigner_SettingsTypeCacheAccessor = New Microsoft_VisualStudio_Editors_SettingsDesigner_SettingsTypeCacheAccessor(target)

        Dim expected As Type = Nothing
        Dim typeName As String = "Onka plonka this type doesn't exist"

        Dim actual As Type

        actual = accessor.GetSettingType(typeName)

        Assert.AreEqual(expected, actual, "Microsoft.VisualStudio.Editors.SettingsDesigner.SettingsTypeCache.GetSettingType " & _
                "did not return the expected value.")
    End Sub

    '''<summary>
    '''A test for New(ByVal System.ComponentModel.Design.ITypeResolutionService)
    '''</summary>
    <DeploymentItem("Microsoft.VisualStudio.Editors.dll"), _
     TestMethod()> _
    Public Sub ConstructorTest()
        Dim VsHierarchy As IVsHierarchy = New Mockisar.MockIVsHierarchy

        Dim typeResolutionService As ITypeResolutionService = New Mockisar.MockITypeResolutionService(False)

        Dim target As Object = Microsoft_VisualStudio_Editors_SettingsDesigner_SettingsTypeCacheAccessor.CreatePrivate(VsHierarchy, 0, typeResolutionService, True)

        Dim accessor As New Microsoft_VisualStudio_Editors_SettingsDesigner_SettingsTypeCacheAccessor(target)

        Assert.AreSame(typeResolutionService, accessor.m_typeResolutionService)
    End Sub


    '''<summary>
    '''A test for GetSettingType(ByVal String)
    '''</summary>
    <DeploymentItem("Microsoft.VisualStudio.Editors.dll"), _
     TestMethod()> _
    Public Sub GetSettingTypeTest_XmlTestClass()
        Dim VsHierarchy As IVsHierarchy = New Mockisar.MockIVsHierarchy

        Dim typeResolutionService As ITypeResolutionService = New Mockisar.MockITypeResolutionService(True, GetType(System.String), GetType(TestClasses.XmlSerializableTestClass))

        Dim target As Object = Microsoft_VisualStudio_Editors_SettingsDesigner_SettingsTypeCacheAccessor.CreatePrivate(VsHierarchy, 0, typeResolutionService, True)

        Dim accessor As Microsoft_VisualStudio_Editors_SettingsDesigner_SettingsTypeCacheAccessor = New Microsoft_VisualStudio_Editors_SettingsDesigner_SettingsTypeCacheAccessor(target)

        Dim typeName As String = GetType(TestClasses.XmlSerializableTestClass).FullName

        Dim expected As Type = GetType(TestClasses.XmlSerializableTestClass)
        Dim actual As Type

        actual = accessor.GetSettingType(typeName)

        Assert.AreEqual(expected, actual, "Microsoft.VisualStudio.Editors.SettingsDesigner.SettingsTypeCache.GetSettingType " & _
                "did not return the expected value.")
    End Sub

    '''<summary>
    '''A test for GetSettingType(ByVal String)
    '''</summary>
    <DeploymentItem("Microsoft.VisualStudio.Editors.dll"), _
     TestMethod()> _
    Public Sub GetSettingTypeTest_LanguageSpecificName()
        Dim VsHierarchy As IVsHierarchy = New Mockisar.MockIVsHierarchy

        Dim typeResolutionService As ITypeResolutionService = New Mockisar.MockITypeResolutionService(True, GetType(System.String), GetType(TestClasses.XmlSerializableTestClass))

        Dim target As Object = Microsoft_VisualStudio_Editors_SettingsDesigner_SettingsTypeCacheAccessor.CreatePrivate(VsHierarchy, 0, typeResolutionService, True)

        Dim accessor As Microsoft_VisualStudio_Editors_SettingsDesigner_SettingsTypeCacheAccessor = New Microsoft_VisualStudio_Editors_SettingsDesigner_SettingsTypeCacheAccessor(target)

        Dim typeName As String = "string"

        Dim expected As Type = Nothing
        Dim actual As Type

        actual = accessor.GetSettingType(typeName)

        Assert.AreEqual(expected, actual, "Microsoft.VisualStudio.Editors.SettingsDesigner.SettingsTypeCache.GetSettingType " & _
                "did not return the expected value.")
    End Sub

    '''<summary>
    '''A test for GetSettingType(ByVal String)
    '''</summary>
    <DeploymentItem("Microsoft.VisualStudio.Editors.dll"), _
     TestMethod()> _
    Public Sub GetSettingTypeTest_ConnectionString()
        Dim VsHierarchy As IVsHierarchy = New Mockisar.MockIVsHierarchy

        Dim typeResolutionService As ITypeResolutionService = New Mockisar.MockITypeResolutionService(True, GetType(System.String), GetType(TestClasses.XmlSerializableTestClass))

        Dim target As Object = Microsoft_VisualStudio_Editors_SettingsDesigner_SettingsTypeCacheAccessor.CreatePrivate(VsHierarchy, 0, typeResolutionService, True)

        Dim accessor As Microsoft_VisualStudio_Editors_SettingsDesigner_SettingsTypeCacheAccessor = New Microsoft_VisualStudio_Editors_SettingsDesigner_SettingsTypeCacheAccessor(target)

        Dim typeName As String = "(Connection string)"

        Dim expected As Type = GetType(Microsoft.VSDesigner.VSDesignerPackage.SerializableConnectionString)
        Dim actual As Type

        actual = accessor.GetSettingType(typeName)

        Assert.AreEqual(expected, actual, "Microsoft.VisualStudio.Editors.SettingsDesigner.SettingsTypeCache.GetSettingType " & _
                "did not return the expected value.")
    End Sub

    '''<summary>
    '''A test for ResolveType(ByVal String, ByVal Boolean)
    '''</summary>
    <DeploymentItem("Microsoft.VisualStudio.Editors.dll"), _
     TestMethod()> _
    Public Sub ResolveTypeTest_String()
        Dim VsHierarchy As IVsHierarchy = New Mockisar.MockIVsHierarchy

        Dim typeResolutionService As ITypeResolutionService = New Mockisar.MockITypeResolutionService(True, GetType(String))

        Dim target As Object = Microsoft_VisualStudio_Editors_SettingsDesigner_SettingsTypeCacheAccessor.CreatePrivate(VsHierarchy, 0, typeResolutionService, True)

        Dim accessor As Microsoft_VisualStudio_Editors_SettingsDesigner_SettingsTypeCacheAccessor = New Microsoft_VisualStudio_Editors_SettingsDesigner_SettingsTypeCacheAccessor(target)

        Dim persistedSettingTypeName As String = "System.String"

        Dim caseSensitive As Boolean = True

        Dim expected As Type = GetType(System.String)
        Dim actual As Type

        actual = accessor.ResolveType(persistedSettingTypeName, caseSensitive)

        Assert.AreEqual(expected, actual, "Microsoft.VisualStudio.Editors.SettingsDesigner.SettingsTypeCache.TypeResolutionC" & _
                "omponent.ResolveType did not return the expected value.")
    End Sub

    '''<summary>
    '''A test for ResolveType(ByVal String, ByVal Boolean)
    '''</summary>
    <DeploymentItem("Microsoft.VisualStudio.Editors.dll"), _
     TestMethod()> _
    Public Sub ResolveTypeTest_UnknownType()
        Dim VsHierarchy As IVsHierarchy = New Mockisar.MockIVsHierarchy

        Dim typeResolutionService As ITypeResolutionService = New Mockisar.MockITypeResolutionService(False)

        Dim target As Object = Microsoft_VisualStudio_Editors_SettingsDesigner_SettingsTypeCacheAccessor.CreatePrivate(VsHierarchy, 0, typeResolutionService, True)

        Dim accessor As Microsoft_VisualStudio_Editors_SettingsDesigner_SettingsTypeCacheAccessor = New Microsoft_VisualStudio_Editors_SettingsDesigner_SettingsTypeCacheAccessor(target)

        Dim persistedSettingTypeName As String = "This type really doesn't exist"

        Dim caseSensitive As Boolean = True

        Dim expected As Type = Nothing
        Dim actual As Type

        actual = accessor.ResolveType(persistedSettingTypeName, caseSensitive)

        Assert.AreEqual(expected, actual, "Microsoft.VisualStudio.Editors.SettingsDesigner.SettingsTypeCache.TypeResolutionC" & _
                "omponent.ResolveType did not return the expected value.")
    End Sub

    '''<summary>
    '''A test for ResolveType(ByVal String, ByVal Boolean)
    '''</summary>
    <DeploymentItem("Microsoft.VisualStudio.Editors.dll"), _
     TestMethod()> _
    Public Sub ResolveTypeTest_WebServiceURL()
        Dim VsHierarchy As IVsHierarchy = New Mockisar.MockIVsHierarchy

        Dim typeResolutionService As ITypeResolutionService = New Mockisar.MockITypeResolutionService(False)

        Dim target As Object = Microsoft_VisualStudio_Editors_SettingsDesigner_SettingsTypeCacheAccessor.CreatePrivate(VsHierarchy, 0, typeResolutionService, True)

        Dim accessor As Microsoft_VisualStudio_Editors_SettingsDesigner_SettingsTypeCacheAccessor = New Microsoft_VisualStudio_Editors_SettingsDesigner_SettingsTypeCacheAccessor(target)

        Dim persistedSettingTypeName As String = "(Web Service URL)"

        Dim caseSensitive As Boolean = True

        Dim expected As Type = GetType(System.String)
        Dim actual As Type

        actual = accessor.ResolveType(persistedSettingTypeName, caseSensitive)

        Assert.AreEqual(expected, actual, "Microsoft.VisualStudio.Editors.SettingsDesigner.SettingsTypeCache.TypeResolutionC" & _
                "omponent.ResolveType did not return the expected value.")
    End Sub

    '''<summary>
    '''A test for ResolveType(ByVal String, ByVal Boolean)
    '''</summary>
    <DeploymentItem("Microsoft.VisualStudio.Editors.dll"), _
     TestMethod()> _
    Public Sub ResolveTypeTest_ConnectionString()
        Dim VsHierarchy As IVsHierarchy = New Mockisar.MockIVsHierarchy

        Dim typeResolutionService As ITypeResolutionService = New Mockisar.MockITypeResolutionService(False)

        Dim target As Object = Microsoft_VisualStudio_Editors_SettingsDesigner_SettingsTypeCacheAccessor.CreatePrivate(VsHierarchy, 0, typeResolutionService, True)

        Dim accessor As Microsoft_VisualStudio_Editors_SettingsDesigner_SettingsTypeCacheAccessor = New Microsoft_VisualStudio_Editors_SettingsDesigner_SettingsTypeCacheAccessor(target)

        Dim persistedSettingTypeName As String = "(Connection string)"

        Dim caseSensitive As Boolean = True

        Dim expected As Type = GetType(Microsoft.VSDesigner.VSDesignerPackage.SerializableConnectionString)
        Dim actual As Type

        actual = accessor.ResolveType(persistedSettingTypeName, caseSensitive)

        Assert.AreEqual(expected, actual, "Microsoft.VisualStudio.Editors.SettingsDesigner.SettingsTypeCache.TypeResolutionC" & _
                "omponent.ResolveType did not return the expected value.")
    End Sub


    '''<summary>
    '''A test for GetWellKnownTypes()
    '''</summary>
    <DeploymentItem("Microsoft.VisualStudio.Editors.dll"), _
     TestMethod()> _
    Public Sub GetWellKnownTypesTest()
        Dim VsHierarchy As IVsHierarchy = New Mockisar.MockIVsHierarchy

        Dim typeResolutionService As ITypeResolutionService = New Mockisar.MockITypeResolutionService(False)

        Dim target As Object = Microsoft_VisualStudio_Editors_SettingsDesigner_SettingsTypeCacheAccessor.CreatePrivate(VsHierarchy, 0, typeResolutionService, True)

        Dim accessor As Microsoft_VisualStudio_Editors_SettingsDesigner_SettingsTypeCacheAccessor = New Microsoft_VisualStudio_Editors_SettingsDesigner_SettingsTypeCacheAccessor(target)

        Dim actual() As Type

        actual = accessor.GetWellKnownTypes

        Assert.AreEqual(actual.Length, 22, "Microsoft.VisualStudio.Editors.SettingsDesigner.WellKnownSettingsTypeService.GetW" & _
                "ellKnownTypes did not return the expected value.")
    End Sub

    '''<summary>
    '''A test for IsWellKnownType(ByVal System.Type)
    '''</summary>
    <DeploymentItem("Microsoft.VisualStudio.Editors.dll"), _
     TestMethod()> _
    Public Sub IsWellKnownTypeTest_IsWellKnown()
        Dim VsHierarchy As IVsHierarchy = New Mockisar.MockIVsHierarchy

        Dim typeResolutionService As ITypeResolutionService = New Mockisar.MockITypeResolutionService(False)

        Dim target As Object = Microsoft_VisualStudio_Editors_SettingsDesigner_SettingsTypeCacheAccessor.CreatePrivate(VsHierarchy, 0, typeResolutionService, True)

        Dim accessor As Microsoft_VisualStudio_Editors_SettingsDesigner_SettingsTypeCacheAccessor = New Microsoft_VisualStudio_Editors_SettingsDesigner_SettingsTypeCacheAccessor(target)

        Dim type As Type = GetType(String)

        Dim expected As Boolean = True
        Dim actual As Boolean

        actual = accessor.IsWellKnownType(type)

        Assert.AreEqual(expected, actual, "Microsoft.VisualStudio.Editors.SettingsDesigner.WellKnownSettingsTypeService.IsWe" & _
                "llKnownType did not return the expected value.")
    End Sub


    '''<summary>
    '''A test for IsWellKnownType(ByVal System.Type)
    '''</summary>
    <DeploymentItem("Microsoft.VisualStudio.Editors.dll"), _
     TestMethod()> _
    Public Sub IsWellKnownTypeTest_IsNotWellKnown()
        Dim VsHierarchy As IVsHierarchy = New Mockisar.MockIVsHierarchy

        Dim typeResolutionService As ITypeResolutionService = New Mockisar.MockITypeResolutionService(False)

        Dim target As Object = Microsoft_VisualStudio_Editors_SettingsDesigner_SettingsTypeCacheAccessor.CreatePrivate(VsHierarchy, 0, typeResolutionService, True)

        Dim accessor As Microsoft_VisualStudio_Editors_SettingsDesigner_SettingsTypeCacheAccessor = New Microsoft_VisualStudio_Editors_SettingsDesigner_SettingsTypeCacheAccessor(target)

        Dim type As Type = GetType(TestClasses.XmlSerializableTestClass)

        Dim expected As Boolean = False
        Dim actual As Boolean

        actual = accessor.IsWellKnownType(type)

        Assert.AreEqual(expected, actual, "Microsoft.VisualStudio.Editors.SettingsDesigner.WellKnownSettingsTypeService.IsWe" & _
                "llKnownType did not return the expected value.")
    End Sub
End Class




