' Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.

'The following code was generated by Microsoft Visual Studio 2005.
'The test owner should check each test for validity.
Imports Microsoft.VisualStudio.TestTools.UnitTesting
Imports System
Imports System.Text
Imports System.Collections.Generic
Imports SettingsDesignerUnitTests





'''<summary>
'''This is a test class for Microsoft.VisualStudio.Editors.SettingsDesigner.SettingTypeNameResolutionService and is intended
'''to contain all Microsoft.VisualStudio.Editors.SettingsDesigner.SettingTypeNameResolutionService Unit Tests
'''</summary>
<TestClass()> _
Public Class SettingTypeNameResolutionServiceTest


    Private testContextInstance As TestContext

    '''<summary>
    '''Gets or sets the test context which provides
    '''information about and functionality for the current test run.
    '''</summary>
    Public Property TestContext() As TestContext
        Get
            Return testContextInstance
        End Get
        Set(ByVal value As TestContext)
            testContextInstance = value
        End Set
    End Property
#Region "Additional test attributes"
    '
    'You can use the following additional attributes as you write your tests:
    '
    'Use ClassInitialize to run code before running the first test in the class
    '
    '<ClassInitialize()>  _
    'Public Shared Sub MyClassInitialize(ByVal testContext As TestContext)
    'End Sub
    '
    'Use ClassCleanup to run code after all tests in a class have run
    '
    '<ClassCleanup()>  _
    'Public Shared Sub MyClassCleanup()
    'End Sub
    '
    'Use TestInitialize to run code before running each test
    '
    '<TestInitialize()>  _
    'Public Sub MyTestInitialize()
    'End Sub
    '
    'Use TestCleanup to run code after each test has run
    '
    '<TestCleanup()>  _
    'Public Sub MyTestCleanup()
    'End Sub
    '
#End Region



    '''<summary>
    '''A test for AddEntry(ByVal String, ByVal String)
    '''</summary>
    <DeploymentItem("Microsoft.VisualStudio.Editors.dll"), _
     TestMethod()> _
    Public Sub AddEntryTestVB()
        Dim languageGuid As String = EnvDTE.CodeModelLanguageConstants.vsCMLanguageVB

        Dim caseSensitive As Boolean = False

        Dim target As Object = Microsoft_VisualStudio_Editors_SettingsDesigner_SettingTypeNameResolutionServiceAccessor.CreatePrivate(languageGuid, caseSensitive)

        Dim accessor As Microsoft_VisualStudio_Editors_SettingsDesigner_SettingTypeNameResolutionServiceAccessor = New Microsoft_VisualStudio_Editors_SettingsDesigner_SettingTypeNameResolutionServiceAccessor(target)

        Dim FxName As String = "SYSTEM.ONK"

        Dim languageSpecificName As String = "onk"

        Dim initialCount As Integer = accessor.m_FxTypeNameToLanguageSpecific.Count()
        accessor.AddEntry(FxName, languageSpecificName)

        Assert.AreEqual(accessor.m_FxTypeNameToLanguageSpecific.Count, initialCount + 1)
        Assert.AreEqual(accessor.m_LanguageSpecificToFxTypeName.Count, initialCount + 1)
        Assert.IsTrue(accessor.m_FxTypeNameToLanguageSpecific.ContainsKey(FxName.ToLower()))
        Assert.IsTrue(accessor.m_LanguageSpecificToFxTypeName.ContainsKey(languageSpecificName.ToLower()))
    End Sub

    '''<summary>
    '''A test for AddEntry(ByVal String, ByVal String)
    '''</summary>
    <DeploymentItem("Microsoft.VisualStudio.Editors.dll"), _
     TestMethod()> _
    Public Sub AddEntryTestCSharp()
        Dim languageGuid As String = EnvDTE.CodeModelLanguageConstants.vsCMLanguageCSharp

        Dim caseSensitive As Boolean = True

        Dim target As Object = Microsoft_VisualStudio_Editors_SettingsDesigner_SettingTypeNameResolutionServiceAccessor.CreatePrivate(languageGuid, caseSensitive)

        Dim accessor As Microsoft_VisualStudio_Editors_SettingsDesigner_SettingTypeNameResolutionServiceAccessor = New Microsoft_VisualStudio_Editors_SettingsDesigner_SettingTypeNameResolutionServiceAccessor(target)

        Dim FxName As String = "SyStEm.OnK"

        Dim languageSpecificName As String = "oNkIdOnK"

        Dim initialCount As Integer = accessor.m_FxTypeNameToLanguageSpecific.Count()
        accessor.AddEntry(FxName, languageSpecificName)

        Assert.AreEqual(accessor.m_FxTypeNameToLanguageSpecific.Count, initialCount + 1)
        Assert.AreEqual(accessor.m_LanguageSpecificToFxTypeName.Count, initialCount + 1)
        Assert.IsFalse(accessor.m_FxTypeNameToLanguageSpecific.ContainsKey(FxName.ToLower()))
        Assert.IsFalse(accessor.m_LanguageSpecificToFxTypeName.ContainsKey(languageSpecificName.ToLower()))
    End Sub

    '''<summary>
    '''A test for AddEntry(ByVal String, ByVal String)
    '''</summary>
    <DeploymentItem("Microsoft.VisualStudio.Editors.dll"), _
     TestMethod()> _
    Public Sub AddEntryTestNoLanguage()
        Dim languageGuid As String = ""

        Dim caseSensitive As Boolean = False

        Dim target As Object = Microsoft_VisualStudio_Editors_SettingsDesigner_SettingTypeNameResolutionServiceAccessor.CreatePrivate(languageGuid, caseSensitive)

        Dim accessor As Microsoft_VisualStudio_Editors_SettingsDesigner_SettingTypeNameResolutionServiceAccessor = New Microsoft_VisualStudio_Editors_SettingsDesigner_SettingTypeNameResolutionServiceAccessor(target)

        Dim FxName As String = "System.Int32"

        Dim languageSpecificName As String = ""

        accessor.AddEntry(FxName, languageSpecificName)

        Assert.AreEqual(accessor.m_FxTypeNameToLanguageSpecific.Count, 0)
        Assert.AreEqual(accessor.m_LanguageSpecificToFxTypeName.Count, 0)
    End Sub

    '''<summary>
    '''A test for IsCaseSensitive()
    '''</summary>
    <DeploymentItem("Microsoft.VisualStudio.Editors.dll"), _
     TestMethod()> _
    Public Sub IsCaseSensitiveTest()
        Dim languageGuid As String = EnvDTE.CodeModelLanguageConstants.vsCMLanguageVB

        Dim caseSensitive As Boolean = True

        Dim target As Object = Microsoft_VisualStudio_Editors_SettingsDesigner_SettingTypeNameResolutionServiceAccessor.CreatePrivate(languageGuid, caseSensitive)

        Dim val As Boolean = caseSensitive

        Dim accessor As Microsoft_VisualStudio_Editors_SettingsDesigner_SettingTypeNameResolutionServiceAccessor = New Microsoft_VisualStudio_Editors_SettingsDesigner_SettingTypeNameResolutionServiceAccessor(target)


        Assert.AreEqual(val, accessor.IsCaseSensitive, "Microsoft.VisualStudio.Editors.SettingsDesigner.SettingTypeNameResolutionService." & _
                "IsCaseSensitive was not set correctly.")
    End Sub


    '''<summary>
    '''A test for New(ByVal String, ByVal Boolean)
    '''</summary>
    <DeploymentItem("Microsoft.VisualStudio.Editors.dll"), _
     TestMethod()> _
    Public Sub ConstructorTest()
        Dim languageGuid As String = ""

        Dim caseSensitive As Boolean = True

        Dim target As Object = Microsoft_VisualStudio_Editors_SettingsDesigner_SettingTypeNameResolutionServiceAccessor.CreatePrivate(languageGuid, caseSensitive)
        Dim accessor As Microsoft_VisualStudio_Editors_SettingsDesigner_SettingTypeNameResolutionServiceAccessor = New Microsoft_VisualStudio_Editors_SettingsDesigner_SettingTypeNameResolutionServiceAccessor(target)

        Dim FxName As String = "System.Int32"

        Dim languageSpecificName As String = ""

        Assert.AreEqual(accessor.m_FxTypeNameToLanguageSpecific.Count, 0)
        Assert.AreEqual(accessor.m_LanguageSpecificToFxTypeName.Count, 0)
    End Sub


    '''<summary>
    '''A test for PersistedSettingTypeNameToFxTypeName(ByVal String)
    '''</summary>
    <DeploymentItem("Microsoft.VisualStudio.Editors.dll"), _
     TestMethod()> _
    Public Sub PersistedSettingTypeNameToFxTypeNameTest_String_VB()
        Dim languageGuid As String = EnvDTE.CodeModelLanguageConstants.vsCMLanguageVB

        Dim caseSensitive As Boolean = False

        Dim target As Object = Microsoft_VisualStudio_Editors_SettingsDesigner_SettingTypeNameResolutionServiceAccessor.CreatePrivate(languageGuid, caseSensitive)

        Dim accessor As Microsoft_VisualStudio_Editors_SettingsDesigner_SettingTypeNameResolutionServiceAccessor = New Microsoft_VisualStudio_Editors_SettingsDesigner_SettingTypeNameResolutionServiceAccessor(target)

        Dim typeName As String = "System.String"

        Dim expected As String = "System.String"
        Dim actual As String

        actual = accessor.PersistedSettingTypeNameToFxTypeName(typeName)

        Assert.AreEqual(expected, actual, "Microsoft.VisualStudio.Editors.SettingsDesigner.TypeNameResolutionComponent.Persi" & _
                "stedSettingTypeNameToFxTypeName did not return the expected value.")
    End Sub

    '''<summary>
    '''A test for PersistedSettingTypeNameToFxTypeName(ByVal String)
    '''</summary>
    <DeploymentItem("Microsoft.VisualStudio.Editors.dll"), _
     TestMethod()> _
    Public Sub PersistedSettingTypeNameToFxTypeNameTest_String_CSharp()
        Dim languageGuid As String = EnvDTE.CodeModelLanguageConstants.vsCMLanguageCSharp

        Dim caseSensitive As Boolean = True

        Dim target As Object = Microsoft_VisualStudio_Editors_SettingsDesigner_SettingTypeNameResolutionServiceAccessor.CreatePrivate(languageGuid, caseSensitive)

        Dim accessor As Microsoft_VisualStudio_Editors_SettingsDesigner_SettingTypeNameResolutionServiceAccessor = New Microsoft_VisualStudio_Editors_SettingsDesigner_SettingTypeNameResolutionServiceAccessor(target)

        Dim typeName As String = "System.String"

        Dim expected As String = "System.String"
        Dim actual As String

        actual = accessor.PersistedSettingTypeNameToFxTypeName(typeName)

        Assert.AreEqual(expected, actual, "Microsoft.VisualStudio.Editors.SettingsDesigner.TypeNameResolutionComponent.Persi" & _
                "stedSettingTypeNameToFxTypeName did not return the expected value.")
    End Sub

    '''<summary>
    '''A test for PersistedSettingTypeNameToFxTypeName(ByVal String)
    '''</summary>
    <DeploymentItem("Microsoft.VisualStudio.Editors.dll"), _
     TestMethod()> _
    Public Sub PersistedSettingTypeNameToFxTypeNameTest_ConnectionString()
        Dim languageGuid As String = EnvDTE.CodeModelLanguageConstants.vsCMLanguageCSharp

        Dim caseSensitive As Boolean = False

        Dim target As Object = Microsoft_VisualStudio_Editors_SettingsDesigner_SettingTypeNameResolutionServiceAccessor.CreatePrivate(languageGuid, caseSensitive)

        Dim accessor As Microsoft_VisualStudio_Editors_SettingsDesigner_SettingTypeNameResolutionServiceAccessor = New Microsoft_VisualStudio_Editors_SettingsDesigner_SettingTypeNameResolutionServiceAccessor(target)

        Dim typeName As String = "(Connection string)"

        Dim expected As String = "System.String"
        Dim actual As String

        actual = accessor.PersistedSettingTypeNameToFxTypeName(typeName)

        Assert.AreEqual(expected, actual, "Microsoft.VisualStudio.Editors.SettingsDesigner.TypeNameResolutionComponent.Persi" & _
                "stedSettingTypeNameToFxTypeName did not return the expected value.")
    End Sub

    '''<summary>
    '''A test for PersistedSettingTypeNameToFxTypeName(ByVal String)
    '''</summary>
    <DeploymentItem("Microsoft.VisualStudio.Editors.dll"), _
     TestMethod()> _
    Public Sub PersistedSettingTypeNameToFxTypeNameTest_WebService_URL()
        Dim languageGuid As String = EnvDTE.CodeModelLanguageConstants.vsCMLanguageCSharp

        Dim caseSensitive As Boolean = False

        Dim target As Object = Microsoft_VisualStudio_Editors_SettingsDesigner_SettingTypeNameResolutionServiceAccessor.CreatePrivate(languageGuid, caseSensitive)

        Dim accessor As Microsoft_VisualStudio_Editors_SettingsDesigner_SettingTypeNameResolutionServiceAccessor = New Microsoft_VisualStudio_Editors_SettingsDesigner_SettingTypeNameResolutionServiceAccessor(target)

        Dim typeName As String = "(Web Service URL)"

        Dim expected As String = "System.String"
        Dim actual As String

        actual = accessor.PersistedSettingTypeNameToFxTypeName(typeName)

        Assert.AreEqual(expected, actual, "Microsoft.VisualStudio.Editors.SettingsDesigner.TypeNameResolutionComponent.Persi" & _
                "stedSettingTypeNameToFxTypeName did not return the expected value.")
    End Sub


    '''<summary>
    '''A test for PersistedSettingTypeNameToTypeDisplayName(ByVal String)
    '''</summary>
    <DeploymentItem("Microsoft.VisualStudio.Editors.dll"), _
     TestMethod()> _
    Public Sub PersistedSettingTypeNameToTypeDisplayNameTest_ConnectionString()
        Dim languageGuid As String = ""

        Dim caseSensitive As Boolean = False

        Dim target As Object = Microsoft_VisualStudio_Editors_SettingsDesigner_SettingTypeNameResolutionServiceAccessor.CreatePrivate(languageGuid, caseSensitive)

        Dim accessor As Microsoft_VisualStudio_Editors_SettingsDesigner_SettingTypeNameResolutionServiceAccessor = New Microsoft_VisualStudio_Editors_SettingsDesigner_SettingTypeNameResolutionServiceAccessor(target)

        Dim typeName As String = "(Connection string)"

        Dim expected As String = typeName
        Dim actual As String

        actual = accessor.PersistedSettingTypeNameToTypeDisplayName(typeName)

        Assert.AreEqual(expected, actual, "Microsoft.VisualStudio.Editors.SettingsDesigner.TypeNameResolutionComponent.Persi" & _
                "stedSettingTypeNameToTypeDisplayName did not return the expected value.")
    End Sub

    '''<summary>
    '''A test for PersistedSettingTypeNameToTypeDisplayName(ByVal String)
    '''</summary>
    <DeploymentItem("Microsoft.VisualStudio.Editors.dll"), _
     TestMethod()> _
    Public Sub PersistedSettingTypeNameToTypeDisplayNameTest_WebServiceURL()
        Dim languageGuid As String = ""

        Dim caseSensitive As Boolean = False

        Dim target As Object = Microsoft_VisualStudio_Editors_SettingsDesigner_SettingTypeNameResolutionServiceAccessor.CreatePrivate(languageGuid, caseSensitive)

        Dim accessor As Microsoft_VisualStudio_Editors_SettingsDesigner_SettingTypeNameResolutionServiceAccessor = New Microsoft_VisualStudio_Editors_SettingsDesigner_SettingTypeNameResolutionServiceAccessor(target)

        Dim typeName As String = "(Web Service URL)"

        Dim expected As String = typeName
        Dim actual As String

        actual = accessor.PersistedSettingTypeNameToTypeDisplayName(typeName)

        Assert.AreEqual(expected, actual, "Microsoft.VisualStudio.Editors.SettingsDesigner.TypeNameResolutionComponent.Persi" & _
                "stedSettingTypeNameToTypeDisplayName did not return the expected value.")
    End Sub

    '''<summary>
    '''A test for PersistedSettingTypeNameToTypeDisplayName(ByVal String)
    '''</summary>
    <DeploymentItem("Microsoft.VisualStudio.Editors.dll"), _
     TestMethod()> _
    Public Sub PersistedSettingTypeNameToTypeDisplayNameTest_String_VB()
        Dim languageGuid As String = EnvDTE.CodeModelLanguageConstants.vsCMLanguageVB

        Dim caseSensitive As Boolean = False

        Dim target As Object = Microsoft_VisualStudio_Editors_SettingsDesigner_SettingTypeNameResolutionServiceAccessor.CreatePrivate(languageGuid, caseSensitive)

        Dim accessor As Microsoft_VisualStudio_Editors_SettingsDesigner_SettingTypeNameResolutionServiceAccessor = New Microsoft_VisualStudio_Editors_SettingsDesigner_SettingTypeNameResolutionServiceAccessor(target)

        Dim typeName As String = "System.String"

        Dim expected As String = "String"
        Dim actual As String

        actual = accessor.PersistedSettingTypeNameToTypeDisplayName(typeName)

        Assert.AreEqual(expected, actual, "Microsoft.VisualStudio.Editors.SettingsDesigner.TypeNameResolutionComponent.Persi" & _
                "stedSettingTypeNameToTypeDisplayName did not return the expected value.")
    End Sub

    '''<summary>
    '''A test for PersistedSettingTypeNameToTypeDisplayName(ByVal String)
    '''</summary>
    <DeploymentItem("Microsoft.VisualStudio.Editors.dll"), _
     TestMethod()> _
    Public Sub PersistedSettingTypeNameToTypeDisplayNameTest_String_CSharp()
        Dim languageGuid As String = EnvDTE.CodeModelLanguageConstants.vsCMLanguageCSharp

        Dim caseSensitive As Boolean = True

        Dim target As Object = Microsoft_VisualStudio_Editors_SettingsDesigner_SettingTypeNameResolutionServiceAccessor.CreatePrivate(languageGuid, caseSensitive)

        Dim accessor As Microsoft_VisualStudio_Editors_SettingsDesigner_SettingTypeNameResolutionServiceAccessor = New Microsoft_VisualStudio_Editors_SettingsDesigner_SettingTypeNameResolutionServiceAccessor(target)

        Dim typeName As String = "System.String"

        Dim expected As String = "string"
        Dim actual As String

        actual = accessor.PersistedSettingTypeNameToTypeDisplayName(typeName)

        Assert.AreEqual(expected, actual, "Microsoft.VisualStudio.Editors.SettingsDesigner.TypeNameResolutionComponent.Persi" & _
                "stedSettingTypeNameToTypeDisplayName did not return the expected value.")
    End Sub

    '''<summary>
    '''A test for PersistedSettingTypeNameToTypeDisplayName(ByVal String)
    '''</summary>
    <DeploymentItem("Microsoft.VisualStudio.Editors.dll"), _
     TestMethod()> _
    Public Sub PersistedSettingTypeNameToTypeDisplayNameTest_String_WrongCasing_CSharp()
        Dim languageGuid As String = EnvDTE.CodeModelLanguageConstants.vsCMLanguageCSharp

        Dim caseSensitive As Boolean = True

        Dim target As Object = Microsoft_VisualStudio_Editors_SettingsDesigner_SettingTypeNameResolutionServiceAccessor.CreatePrivate(languageGuid, caseSensitive)

        Dim accessor As Microsoft_VisualStudio_Editors_SettingsDesigner_SettingTypeNameResolutionServiceAccessor = New Microsoft_VisualStudio_Editors_SettingsDesigner_SettingTypeNameResolutionServiceAccessor(target)

        Dim typeName As String = "System.string"

        Dim expected As String = typeName
        Dim actual As String

        actual = accessor.PersistedSettingTypeNameToTypeDisplayName(typeName)

        Assert.AreEqual(expected, actual, "Microsoft.VisualStudio.Editors.SettingsDesigner.TypeNameResolutionComponent.Persi" & _
                "stedSettingTypeNameToTypeDisplayName did not return the expected value.")
    End Sub

    '''<summary>
    '''A test for TypeDisplayNameToPersistedSettingTypeName(ByVal String)
    '''</summary>
    <DeploymentItem("Microsoft.VisualStudio.Editors.dll"), _
     TestMethod()> _
    Public Sub TypeDisplayNameToPersistedSettingTypeNameTest_VB_Integer()
        Dim languageGuid As String = EnvDTE.CodeModelLanguageConstants.vsCMLanguageVB

        Dim caseSensitive As Boolean = False

        Dim target As Object = Microsoft_VisualStudio_Editors_SettingsDesigner_SettingTypeNameResolutionServiceAccessor.CreatePrivate(languageGuid, caseSensitive)

        Dim accessor As Microsoft_VisualStudio_Editors_SettingsDesigner_SettingTypeNameResolutionServiceAccessor = New Microsoft_VisualStudio_Editors_SettingsDesigner_SettingTypeNameResolutionServiceAccessor(target)

        Dim typeName As String = "Integer"

        Dim expected As String = "System.Int32"
        Dim actual As String

        actual = accessor.TypeDisplayNameToPersistedSettingTypeName(typeName)

        Assert.AreEqual(expected, actual, "Microsoft.VisualStudio.Editors.SettingsDesigner.TypeNameResolutionComponent.TypeD" & _
                "isplayNameToPersistedSettingTypeName did not return the expected value.")
    End Sub

    '''<summary>
    '''A test for TypeDisplayNameToPersistedSettingTypeName(ByVal String)
    '''</summary>
    <DeploymentItem("Microsoft.VisualStudio.Editors.dll"), _
     TestMethod()> _
    Public Sub TypeDisplayNameToPersistedSettingTypeNameTest_CSharp_WrongCasing_Integer()
        Dim languageGuid As String = EnvDTE.CodeModelLanguageConstants.vsCMLanguageCSharp

        Dim caseSensitive As Boolean = True

        Dim target As Object = Microsoft_VisualStudio_Editors_SettingsDesigner_SettingTypeNameResolutionServiceAccessor.CreatePrivate(languageGuid, caseSensitive)

        Dim accessor As Microsoft_VisualStudio_Editors_SettingsDesigner_SettingTypeNameResolutionServiceAccessor = New Microsoft_VisualStudio_Editors_SettingsDesigner_SettingTypeNameResolutionServiceAccessor(target)

        Dim typeName As String = "Int"

        Dim expected As String = "Int"
        Dim actual As String

        actual = accessor.TypeDisplayNameToPersistedSettingTypeName(typeName)

        Assert.AreEqual(expected, actual, "Microsoft.VisualStudio.Editors.SettingsDesigner.TypeNameResolutionComponent.TypeD" & _
                "isplayNameToPersistedSettingTypeName did not return the expected value.")
    End Sub

    '''<summary>
    '''A test for TypeDisplayNameToPersistedSettingTypeName(ByVal String)
    '''</summary>
    <DeploymentItem("Microsoft.VisualStudio.Editors.dll"), _
     TestMethod()> _
    Public Sub TypeDisplayNameToPersistedSettingTypeNameTest_ConnectionString()
        Dim languageGuid As String = EnvDTE.CodeModelLanguageConstants.vsCMLanguageVB

        Dim caseSensitive As Boolean = False

        Dim target As Object = Microsoft_VisualStudio_Editors_SettingsDesigner_SettingTypeNameResolutionServiceAccessor.CreatePrivate(languageGuid, caseSensitive)

        Dim accessor As Microsoft_VisualStudio_Editors_SettingsDesigner_SettingTypeNameResolutionServiceAccessor = New Microsoft_VisualStudio_Editors_SettingsDesigner_SettingTypeNameResolutionServiceAccessor(target)

        Dim typeName As String = "(Connection string)"

        Dim expected As String = typeName
        Dim actual As String

        actual = accessor.TypeDisplayNameToPersistedSettingTypeName(typeName)

        Assert.AreEqual(expected, actual, "Microsoft.VisualStudio.Editors.SettingsDesigner.TypeNameResolutionComponent.TypeD" & _
                "isplayNameToPersistedSettingTypeName did not return the expected value.")
    End Sub

    '''<summary>
    '''A test for TypeDisplayNameToPersistedSettingTypeName(ByVal String)
    '''</summary>
    <DeploymentItem("Microsoft.VisualStudio.Editors.dll"), _
     TestMethod()> _
    Public Sub TypeDisplayNameToPersistedSettingTypeNameTest_WebServiceURL()
        Dim languageGuid As String = EnvDTE.CodeModelLanguageConstants.vsCMLanguageVB

        Dim caseSensitive As Boolean = False

        Dim target As Object = Microsoft_VisualStudio_Editors_SettingsDesigner_SettingTypeNameResolutionServiceAccessor.CreatePrivate(languageGuid, caseSensitive)

        Dim accessor As Microsoft_VisualStudio_Editors_SettingsDesigner_SettingTypeNameResolutionServiceAccessor = New Microsoft_VisualStudio_Editors_SettingsDesigner_SettingTypeNameResolutionServiceAccessor(target)

        Dim typeName As String = "(Web Service URL)"

        Dim expected As String = typeName
        Dim actual As String

        actual = accessor.TypeDisplayNameToPersistedSettingTypeName(typeName)

        Assert.AreEqual(expected, actual, "Microsoft.VisualStudio.Editors.SettingsDesigner.TypeNameResolutionComponent.TypeD" & _
                "isplayNameToPersistedSettingTypeName did not return the expected value.")
    End Sub



End Class
