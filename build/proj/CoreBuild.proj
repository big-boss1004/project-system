<!-- Copyright (c)  Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information. -->
<Project DefaultTargets="Execute">

  <Import Project="..\import\Versions.props"/>
  <Import Project="..\import\NuGet.props"/>
  <Import Project="..\import\RepoLayout.props" />

  <!--
  
  Required parameters:
    SolutionPath                    Path to the solution to build.
                                    
  Optional parameters:              
    Configuration                   Required. Build configuration: "Debug", "Release", etc.
    RepoRoot                        Required. Repository root, defaults to the directory containing the solution.
    
    VersionsPropsPath               Required. Versions.props path, defaults to $(RepoRoot)build\Versions.props.
                     
    CIBuild                         "true" when building on CI server
    Restore                         "true" to restore toolset and solution
    Build                           "true" to build solution
    Rebuild                         "true" to rebuild solution
    Deploy                          "true" to deploy assets (e.g. VSIXes)
    Test                            "true" to run tests
    IntegrationTest                 "true" to run integration tests
    PerformanceTest                 "true" to run performance tests
    Pack                            "true" to build NuGet packages and VS insertion manifests
    Sign                            "true" to sign built binaries
    SignType                        "real" to send binaries to signing service, "test" to only validate signing configuration.
    SignToolDataPath                Required. SignToolData.json path.
  -->

  <!--
    Default values. 
  -->
  <PropertyGroup>
    <_NormalizedRepoRoot>$([System.IO.Path]::GetFullPath('$(RepoRoot)'))</_NormalizedRepoRoot>
  </PropertyGroup>

  <PropertyGroup>
    <RealSign>false</RealSign>
    <RealSign Condition="'$(SignType)' == 'real'">true</RealSign>
  </PropertyGroup>

  <Target Name="Execute">
    <ItemGroup>
      <_SolutionBuildTargets Include="Rebuild" Condition="'$(Rebuild)' == 'true'" />
      <_SolutionBuildTargets Include="Build" Condition="'$(Build)' == 'true' and '$(Rebuild)' != 'true'" />
      <!-- Deploy target is set up to chain after Build so that F5 in VS works. -->
      <_SolutionBuildTargets Include="Test" Condition="'$(Test)' == 'true'" />
      <_SolutionBuildTargets Include="IntegrationTest" Condition="'$(IntegrationTest)' == 'true'" />
      <_SolutionBuildTargets Include="PerformanceTest" Condition="'$(PerformanceTest)' == 'true'" />
      <_SolutionBuildTargets Include="Pack" Condition="'$(Pack)' == 'true'" />
    </ItemGroup>

    <ItemGroup>
      <_CommonProps Include="Configuration=$(Configuration)"/>
      <_CommonProps Include="CIBuild=$(CIBuild)"/>
      <_CommonProps Include="RepoRoot=$(_NormalizedRepoRoot)"/>
      <_CommonProps Include="VersionsPropsPath=$(VersionsPropsPath)"/>
    </ItemGroup>

    <ItemGroup>
      <_RestoreToolsProps Include="@(_CommonProps)"/>
      <_RestoreToolsProps Include="BaseIntermediateOutputPath=$(ArtifactsToolsetDir)Common"/>
      <_RestoreToolsProps Include="ExcludeRestorePackageImports=true"/>
    </ItemGroup>

    <ItemGroup>
      <_SolutionBuildProps Include="@(_CommonProps)"/>
      <_SolutionBuildProps Include="__DeployProjectOutput=$(Deploy)" Condition="'$(Deploy)' != ''"/>
    </ItemGroup>

    <!--
      Run solution restore separately from the other targets, in a different build phase.
      Since restore brings in new .props and .targets files we need to rerun evaluation.
      
      Note: msbuild caches the metaproject for the solution (see https://github.com/Microsoft/msbuild/issues/1695)
      We invalidate the cache by changing the value of __BuildPhase property.
    -->
    <MSBuild Projects="$(SolutionPath)"
             Properties="@(_SolutionBuildProps);__BuildPhase=SolutionRestore"
             Targets="Restore"
             BuildInParallel="true"
             Condition="'$(Restore)' == 'true'"/>

    <!--
      Build solution.
    -->
    <MSBuild Projects="$(SolutionPath)"
             Properties="@(_SolutionBuildProps);__BuildPhase=SolutionBuild"
             Targets="@(_SolutionBuildTargets)"
             BuildInParallel="true"
             Condition="'@(_SolutionBuildTargets)' != ''" />

    <!--
      Sign artifacts.
    -->
    <MSBuild Projects="Sign.proj"
             Properties="@(_CommonProps);RealSign=$(RealSign);ConfigFile=$(SignToolDataPath)"
             Targets="Sign"
             Condition="'$(Sign)' == 'true'"/>

    <!--
      Since multiple projects may contribute to a single insertion component
      we need to package them in a separate phase.
      
      TODO: the sign tool needs to support vsman files:      
      Insertion manifests (vsman files) contain hashes of the referenced VSIXes.
      These need to be calculated using signed VSIXes.
      Hence we need to run this task after both signing.
    -->
    <MSBuild Projects="$(NuGetPackageRoot)RoslynTools.RepoToolset\$(RoslynToolsRepoToolsetVersion)\tools\VisualStudio.Insertion.proj"
             Properties="@(_CommonProps)"
             Targets="Pack"
             Condition="'$(Pack)' == 'true'"/>

  </Target>
</Project>
