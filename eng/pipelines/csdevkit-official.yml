# Licensed to the .NET Foundation under one or more agreements. The .NET Foundation licenses this file to you under the MIT license. See the LICENSE.md file in the project root for more information.

# Name: dotnet-project-system-Trusted
# URL: https://dev.azure.com/devdiv/DevDiv/_build?definitionId=17625

###################################################################################################################################################################
# PIPELINE METADATA
###################################################################################################################################################################

# Activates the pipeline after a PR is merged.
# See: https://docs.microsoft.com/azure/devops/pipelines/yaml-schema/trigger?view=azure-pipelines#examples
trigger:
  branches:
    include:
    - main

# Disable PR builds for this pipeline.
# See: https://docs.microsoft.com/azure/devops/pipelines/yaml-schema/pr?view=azure-pipelines#examples
pr: none

resources:
  repositories:
  # This repo is used to create the insertion PR into the vs-green repo.
  - repository: VSCodeExtensionRepo
    type: git
    name: vs-green

pool:
  # Agent Queue: https://devdiv.visualstudio.com/DevDiv/_settings/agentqueues?queueId=3123&view=jobs
  name: VSEngSS-MicroBuild2022-1ES
  # Demands Docs: https://docs.microsoft.com/azure/devops/pipelines/process/demands?view=azure-devops&tabs=yaml#manually-entered-demands
  demands: Cmd

variables:
  # The configuration for the build is used throughout the various pipelines as the file paths for output contain the build configuration as a folder name.
  BuildConfiguration: Release
  # https://docs.microsoft.com/dotnet/core/tools/dotnet-environment-variables#dotnet_skip_first_time_experience
  DOTNET_SKIP_FIRST_TIME_EXPERIENCE: true
  # https://docs.microsoft.com/dotnet/core/tools/dotnet-environment-variables#dotnet_nologo
  DOTNET_NOLOGO: true
  # https://devdiv.visualstudio.com/DevDiv/_wiki/wikis/DevDiv.wiki/26284/Enabling-SBOM-For-Your-Component-Insertion-into-VS?anchor=1.-add-the-%27manifest-generator-task%27-to-your-pipeline
  Packaging.EnableSBOMSigning: true
  # Opt out of automatically injecting Codesign Validation into the pipeline.
  # See: https://aka.ms/gdn-injection
  runCodesignValidationInjection: false
  # Suspend enforcement of NuGet Single Feed Policy. See:
  # - https://aka.ms/nugetmultifeed
  # - https://docs.opensource.microsoft.com/tools/nuget_security_analysis/nuget_security_analysis/
  # - https://docs.opensource.microsoft.com/tools/cg/how-to/nuget-multifeed-configuration/
  # - https://onebranch.visualstudio.com/OneBranch/_wiki/wikis/OneBranch.wiki/5205/TSG-Build-Broken-Due-to-Using-Multiple-Feeds?anchor=setting-nugetsecurityanalysiswarninglevel-in-cdp
  NugetSecurityAnalysisWarningLevel: none
  # Allows CodeQL to run on our Build job.
  # https://eng.ms/docs/cloud-ai-platform/devdiv/one-engineering-system-1es/1es-docs/codeql/configuring-codeql3000-ado-pipelines
  # Note: June 5th, 2023: Disable CodeQL as we suspect it is causing our test runs to fail.
  Codeql.Enabled: false
  # Default to skipping auto-injection for CodeQL. It is not skipped in the Build job only.
  # https://eng.ms/docs/cloud-ai-platform/devdiv/one-engineering-system-1es/1es-docs/codeql/configuring-codeql3000-ado-pipelines#monolithic-repos-and-multistage-pipelines
  Codeql.SkipTaskAutoInjection: true
  # Sets the fetch depth to no longer be a shallow clone. Nerdbank.GitVersioning requires a non-shallow clone.
  # See:
  # - https://github.com/dotnet/Nerdbank.GitVersioning/issues/423
  # - https://github.com/dotnet/Nerdbank.GitVersioning/issues/92
  # Variable reference: https://learn.microsoft.com/en-us/azure/devops/pipelines/repos/pipeline-options-for-git?view=azure-devops&tabs=yaml#shallow-fetch
  Agent.Source.Git.ShallowFetchDepth: 0

parameters:
- name: CreateInsertion
  displayName: Create vs-green Insertion PR
  type: boolean
  default: false
- name: InsertionVSGreenBranch
  displayName: vs-green Insertion Branch Name
  type: string
  default: main
# Useful when testing pipeline changes and running compliance is not necessary.
- name: SkipCompliance
  displayName: Skip Compliance Validation
  type: boolean
  default: false
# This should only be enabled if we need to create AzDO work items based on Compliance failures.
- name: UploadTSAResults
  displayName: Create Compliance Work Items
  type: boolean
  default: false

###################################################################################################################################################################
# STAGES
###################################################################################################################################################################

stages:
- stage: Build
  displayName: Build
  variables:
    # Only used for tracking purposes in MicroBuild tasks.
    # See: https://devdiv.visualstudio.com/DevDiv/_wiki/wikis/DevDiv.wiki/650/MicroBuild-Signing?anchor=high-level-steps-to-enable-signing
    TeamName: DotNet-Project-System
    # Auto-injects the CodeQL task.
    # https://eng.ms/docs/cloud-ai-platform/devdiv/one-engineering-system-1es/1es-docs/codeql/configuring-codeql3000-ado-pipelines#monolithic-repos-and-multistage-pipelines
    Codeql.SkipTaskAutoInjection: false
  jobs:
  - template: templates/build-csdevkit-official-release.yml

# Skip this stage only when specifically requested (via SkipCompliance).
- ${{ if eq(parameters.SkipCompliance, false) }}:
  - stage: Compliance
    displayName: Compliance
    dependsOn: Build
    variables:
    - name: UploadTSAResults
      value: ${{ parameters.UploadTSAResults }}
    # Gets the VisualStudioMinimumVersion variable produced by the Build pipeline.
    # This value is used in the analyze-api.yml template.
    - name: VisualStudioMinimumVersion
      value: $[ stageDependencies.Build.BuildCoreOfficialRelease.outputs['SetVisualStudioMinimumVersionVariable.VisualStudioMinimumVersion'] ]
    # https://devdiv.visualstudio.com/DevDiv/_library?itemType=VariableGroups&view=VariableGroupView&variableGroupId=434&path=DotNet-Project-System
    # Variables used:
    # - ApiScanConnectionString
    - group: DotNet-Project-System
    jobs:
    - template: templates/analyze-compliance.yml
    - template: templates/analyze-api.yml

- ${{ if eq(parameters.CreateInsertion, true) }}:
  - stage: Insertion
    displayName: Insertion
    dependsOn:
    # The Build dependsOn is required for putting that stage's variables into the stageDependencies property bag (for PackageVersion).
    - Build
    # Only include the Compliance stage when it is not skipped.
    - ${{ if eq(parameters.SkipCompliance, false) }}:
      - Compliance
    variables:
      # Gets the NPMPackageVersion variable produced by the Build pipeline.
      NPMPackageVersion: $[ stageDependencies.Build.BuildCoreOfficialRelease.outputs['SetNPMPackageVersion.NPMPackageVersion'] ]
      # This variable is required by the component-insertion.yml template to insert the NPM package.
      # The name of this package matches name defined in the package.json.
      InsertNpmDependencies: '@microsoft/microsoft.visualstudio.projectsystem.managed@$(NPMPackageVersion)'
    jobs:
    - template: azure-pipelines/external/component-insertion.yml@VSCodeExtensionRepo
      parameters:
        sourceBranch: $(Build.SourceBranch)
        sourceCommit: $(Build.SourceVersion)
        runName: $(Build.BuildNumber)
        runID: $(Build.BuildId)
        pipelineID: $(System.DefinitionId)
        InsertTargetBranch: ${{ parameters.InsertionVSGreenBranch }}
        ComponentSubDir: $(Build.Repository.Name)