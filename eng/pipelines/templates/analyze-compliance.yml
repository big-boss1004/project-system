# Licensed to the .NET Foundation under one or more agreements. The .NET Foundation licenses this file to you under the MIT license. See the LICENSE.md file in the project root for more information.

jobs:
# Overview of tasks offered for security and compliance:
# https://eng.ms/docs/security-compliance-identity-and-management-scim/security/azure-security/cloudai-security-fundamentals-engineering/security-integration/guardian-wiki/sdl-azdo-extension/secure-development-tools-extension-for-azure-devops#tools
- job: AnalyzeCompliance
  displayName: Analyze Compliance
  timeoutInMinutes: 60
  pool:
    name: $(DefaultPoolName)
    demands: $(DefaultDemands)
  steps:

  ###################################################################################################################################################################
  # DOWNLOAD ARTIFACTS
  ###################################################################################################################################################################

  # Use a disabled, empty script to display the section header in the pipeline UI.
  - script:
    displayName: === Download Artifacts ===
    condition: false

  # Download the build artifacts from the Build job.
  - download: current
    displayName: Download Build Artifacts
    artifact: $(Build.BuildNumber)
    inputs:
      path: $(Build.SourcesDirectory)/artifacts/$(BuildConfiguration)

  ###################################################################################################################################################################
  # RUN ANALYSIS
  ###################################################################################################################################################################

  # Use a disabled, empty script to display the section header in the pipeline UI.
  - script:
    displayName: === Run Analysis ===
    condition: false

  # Verifies the files produced by the build are properly signed.
  - task: MicroBuildCodesignVerify@3
    displayName: Verify Signed Files
    inputs:
      TargetFolders: |
        $(Build.SourcesDirectory)/artifacts/$(BuildConfiguration)/packages
        $(Build.SourcesDirectory)/artifacts/$(BuildConfiguration)/VSSetup/Insertion
      # Filters out certain files (usually by extension) for Authenticode certificate verification.
      # File Format:
      #   Wildcards (* and ?) can be used and paths are relative to the TargetFolders locations.
      #   Format is one entry per line followed by a comma and then a comment as to why the entry is approved.
      ApprovalListPathForCerts: $(Build.SourcesDirectory)/eng/pipelines/configuration/AuthenticodeSigningFilter.txt
    # Make sure to continue running all of the tools, even if one fails.
    continueOnError: true

  # YAML inputs reference: https://eng.ms/docs/security-compliance-identity-and-management-scim/security/azure-security/cloudai-security-fundamentals-engineering/security-integration/guardian-wiki/sdl-azdo-extension/code-signing-validation-build-task#v1-preview
  - task: CodeSign@1
    displayName: Verify Package Signing
    inputs:
      Path: $(Build.SourcesDirectory)/artifacts/$(BuildConfiguration)/packages
      # OutputDirectory: 'outputdir'

  # YAML inputs reference: https://eng.ms/docs/security-compliance-identity-and-management-scim/security/azure-security/cloudai-security-fundamentals-engineering/security-integration/guardian-wiki/sdl-azdo-extension/code-signing-validation-build-task#v1-preview
  - task: CodeSign@1
    displayName: Verify Insertion Signing
    inputs:
      Path: $(Build.SourcesDirectory)/artifacts/$(BuildConfiguration)/VSSetup/Insertion
      # OutputDirectory: 'outputdir'

  # Scan for problematic terminology. Related documentation:
  # - https://microsoft.sharepoint.com/sites/globalreadiness/SitePages/PoliCheck.aspx
  # - https://policheck.microsoft.com/
  # Requires scanning both the source and the build artifacts: https://liquid.microsoft.com/Web/Object/Read/MS.GlobalReadiness/Requirements/01.01#Zapplicability
  # YAML inputs reference: https://eng.ms/docs/security-compliance-identity-and-management-scim/security/azure-security/cloudai-security-fundamentals-engineering/security-integration/guardian-wiki/sdl-azdo-extension/PoliCheck-build-task#v2
  - task: PoliCheck@2
    displayName: Run PoliCheck
    inputs:
      # F - Scan a particular file or folder (recursively)
      targetType: F
      targetArgument: $(Build.SourcesDirectory)
      # TODO: Consider moving this file.
      result: PoliCheck.xml
      # 1 - Enable scanning of comments
      optionsFC: 1
      # Scan for severity 1, 2, and 3 issues
      optionsSEV: '1|2|3'
    # Make sure to continue running all of the tools, even if one fails.
    continueOnError: true

  # Scan for credentials and other sensitive information. Related documentation:
  # - https://strikecommunity.azurewebsites.net/articles/4114/credential-scanner-overview.html
  # Even though it isn't explicitly stated, the source and the build artifacts.
  # YAML inputs reference: https://eng.ms/docs/security-compliance-identity-and-management-scim/security/azure-security/cloudai-security-fundamentals-engineering/security-integration/guardian-wiki/sdl-azdo-extension/credscan-azure-devops-build-task#v3-preview
  - task: CredScan@3
    displayName: Run CredScan
    inputs:
      # Output in PREFast format so TSAUpload can consume it.
      outputFormat: pre
    # Make sure to continue running all of the tools, even if one fails.
    continueOnError: true

  # TODO MOVE TO SEPARATE JOB

  # - task: CopyFiles@2
  #   # APIScan can take a long time, so here we copy (mostly) just the product binaries and related .pdbs
  #   # in an effort to limit what it needs to work on.
  #   displayName: Copy files for APIScan
  #   inputs:
  #     SourceFolder: '$(Build.SourcesDirectory)\artifacts\$(BuildConfiguration)\bin\Dlls'  # Limit to (mostly) product binaries
  #     Contents: |
  #       *.dll
  #       *.pdb
  #     TargetFolder: '$(Agent.TempDirectory)\APIScanFiles'
  #   continueOnError: true

  # - task: APIScan@2
  #   # Scan for the use of undocumented APIs.
  #   displayName: Run APIScan
  #   inputs:
  #     softwareFolder: '$(Agent.TempDirectory)\APIScanFiles' # Only examine the product binaries we previously copied.
  #     softwareName: 'Dotnet-Project-System'
  #     softwareVersionNum: '17.0'
  #     softwareBuildNum: '$(Build.BuildId)'
  #     symbolsFolder: 'SRV*http://symweb'
  #   env:
  #     AzureServicesAuthConnectionString: runAs=App;AppId=$(ApiScanClientId);TenantId=$(ApiScanTenant);AppKey=$(ApiScanSecret)
  #   continueOnError: true

  # Upload the output of the compliance tools to Trust Services Automation (TSA), and create Azure DevOps work items for failures.
  # YAML inputs reference: https://eng.ms/docs/cloud-ai-platform/developer-services/one-engineering-system-1es/1es-docs/trust-services-automation-tsa/tsa-upload-build-task#yaml-reference
  - task: TSAUpload@2
    displayName: Upload Results to TSA
    inputs:
      GdnPublishTsaOnboard: true
      # Configures the compliance tool results to process.
      # Configuration file format:
      # - https://eng.ms/docs/security-compliance-identity-and-management-scim/security/azure-security/cloudai-security-fundamentals-engineering/security-integration/guardian-wiki/microsoft-guardian/guardian-tsa#tsa-options-file
      # - https://dev.azure.com/securitytools/SecurityIntegration/_wiki/wikis/Guardian/1409/Guardian-TSA?anchor=tsa-options-file
      GdnPublishTsaConfigFile: $(Build.SourcesDirectory)/eng/pipelines/configuration/TSAConfig.gdntsa
      GdnPublishTsaExportedResultsPublishable: true
    # Make sure to continue running all of the tools, even if one fails.
    continueOnError: true

  # Publishes the results as artifacts to the Azure Pipeline.
  # YAML inputs reference: https://eng.ms/docs/security-compliance-identity-and-management-scim/security/azure-security/cloudai-security-fundamentals-engineering/security-integration/guardian-wiki/sdl-azdo-extension/publish-security-analysis-logs#v3
  - task: PublishSecurityAnalysisLogs@3
    displayName: Publish Compliance Artifacts
    inputs:
      ArtifactName: CodeAnalysisLogs
      ArtifactType: Container
      AllTools: true
      ToolLogsNotFoundAction: Standard
    condition: succeededOrFailed()