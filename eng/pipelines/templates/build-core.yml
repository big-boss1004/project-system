# Licensed to the .NET Foundation under one or more agreements. The .NET Foundation licenses this file to you under the MIT license. See the LICENSE.md file in the project root for more information.

jobs:
- job: BuildPullRequest_${{ parameters.BuildConfiguration }}
  displayName: ${{ parameters.BuildConfiguration }} Configuration
  timeoutInMinutes: 20
  variables:
    BuildConfiguration: ${{ parameters.BuildConfiguration }}
    ArtifactName: ${{ parameters.ArtifactName }}
  steps:

  ###################################################################################################################################################################
  # PLUGIN INSTALLATION
  ###################################################################################################################################################################

  # Use a disabled, empty script to display the section header in the pipeline UI.
  - script:
    displayName: === Plugin Installation ===
    condition: false

  # Necessary for signing the assemblies and packages.
  - task: MicroBuildSigningPlugin@4
    displayName: Install Signing Plugin
    inputs:
      # Build fails if this is set to 'test'.
      # See: https://github.com/dotnet/project-system/issues/7935
      signType: real
      esrpSigning: true

  # Gets the signconfig.xml from the MicroBuild Signing plugin and sets the retry interval to 45 seconds.
  # This reduces the calls to the signing API (potentially increasing signing speed) and reduces the pipeline log bloat when polling signing completion.
  - powershell: . '$(Build.SourcesDirectory)/eng/scripts/SetSigningRetryInterval.ps1' -signConfigPath ((Get-ChildItem -Path '$(Build.StagingDirectory)/MicroBuild/Plugins/*/build/signconfig.xml').FullName) -intervalInSeconds 45
    displayName: Set Signing Interval
    # This is not a necessary task for the build to be successful.
    continueOnError: true

  ###################################################################################################################################################################
  # BUILD REPOSITORY
  ###################################################################################################################################################################

  # Use a disabled, empty script to display the section header in the pipeline UI.
  - script:
    displayName: === Build Repository ===
    condition: false

  # Allows for accessing the internal AzDO feed (vs-impl-internal) for project restore via Azure Artifacts Credential Provider.
  # See: https://github.com/microsoft/artifacts-credprovider#automatic-usage
  # YAML reference: https://docs.microsoft.com/azure/devops/pipelines/tasks/package/nuget-authenticate?view=azure-devops
  - task: NuGetAuthenticate@1
    displayName: Authenticate NuGet

  # Runs the full build of the projects in the repository. See Build.proj for details.
  - script: $(Build.SourcesDirectory)/build.cmd /v:normal /p:Configuration=$(BuildConfiguration) /p:CIBuild=true
    displayName: Build All Projects

  ###################################################################################################################################################################
  # PUBLISH BUILD
  # Steps in this section should contain 'condition: succeededOrFailed()' since these artifacts can be used for analyzing build failures.
  # https://docs.microsoft.com/azure/devops/pipelines/process/tasks?view=azure-devops&tabs=yaml#task-control-options
  ###################################################################################################################################################################

  # Use a disabled, empty script to display the section header in the pipeline UI.
  - script:
    displayName: === Publish Build ===
    condition: false

  # Publishes the test results to the Azure Pipeline itself so they can be viewed in the UI.
  # This needs to be ran after the build, because if the build failed due to a test failure, the test results wouldn't be published.
  - task: PublishTestResults@2
    displayName: Publish Test Results
    inputs:
      testRunner: VSTest
      testResultsFiles: $(Build.SourcesDirectory)/artifacts/$(BuildConfiguration)/TestResults/*.trx
      testRunTitle: Unit Test Results
    condition: succeededOrFailed()

  # The .artifactignore file filters the artifacts published from a particular folder.
  # This must be present in the folder we want to publish and be named '.artifactignore'.
  # See: https://docs.microsoft.com/azure/devops/artifacts/reference/artifactignore?view=azure-devops
  - powershell: Copy-Item -Path '$(Build.SourcesDirectory)/eng/pipelines/configuration/build.artifactignore' -Destination '$(Build.SourcesDirectory)/artifacts/$(BuildConfiguration)/.artifactignore'
    displayName: Copy Build Artifact Filter
    condition: succeededOrFailed()

  # Publishes the artifacts folder contents to the Azure Pipeline for use in other jobs/stages.
  # This publish is filtered by the .artifactignore in the 'eng' folder. See that file for more details.
  - publish: $(Build.SourcesDirectory)/artifacts/$(BuildConfiguration)
    displayName: Publish Build Artifacts
    artifact: $(ArtifactName)
    condition: succeededOrFailed()