# Licensed to the .NET Foundation under one or more agreements. The .NET Foundation licenses this file to you under the MIT license. See the LICENSE.md file in the project root for more information.

jobs:
- job: BuildOfficialRelease
  displayName: Build Official Release
  timeoutInMinutes: 90
  pool:
    name: $(DefaultPoolName)
    demands: $(DefaultDemands)
  steps:

  ###################################################################################################################################################################
  # SBOM GENERATION
  # This process occurs above plugin installation so that the Src build does not perform signing.
  ###################################################################################################################################################################

  # Use a disabled, empty script to display the section header in the pipeline UI.
  - script:
    displayName: ==== SBOM Generation ====
    condition: false

  # Only the projects in the 'src' folder are necessary for generating the SBOM.
  - script: $(Build.SourcesDirectory)/build.cmd /v:normal /p:Configuration=$(BuildConfiguration) /p:CIBuild=true /p:Test=false /p:Pack=false /p:TestProjects=false /p:SetupProjects=false
    displayName: Build Src Projects

  # The binlog is set to Build.binlog by default when using build.cmd. We rename it so it isn't overridden by the full build.
  - powershell: Rename-Item -Path "$(Build.SourcesDirectory)/artifacts/$(BuildConfiguration)/log/Build.binlog" -NewName 'SrcBuild.binlog'
    displayName: Rename Src Binlog

  # This task both generates the SBOM files and marks the pipeline as compliant.
  # The SBOM files are needed prior to the full build, as the full build includes them within the .vsman insertion files as part of the SwixBuild (.vsmanproj) process.
  - task: ManifestGeneratorTask@0
    displayName: Generate SBOM
    inputs:
      BuildDropPath: $(Build.SourcesDirectory)/artifacts/$(BuildConfiguration)/bin/Dlls
      ManifestDirPath: $(Build.SourcesDirectory)/artifacts/$(BuildConfiguration)/bin

  ###################################################################################################################################################################
  # PLUGIN INSTALLATION
  ###################################################################################################################################################################

  # Use a disabled, empty script to display the section header in the pipeline UI.
  - script:
    displayName: ==== Plugin Installation ====
    condition: false

  # Necessary for signing the assemblies and packages.
  - task: MicroBuildSigningPlugin@4
    displayName: Install Signing Plugin
    inputs:
      signType: ${{ parameters.SignType }}
      esrpSigning: true

  # Gets the signconfig.xml from the MicroBuild Signing plugin and sets the retry interval to 60 seconds.
  # This reduces the calls to the signing API and pipeline log bloat.
  - powershell: . '$(Build.SourcesDirectory)/eng/scripts/SetSigningRetryInterval.ps1' -signConfigPath ((Get-ChildItem -Path '$(Build.StagingDirectory)/MicroBuild/Plugins/*/build/signconfig.xml').FullName) -intervalInSeconds 60
    displayName: Set Signing Interval
    continueOnError: true

  # Necessary for building the .swixproj (VSIX package) and .vsmanproj (VS Insertion) projects.
  - task: MicroBuildSwixPlugin@4
    displayName: Install Swix Plugin

  # This requires the OptimizationInputs via the 'Publish OptimizationInputs drop' step in the release pipeline.
  # To generate ProfilingInputs for the first time, set this input: ShouldSkipOptimize: true
  # See documentation here: https://devdiv.visualstudio.com/DevDiv/_wiki/wikis/DevDiv.wiki/2602/Build-With-Expired-(or-Without-Prior)-Optimization-Profiling-Data
  # This plugin will restore MicroBuild.Plugins.OptProf which is required to create ProfilingInputs data.
  # The projects include OptProf.targets which uses MicroBuild.Plugins.OptProf to run the target GenerateProfilingInputs on each project.
  - task: MicroBuildOptProfPlugin@6
    displayName: Install OptProf Plugin
    inputs:
      ProfilingInputsDropName: ProfilingInputs/$(System.TeamProject)/$(Build.Repository.Name)/$(Build.SourceBranchName)/$(Build.BuildId)
      OptimizationInputsLookupMethod: DropPrefix
      DropNamePrefix: OptimizationInputs/$(System.TeamProject)/$(Build.Repository.Name)
      AccessToken: $(System.AccessToken)
      feedSource: https://devdiv.pkgs.visualstudio.com/DefaultCollection/_packaging/MicroBuildToolset/nuget/v3/index.json
      ShouldSkipOptimize: ${{ parameters.SkipOptimize }}
      # This value determines how old the optimization data is allowed to be.
      # If the delta of the number of commits between the commit used for the last produced optimization data and the current commit is greater than this value,
      # this task will always fail. The only way to fix it is produce new optimization data.
      # A temporary fix is to increase this value. However, it may cause a perf regression since eventually, the optimization data will no longer be aligned with the actual source content in the repo.
      NumberCommitsToSearch: 100

  ###################################################################################################################################################################
  # BUILD REPOSITORY
  ###################################################################################################################################################################

  # Use a disabled, empty script to display the section header in the pipeline UI.
  - script:
    displayName: ==== Build Repository ====
    condition: false

  # Runs the full build of the projects in the repository. See Build.proj for details.
  - script: $(Build.SourcesDirectory)/build.cmd /v:normal /p:Configuration=$(BuildConfiguration) /p:CIBuild=true
    displayName: Build All Projects

  # TODO CONSIDER MOVING TO COMPLIANCE

  # Verifies the files produced by the build are properly signed.
  - task: MicroBuildCodesignVerify@3
    displayName: Verify Signed Files
    inputs:
      TargetFolders: |
        $(Build.SourcesDirectory)/artifacts/$(BuildConfiguration)/packages
        $(Build.SourcesDirectory)/artifacts/$(BuildConfiguration)/VSSetup/Insertion
      # Filters out certain files (usually by extension) in the provided file.
      ApprovalListPathForCerts: $(Build.SourcesDirectory)/eng/pipelines/no_authenticode.txt

  # This adds our source information to http://index (which is called Codex).
  # https://github.com/Ref12/Codex
  # This runs after the build because it needs:
  # - source files used in the build (including the generated ones in the obj directory)
  # - binaries (.dll) passed as references
  # - .binlog that ties it all together, describes what happened during the build, and where all the inputs are
  # Argument information can be found here:
  # - https://github.com/Ref12/Codex/blob/d759c4b44bad0f307ec33319278e62d70cf730f3/src/Codex.Automation.Workflow/Program.cs#L47
  # - https://github.com/Ref12/Codex/blob/d759c4b44bad0f307ec33319278e62d70cf730f3/src/Codex/CodexApplication.cs#L52
  - task: Ref12Analyze@0
    displayName: Publish Source to Codex
    inputs:
      workflowArguments: |
        /sourcesDirectory:$(Build.SourcesDirectory)
        /codexRepoUrl:$(Build.Repository.Uri)
        /repoName:$(Build.Repository.Name)
        /additionalCodexArguments:-bld
        /additionalCodexArguments:$(Build.SourcesDirectory)/artifacts/$(BuildConfiguration)/log
        /additionalCodexArguments:-noMsBuildLocator
    # This is a non-critical task, so don't fail the build if it fails.
    continueOnError: true

  ###################################################################################################################################################################
  # PUBLISH BUILD
  # Steps in this section should contain 'condition: succeededOrFailed()' since these artifacts can be used for analyzing build failures.
  ###################################################################################################################################################################

  # Use a disabled, empty script to display the section header in the pipeline UI.
  - script:
    displayName: ==== Publish Build ====
    condition: false

  # Publishes the test results to the Azure Pipeline itself so they can be viewed in the UI.
  # This needs to be ran after the build, because if the build failed due to a test failure, the test results wouldn't be published.
  - task: PublishTestResults@2
    displayName: Publish Test Results
    inputs:
      testRunner: XUnit
      testResultsFiles: $(Build.SourcesDirectory)/artifacts/$(BuildConfiguration)/TestResults/*.xml
      testRunTitle: Unit Test Results
    condition: succeededOrFailed()

  # The .artifactignore file filters the artifacts published from a particular folder.
  # This needs to be copied to the folder we want to publish.
  - task: CopyFiles@2
    displayName: Copy ArtifactIgnore File
    inputs:
      SourceFolder: $(Build.SourcesDirectory)/eng
      TargetFolder: $(Build.SourcesDirectory)/artifacts/$(BuildConfiguration)
      Contents: .artifactignore
    condition: succeededOrFailed()

  # Publishes the artifacts folder contents to the Azure Pipeline for use in other jobs/stages.
  # This publish is filtered by the .artifactignore in the 'eng' folder. See that file for more details.
  - publish: $(Build.SourcesDirectory)/artifacts/$(BuildConfiguration)
    displayName: Publish Build Artifacts
    # NOTE: Artifact name is required to be Build.BuildNumber.
    # The build-number named artifact is used for the RoslynInsertionTool to find the build for the VS Insertion PR.
    # Code here: https://github.com/dotnet/roslyn-tools/blob/1f64f56b4ea9a0c119bbe840c39b935acc60e4b8/src/RoslynInsertionTool/RoslynInsertionTool/RoslynInsertionTool.VisualStudioTeamServices.cs#L174
    artifact: $(Build.BuildNumber)
    condition: succeededOrFailed()

  # Publishes the staging folder contents to the Azure Pipeline for use in other jobs/stages.
  # The Build.StagingDirectory is used by certain plugin outputs, such as MicroBuild and OptProf.
  - publish: $(Build.StagingDirectory)
    displayName: Publish Staging Artifacts
    artifact: Staging
    condition: succeededOrFailed()