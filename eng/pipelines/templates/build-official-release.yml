# Licensed to the .NET Foundation under one or more agreements. The .NET Foundation licenses this file to you under the MIT license. See the LICENSE.md file in the project root for more information.

jobs:
- job: BuildOfficialRelease
  displayName: Build Official Release
  timeoutInMinutes: 90
  pool:
    name: $(DefaultPoolName)
    demands: $(DefaultDemands)
  steps:

  ###################################################################################################################################################################
  # SBOM GENERATION
  # This process occurs above plugin installation so that the Src build does not perform signing.
  ###################################################################################################################################################################

  # Only the projects in the 'src' folder are necessary for generating the SBOM.
  - script: $(Build.SourcesDirectory)\build.cmd /v:normal /p:Configuration=$(BuildConfiguration) /p:CIBuild=true /p:Test=false /p:Pack=false /p:TestProjects=false /p:SetupProjects=false
    displayName: Build Src for SBOM

  # The binlog is set to Build.binlog by default when using build.cmd. We rename it so it isn't overridden by the full build.
  - task: PowerShell@2
    displayName: Rename Build.binlog to SrcBuild.binlog
    inputs:
      targetType: inline
      script: Rename-Item -Path "$(Build.SourcesDirectory)\artifacts\$(BuildConfiguration)\log\Build.binlog" -NewName 'SrcBuild.binlog'

  # This task both generates the SBOM files and marks the pipeline as compliant.
  # The SBOM files are needed prior to the full build, as the full build includes them within the .vsman insertion files as part of the SwixBuild (.vsmanproj) process.
  - task: ManifestGeneratorTask@0
    displayName: Generate SBOM
    inputs:
      BuildDropPath: $(Build.SourcesDirectory)\artifacts\$(BuildConfiguration)\bin\Dlls
      ManifestDirPath: $(Build.SourcesDirectory)\artifacts\$(BuildConfiguration)\bin

  ###################################################################################################################################################################
  # PLUGIN INSTALLATION
  ###################################################################################################################################################################

  # Necessary for signing the assemblies and packages.
  - task: MicroBuildSigningPlugin@4
    displayName: Install Signing Plugin
    inputs:
      signType: ${{ parameters.SignType }}
      esrpSigning: true

  # Necessary for building the .swixproj (VSIX package) and .vsmanproj (VS Insertion) projects.
  - task: MicroBuildSwixPlugin@4
    displayName: Install Swix Plugin

  # This requires the OptimizationInputs via the 'Publish OptimizationInputs drop' step in the release pipeline.
  # To generate ProfilingInputs for the first time, set this input: ShouldSkipOptimize: true
  # See documentation here: https://devdiv.visualstudio.com/DevDiv/_wiki/wikis/DevDiv.wiki/2602/Build-With-Expired-(or-Without-Prior)-Optimization-Profiling-Data
  # This plugin will restore MicroBuild.Plugins.OptProf which is required to create ProfilingInputs data.
  # The projects include OptProf.targets which uses MicroBuild.Plugins.OptProf to run the target GenerateProfilingInputs on each project.
  - task: MicroBuildOptProfPlugin@6
    displayName: Install OptProf Plugin
    inputs:
      ProfilingInputsDropName: ProfilingInputs/$(System.TeamProject)/$(Build.Repository.Name)/$(Build.SourceBranchName)/$(Build.BuildId)
      OptimizationInputsLookupMethod: DropPrefix
      DropNamePrefix: OptimizationInputs/$(System.TeamProject)/$(Build.Repository.Name)
      AccessToken: $(System.AccessToken)
      feedSource: https://devdiv.pkgs.visualstudio.com/DefaultCollection/_packaging/MicroBuildToolset/nuget/v3/index.json
      ShouldSkipOptimize: ${{ parameters.SkipOptimize }}
      NumberCommitsToSearch: 100

  ###################################################################################################################################################################
  # BUILD REPOSITORY
  ###################################################################################################################################################################

  # Runs the full build of the projects in the repository. See Build.proj for details.
  - script: $(Build.SourcesDirectory)\build.cmd /v:normal /p:Configuration=$(BuildConfiguration) /p:CIBuild=true
    displayName: Build All Projects

  # Verifies the files produced by the build are properly signed.
  - task: MicroBuildCodesignVerify@3
    displayName: Verify Signed Files
    inputs:
      TargetFolders: |
        $(Build.SourcesDirectory)/artifacts/$(BuildConfiguration)/packages
        $(Build.SourcesDirectory)/artifacts/$(BuildConfiguration)/VSSetup/Insertion
      # Filters out certain files (usually by extension) in the provided file.
      ApprovalListPathForCerts: $(Build.SourcesDirectory)\eng\pipelines\no_authenticode.txt

  # This adds our source information to http://index (which is called Codex).
  # https://github.com/Ref12/Codex
  # This runs after the build because it needs:
  # - source files used in the build (including the generated ones in the obj directory)
  # - binaries (.dll) passed as references
  # - .binlog that ties it all together, describes what happened during the build, and where all the inputs are
  - task: Ref12Analyze@0
    displayName: Add Source Information to http://index
    inputs:
      workflowArguments: |
        /sourcesDirectory:$(Build.SourcesDirectory)
        /codexRepoUrl:$(Build.Repository.Uri)
        /repoName:$(Build.Repository.Name)
        /additionalCodexArguments:-bld
        /additionalCodexArguments:$(Build.SourcesDirectory)\artifacts\$(BuildConfiguration)\log
        /additionalCodexArguments:-noMsBuildLocator
    continueOnError: true

  # Publishes the test results to the Azure Pipeline itself so they can be viewed in the UI.
  - task: PublishTestResults@2
    displayName: Publish Test Results
    inputs:
      testRunner: XUnit
      testResultsFiles: artifacts/$(BuildConfiguration)/TestResults/*.xml
      testRunTitle: Unit Test Results
    condition: succeededOrFailed()

  # Publishes the entire contents of the source directory to the Azure Pipeline for use in other jobs/stages.
  - publish: $(Build.SourcesDirectory)
    displayName: Publish Build Sources
    artifact: Source
    condition: succeededOrFailed()