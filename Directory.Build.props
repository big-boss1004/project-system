<!-- Licensed to the .NET Foundation under one or more agreements. The .NET Foundation licenses this file to you under the MIT license. See the LICENSE.md file in the project root for more information. -->
<Project>

  <PropertyGroup>
    <IsUnitTestProject Condition="'$(IsUnitTestProject)' == ''">false</IsUnitTestProject>
    <IsIntegrationTestProject Condition="'$(IsIntegrationTestProject)' == ''">false</IsIntegrationTestProject>
    <IsTestProject Condition="'$(IsTestProject)' == ''">false</IsTestProject>
    <OutDirName Condition="'$(OutDirName)' == ''">Dlls</OutDirName>
  </PropertyGroup>

  <Import Project="build\import\NuGet.props"/>
  <Import Project="build\import\Versions.props"/>

  <PropertyGroup>
    <Configuration Condition="'$(Configuration)' == ''">Debug</Configuration>

    <!--
      RepoToolset props and targets are conditionally imported based on whether RepoToolsetDir is set or not
      to allow VS to load packages and perform automatic package restore. 
      TODO: Remove once we can use a custom SDK (https://github.com/Microsoft/msbuild/issues/1493)
    -->
    <!-- <_RepoToolsetDir>$(NuGetPackageRoot)roslyntools.repotoolset\$(RoslynToolsRepoToolsetVersion)\tools\</_RepoToolsetDir>
    <RepoToolsetDir Condition="'$(BuildingInsideVisualStudio)' != 'true' or Exists('$(_RepoToolsetDir)')">$(_RepoToolsetDir)</RepoToolsetDir> -->

    <RepositoryUrl>https://github.com/dotnet/project-system</RepositoryUrl>
    <PackageProjectUrl>$(RepositoryUrl)</PackageProjectUrl>

    <!-- All projects in this repository target the same framework by default -->
    <TargetFramework>net472</TargetFramework>
    <!-- Without setting TargetFrameworkVersion for .vsmanproj, GetReferenceAssemblyPaths runs against v4.0, which isn't installed on CI. -->
    <!-- error MSB3644: The reference assemblies for .NETFramework,Version=v4.0 were not found. To resolve this, install the Developer Pack (SDK/Targeting Pack) for this framework version or retarget your application. You can download .NET Framework Developer Packs at https://aka.ms/msbuild/developerpacks -->
    <TargetFrameworkVersion Condition="'$(MSBuildProjectExtension)' == '.vsmanproj'">v4.7.2</TargetFrameworkVersion>

    <AppendTargetFrameworkToOutputPath>false</AppendTargetFrameworkToOutputPath>

    <VSSDKTargetPlatformRegRootSuffix Condition="'$(RootSuffix)' != ''">$(RootSuffix)</VSSDKTargetPlatformRegRootSuffix>
    <VSSDKTargetPlatformRegRootSuffix Condition="'$(VSSDKTargetPlatformRegRootSuffix)' == ''">Exp</VSSDKTargetPlatformRegRootSuffix>

    <!-- Strong-name public keys -->
    <MicrosoftSharedPublicKey>0024000004800000940000000602000000240000525341310004000001000100b5fc90e7027f67871e773a8fde8938c81dd402ba65b9201d60593e96c492651e889cc13f1415ebb53fac1131ae0bd333c5ee6021672d9718ea31a8aebd0da0072f25d87dba6fc90ffd598ed4da35e44c398c454307e8e33b8426143daec9f596836f97c8f74750e5975c64e2189f45def46b2a2b1247adc3652bf5c308055da9</MicrosoftSharedPublicKey>
    <MicrosoftPublicKey>002400000480000094000000060200000024000052534131000400000100010007d1fa57c4aed9f0a32e84aa0faefd0de9e8fd6aec8f87fb03766c834c99921eb23be79ad9d5dcc1dd9ad236132102900b723cf980957fc4e177108fc607774f29e8320e92ea05ece4e821c0a5efe8f1645c4c0c93c1ab99285d622caa652c1dfad63d745d6f2de5f17e5eaf0fc4963d261c8a12436518206dc093344d5ad293</MicrosoftPublicKey>
    <MicrosoftAspNetPublicKey>0024000004800000940000000602000000240000525341310004000001000100f33a29044fa9d740c9b3213a93e57c84b472c84e0b8a0e1ae48e67a9f8f6de9d5f7f3d52ac23e48ac51801f1dc950abe901da34d2a9e3baadb141a17c77ef3c565dd5ee5054b91cf63bb3c6ab83f72ab3aafe93d0fc3c2348b764fafb0b1c0733de51459aeab46580384bf9d74c4e28164b7cde247f891ba07891c9d872ad2bb</MicrosoftAspNetPublicKey>
    <MoqPublicKey>0024000004800000940000000602000000240000525341310004000001000100c547cac37abd99c8db225ef2f6c8a3602f3b3606cc9891605d02baa56104f4cfc0734aa39b93bf7852f7d9266654753cc297e7d2edfe0bac1cdcf9f717241550e0a7b191195b7667bb4f64bcb8e2121380fd1d9d46ad2d92d2d15605093924cceaf74c4861eff62abf69b9291ed0a340e113be11e6a7d3113e92484cf7045cc7</MoqPublicKey>

    <AutoGenerateBindingRedirects>true</AutoGenerateBindingRedirects>
    <ForceGenerationOfBindingRedirects>true</ForceGenerationOfBindingRedirects>

    <ProduceReferenceAssembly>true</ProduceReferenceAssembly>
    <!-- For projects using VSSDK to generate pkgdef files, this sets the registry entires to link to the DLL directly in the PackageFolder location as opposed to using an Assembly reference. -->
    <UseCodebase>true</UseCodebase>
    <!-- https://github.com/dotnet/Nerdbank.GitVersioning/blob/main/doc/msbuild.md#reducing-getbuildversion-invocations -->
    <GitVersionBaseDirectory>$(MSBuildThisFileDirectory)</GitVersionBaseDirectory>
    <SuppressNETCoreSdkPreviewMessage>true</SuppressNETCoreSdkPreviewMessage>
    <!-- This tells XliffTasks to produce updated XLF files when building a project. -->
    <!-- We set this off in CI so that the CI build will fail if updated XLF files were not committed to the repo. -->
    <!-- https://github.com/dotnet/xliff-tasks/tree/main#using-microsoftdotnetxlifftasks -->
    <UpdateXlfOnBuild Condition="'$(CIBuild)' != 'true'">true</UpdateXlfOnBuild>
  </PropertyGroup>

  <!-- Modify the set of implicit usings -->
  <ItemGroup>
    <!-- We use immutable collections extensively and expect no naming conflicts -->
    <Using Include="System.Collections.Immutable" />
    <!-- There are two namespaces via which MEF attributes are defined. This is the correct one. -->
    <Using Include="System.ComponentModel.Composition" />
  </ItemGroup>

  <!--
    TODO: Import layout props so that design-time build executed before package restore is finished doesn't
    product artifacts into wrong obj directories. Remove once we can use a custom SDK (https://github.com/Microsoft/msbuild/issues/1493)
  -->
  <Import Project="build\import\ProjectLayout.props" />

  <!-- <Import Project="$(RepoToolsetDir)Settings.props" Condition="'$(ExcludeRestorePackageImports)' != 'true' AND Exists('$(RepoToolsetDir)Settings.props')" /> -->
  <!-- <Import Project="build\import\OverrideRepoToolsetVersions.props"/> -->

  <Import Project="build\import\ProjectDefaults.props" />
  <Import Project="build\import\Workarounds.props" />

  <PropertyGroup>
    <_IsVisualStudioDeveloperBuild Condition="'$(OfficialBuild)' != 'true' AND '$(CIBuild)' != 'true' AND '$(BuildingInsideVisualStudio)' == 'true'">true</_IsVisualStudioDeveloperBuild>

    <!-- Code Coverage doesn't currently work for portable/embedded PDBs - force to full inside Visual Studio builds -->
    <DebugType Condition="'$(_IsVisualStudioDeveloperBuild)' == 'true'">full</DebugType>
  </PropertyGroup>

  <PropertyGroup>
    <GenerateDocumentationFile>true</GenerateDocumentationFile>
    <MinimumVisualStudioVersion>17.0</MinimumVisualStudioVersion>
  </PropertyGroup>

  <!-- TODO: Combine this with ProjectDefaults.props. -->
  <PropertyGroup Condition="'$(Language)' == 'C#'">
    <CheckForOverflowUnderflow>false</CheckForOverflowUnderflow>
    <LangVersion>preview</LangVersion>
    <Nullable>enable</Nullable>
    <ImplicitUsings>enable</ImplicitUsings>
    <Features>strict</Features>
  </PropertyGroup>

  <PropertyGroup Condition="'$(Language)' == 'VB'">
    <LangVersion>16</LangVersion>
    <!-- The VBRuntime default is Embed -->
    <VBRuntime>Default</VBRuntime>
    <RemoveIntegerChecks>true</RemoveIntegerChecks>
    <Features>strict</Features>
  </PropertyGroup>

  <PropertyGroup>
    <UseCommonOutputDirectory Condition="'$(UseCommonOutputDirectory)' == ''">true</UseCommonOutputDirectory>
    <NoWarn>$(NoWarn);NU5125</NoWarn>
  </PropertyGroup>

</Project>